using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Text.RegularExpressions;

using System.IO;
using System.IO.Ports;
using System.Globalization;

using AlceOSD;

namespace AlceOSD_updater
{
    public partial class AlceOSDconfigForm : Form
    {
        private struct Canvas
        {
            public byte[] bitmap;
            public int width;
            public int height;
            public int x0;
            public int y0;
        }
        Dictionary<string, Canvas> ca = new Dictionary<string,Canvas>();
        Dictionary<string, int> widget_ids = new Dictionary<string, int>();
        String selected_widget = "";

        int xsize = 0, ysize = 0;

        Dictionary<string, Dictionary<string, double>> widgets = new Dictionary<string, Dictionary<string, double>>();
        Dictionary<string, string> widget_name_map = new Dictionary<string, string>() {
            {"Altitude", "ALTITUD"},
            {"Battery", "BATTERY"},
            {"Console", "CONSOLE"},
            {"Compass", "COMPASS"},
            {"Flight Info", "FLTINFO"},
            {"Flight Mode", "FLTMODE"},
            {"StOrM32 gimbal", "GIMBAL"},
            {"GPS info", "GPSINFO"},
            {"Home info", "HOMEINF"},
            {"Artificial Horizon", "HORIZON"},
            {"Radar", "RADAR"},
            {"RC Channels", "RCCHAN"},
            {"RSSI", "RSSI"},
            {"Sonar", "SONAR"},
            {"Speed", "SPEED"},
            {"Throttle", "THROTTL"},
            {"Variometer", "VARIO"},
            {"Video levels", "VIDLVL"},
            {"Video profile", "VIDPRF"},
            {"Wind info", "WINDINF"},
        };

        string def_filename = "alceosd_config.txt";
        bool file_opened = false;
        string header = "AlceOSD config generated by updater tool";

        SerialPort comPort = new SerialPort();

        UserSettings settings;

        /* flasher stuff */
        UInt32 PAGE_SIZE = 0x400;
        Dictionary<UInt32, UInt32[]> pages = new Dictionary<UInt32, UInt32[]>();

        private void write_mem(UInt32 addr, UInt32 value)
        {
            UInt32 page = addr & ~((PAGE_SIZE << 1) - 1);
            if (!pages.ContainsKey(page))
            {
                pages[page] = new UInt32[PAGE_SIZE];
                for (int i = 0; i < PAGE_SIZE; i++)
                {
                    pages[page][i] = 0xffffff;
                }
            }
            int index = (int)(addr - page) >> 1;
            pages[page][index] = value;
        }

        private void flashFirmwareToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string version = "";

            tabControl1.SelectTab(4);

            setup_comport();
            if (!open_comport())
                return;
            if (!reset_board(true))
                return;

            bool ready = false;
            string ans = "";
            string ans2;
            int timeout = 0;

            while (!ready)
            {
                while (comPort.BytesToRead < 1)
                {
                    System.Threading.Thread.Sleep(10);
                    if (++timeout > 100)
                    {
                        MessageBox.Show("Error waiting for bootloader", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        comPort.Close();
                        return;
                    }
                }

                ans += comPort.ReadExisting();

                if (ans.EndsWith("..."))
                    ready = true;

                ans2 = ans.TrimEnd();
                if (ans2.EndsWith("BIN"))
                    ready = true;
                if (ans2.EndsWith("IHEX"))
                    ready = true;
            }


            int v0 = ans.IndexOf('v') + 1;
            version = ans.Substring(v0, 3);

            txt_log.AppendText("AlceOSD bootloader version " + version + "\n");

            System.Threading.Thread.Sleep(500);
            comPort.DiscardInBuffer();


            DialogResult result = ofd_fwfile.ShowDialog();
            if ((result != DialogResult.Cancel) && (ofd_fwfile.FileName != ""))
            {
                txt_log.AppendText("Will flash file " + ofd_fwfile.FileName + "\n");
                do_flash(version);
            } else
            {
                byte[] abort = new byte[] { 0xff, 0xff, 0xff };
                txt_log.AppendText("Exiting bootloader...\n");
                comPort.Write(abort, 0, 3);
            }
            comPort.Close();
        }

        /* ********************************************************************************* */

        public AlceOSDconfigForm()
        {
            InitializeComponent();
        }

        private string[] get_com_ports()
        {
            string[] ports = SerialPort.GetPortNames();
            return ports;

        }

        private void cb_comport_Click(object sender, EventArgs e)
        {
            cb_comport.Items.Clear();
            cb_comport.Items.AddRange(get_com_ports());
        }

        private void setup_comport()
        {
            if (comPort.IsOpen)
                comPort.Close();
            comPort.BaudRate = 115200;
            comPort.DataBits = 8;
            comPort.StopBits = StopBits.One;
            comPort.Parity = Parity.None;
            comPort.DtrEnable = false;
            comPort.RtsEnable = false;
            comPort.ReadTimeout = 5000;
        }
        private bool open_comport()
        {
            try
            {
                comPort.PortName = cb_comport.Text;
                comPort.Open();
                return true;
            }
            catch
            {
                MessageBox.Show("Error opening com port " + cb_comport.Text, "COM port error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
        }
        private bool reset_board(bool flash)
        {
            List<int> baudrates = new List<int> { 115200, 57600, 19200 };
            bool in_setup = false;


            /* check if already in shell */
            foreach (int b in baudrates)
            {
                comPort.BaudRate = b;
                System.Threading.Thread.Sleep(100);
                comPort.DiscardInBuffer();
                comPort.Write("\n");
                System.Threading.Thread.Sleep(100);
                string ans = comPort.ReadExisting();
                //txt_log.AppendText("ans:" + ans + "\n");
                if (ans.EndsWith("> "))
                {
                    txt_log.AppendText("got shell\n");
                    in_setup = true;
                    break;
                }
            }

            /* enter setup (fw0v9+ & bootloader0v5+) */
            if (!in_setup)
            {
                foreach (int b in baudrates)
                {
                    comPort.BaudRate = b;
                    comPort.DiscardInBuffer();
                    comPort.Write("I want to enter AlceOSD setup");
                    System.Threading.Thread.Sleep(100);
                    string ans = comPort.ReadExisting();
                    //txt_log.AppendText(ans + "\n");
                    if (ans.EndsWith("AlceOSD setup starting"))
                    {
                        comPort.Write("\n");
                        System.Threading.Thread.Sleep(100);
                        ans = comPort.ReadExisting();
                        txt_log.AppendText("soft-start\n");
                        in_setup = true;
                        break;
                    }

                }
            }


            if (in_setup)
            {
                System.Threading.Thread.Sleep(500);
                comPort.DiscardInBuffer();
                if (flash)
                {
                    System.Threading.Thread.Sleep(10);
                    comPort.Write("reboot\n");
                    comPort.BaudRate = 115200;
                    System.Threading.Thread.Sleep(100);
                    comPort.Write("alceosd");
                }
            }
            else
            {
                /* bootloader < 0v5 */
                txt_log.AppendText("hard-reset\n");
                comPort.DtrEnable = true;
                comPort.RtsEnable = true;
                System.Threading.Thread.Sleep(50);

                comPort.DtrEnable = false;
                comPort.RtsEnable = false;
                System.Threading.Thread.Sleep(50);

                comPort.DiscardInBuffer();

                if (flash)
                {
                    comPort.BaudRate = 115200;
                    System.Threading.Thread.Sleep(100);
                    comPort.Write("alceosd");
                    return true;
                }

                /* enter config */
                /* bypass bootloader */
                comPort.Write("!");
                System.Threading.Thread.Sleep(500);
                comPort.Write("!!!!!!!!!");
                int timeout = 0;
                while (comPort.BytesToRead < 1)
                {
                    System.Threading.Thread.Sleep(10);
                    if (++timeout > 100)
                    {
                        MessageBox.Show("Error waiting for config", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        comPort.Close();
                        return false;
                    }
                }

            }

            return true;
        }


        private string[] dump_config()
        {
            List<string> config = new List<string> { };

            config.Add(header);
            config.Add("==");


            /* serial */
            config.Add("SERIAL1_MODE = " + Convert.ToDouble(cb_mode1.SelectedIndex));
            config.Add("SERIAL1_BAUD = " + Convert.ToDouble(cb_baud1.SelectedIndex));
            config.Add("SERIAL1_PINS = " + Convert.ToDouble(cb_port1.SelectedIndex));
            config.Add("SERIAL2_MODE = " + Convert.ToDouble(cb_mode2.SelectedIndex));
            config.Add("SERIAL2_BAUD = " + Convert.ToDouble(cb_baud2.SelectedIndex));
            config.Add("SERIAL2_PINS = " + Convert.ToDouble(cb_port2.SelectedIndex));
            config.Add("SERIAL3_MODE = " + Convert.ToDouble(cb_mode3.SelectedIndex));
            config.Add("SERIAL3_BAUD = " + Convert.ToDouble(cb_baud3.SelectedIndex));
            config.Add("SERIAL3_PINS = " + Convert.ToDouble(cb_port3.SelectedIndex));
            config.Add("SERIAL4_MODE = " + Convert.ToDouble(cb_mode4.SelectedIndex));
            config.Add("SERIAL4_BAUD = " + Convert.ToDouble(cb_baud4.SelectedIndex));
            config.Add("SERIAL4_PINS = " + Convert.ToDouble(cb_port4.SelectedIndex));

            /* video */
            config.Add("VIDEO_CHMODE = " + Convert.ToDouble(cb_vswmode.SelectedIndex));
            config.Add("VIDEO_CHTIME = " + (Convert.ToDouble(nud_vswtimer.Value) / 100).ToString());
            config.Add("VIDEO_CH = " + Convert.ToDouble(cb_vswch.SelectedIndex));
            config.Add("VIDEO_CHMIN = " + Convert.ToDouble(nud_vswmin.Value));
            config.Add("VIDEO_CHMAX = " + Convert.ToDouble(nud_vswmax.Value));

            int vidmode = cb_vidstd.SelectedIndex | ((cbx_isync.Checked ? 1 : 0) << 2);
            config.Add("VIDE0_STD = " + Convert.ToDouble(vidmode));
            config.Add("VIDE0_XSIZE = " + Convert.ToDouble(cb_xsize.SelectedIndex));
            config.Add("VIDE0_YSIZE = " + Convert.ToDouble(nud_ysize.Value));
            config.Add("VIDE0_XOFFSET = " + Convert.ToDouble(nud_xoffset.Value));
            config.Add("VIDE0_YOFFSET = " + Convert.ToDouble(nud_yoffset.Value));
            config.Add("VIDE0_BRIGHT = " + Convert.ToDouble(nud_brightness.Value));
            config.Add("VIDE0_WHITE = " + Convert.ToDouble(nud_whitelvl.Value));
            config.Add("VIDE0_GRAY = " + Convert.ToDouble(nud_graylvl.Value));
            config.Add("VIDE0_BLACK = " + Convert.ToDouble(nud_blacklvl.Value));

            vidmode = cb_vidstd1.SelectedIndex | ((cbx_isync1.Checked ? 1 : 0) << 2);
            config.Add("VIDE1_STD = " + Convert.ToDouble(vidmode));
            config.Add("VIDE1_XSIZE = " + Convert.ToDouble(cb_xsize1.SelectedIndex));
            config.Add("VIDE1_YSIZE = " + Convert.ToDouble(nud_ysize1.Value));
            config.Add("VIDE1_XOFFSET = " + Convert.ToDouble(nud_xoffset1.Value));
            config.Add("VIDE1_YOFFSET = " + Convert.ToDouble(nud_yoffset1.Value));
            config.Add("VIDE1_BRIGHT = " + Convert.ToDouble(nud_brightness1.Value));
            config.Add("VIDE1_WHITE = " + Convert.ToDouble(nud_whitelvl1.Value));
            config.Add("VIDE1_GRAY = " + Convert.ToDouble(nud_graylvl1.Value));
            config.Add("VIDE1_BLACK = " + Convert.ToDouble(nud_blacklvl1.Value));

            /* misc */
            config.Add("HOME_LOCKING = " + Convert.ToDouble(nud_homelock.Value));
            config.Add("OSD_UNITS = " + (Convert.ToDouble(cb_units.SelectedIndex + 1)));

            /* tabs */
            config.Add("TABS_MODE = " + Convert.ToDouble(cb_tabmode.SelectedIndex));
            config.Add("TABS_TIME = " + (Convert.ToDouble(nud_tabtimer.Value) / 100).ToString());
            config.Add("TABS_CH = " + Convert.ToDouble(cb_tabch.SelectedIndex));
            config.Add("TABS_CH_MIN = " + Convert.ToDouble(nud_tabmin.Value));
            config.Add("TABS_CH_MAX = " + Convert.ToDouble(nud_tabmax.Value));

            /* mavlink */
            config.Add("MAV_UAVSYSID = " + Convert.ToDouble(nud_uavsysid.Value));
            config.Add("MAV_OSDSYSID = " + Convert.ToDouble(nud_osdsysid.Value));
            config.Add("MAV_HRTBEAT = " + Convert.ToDouble(cbx_mavhb.Checked ? 1 : 0));

            config.Add("MAV_RAWSENS = " + Convert.ToDouble(nud_streamRawSensors.Value));
            config.Add("MAV_EXTSTAT = " + Convert.ToDouble(nud_streamExtStatus.Value));
            config.Add("MAV_RCCHAN = " + Convert.ToDouble(nud_streamRcChannels.Value));
            config.Add("MAV_RAWCTRL = " + Convert.ToDouble(nud_streamRawCtrl.Value));
            config.Add("MAV_POSITION = " + Convert.ToDouble(nud_streamPosition.Value));
            config.Add("MAV_EXTRA1 = " + Convert.ToDouble(nud_streamExtra1.Value));
            config.Add("MAV_EXTRA2 = " + Convert.ToDouble(nud_streamExtra2.Value));
            config.Add("MAV_EXTRA3 = " + Convert.ToDouble(nud_streamExtra3.Value));


            /* widgets */
            foreach (KeyValuePair<string, Dictionary<string, double>> pair in widgets)
            {
                foreach (KeyValuePair<string, double> pair2 in pair.Value)
                {
                    config.Add(pair.Key + "_" + pair2.Key + " = " + Convert.ToString(pair2.Value, CultureInfo.InvariantCulture.NumberFormat));
                }
            }

            config.Add("--");
            config.Add("");

            return config.ToArray();
        }



        private void parse_config(string[] config)
        {
            List<string> vidcfg = new List<string>();
            List<string> uartcfg = new List<string>();

            List<string> mavcfg = new List<string>();
            List<string> misccfg = new List<string>();
            List<string> tabscfg = new List<string>();
            List<string> widgetscfg = new List<string>();

            string[] entry;

            string val;

            foreach (string value in config)
            {

                if (value.StartsWith("AlceOSD config"))
                {
                    header = value.Trim();
                    continue;
                }


                entry = value.Split('_');
                if (entry.Length > 1)
                {
                    val = String.Join("_", entry, 1, entry.Length - 1);
                    switch (entry.ElementAt(0))
                    {
                        case "VIDEO":
                        case "VIDE0":
                        case "VIDE1":
                            vidcfg.Add(value);
                            break;

                        case "SERIAL1":
                        case "SERIAL2":
                        case "SERIAL3":
                        case "SERIAL4":
                            uartcfg.Add(value);
                            break;

                        case "TABS":
                            tabscfg.Add(val);
                            break;
                        case "HOME":
                        case "OSD":
                            misccfg.Add(value);
                            break;
                        case "MAV":
                            mavcfg.Add(val);
                            break;

                        default:
                            /* widgets */
                            widgetscfg.Add(value);
                            break;
                    }

                }
            }
            try { populateVideoConfig(vidcfg); } catch { MessageBox.Show("Error parsing video config!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            try { populateUARTConfig(uartcfg); } catch { MessageBox.Show("Error parsing UART config!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            try { populateTabswitchConfig(tabscfg); } catch { MessageBox.Show("Error parsing tab switch config!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            try { populateMavlinkConfig(mavcfg); } catch { MessageBox.Show("Error parsing mavlink config!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
            try { populateMiscConfig(misccfg); } catch { MessageBox.Show("Error parsing misc config!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }

            try { populateWidgetsConfig(widgetscfg); } catch { MessageBox.Show("Error parsing widgets config!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }

        }



        private void openConfigToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string[] config;
            ofd_loadcfg.FileName = def_filename;
            if (ofd_loadcfg.ShowDialog() == DialogResult.OK)
            {
                def_filename = ofd_loadcfg.FileName;
                file_opened = true;

                this.Text = "AlceOSD Config Editor - " + Path.GetFileName(def_filename);

                using (StreamReader sr = new StreamReader(ofd_loadcfg.OpenFile()))
                {
                    string fw = "";
                    fw = sr.ReadToEnd();
                    config = fw.Split('\n');
                }
                parse_config(config);
            }
        }



        private void populateVideoConfig(List<string> config)
        {
            string[] entry, entry2;
            string key, val, param;
            double dval;
            foreach (string value in config)
            {
                entry = value.Split('=');
                if (entry.Count() < 2)
                    continue;
                key = entry.ElementAt(0).Trim();
                entry2 = key.Split('_');
                key = entry2.ElementAt(0).Trim();
                param = entry2.ElementAt(1).Trim();
                val = entry.ElementAt(1).Trim();
                dval = Convert.ToDouble(val, CultureInfo.InvariantCulture.NumberFormat);
                //txt_log.AppendText(key + " " + param + "=" + val + "\n");

                bool isync = true;
                int std = -1, xsize = -1, ysize = -1, xoffset = -1, yoffset = -1;
                int bright = -1, white = -1, gray = -1, black = -1;

                int chmode = -1, chtimer = -1, ch = -1, chmin = -1, chmax = -1;

                switch (param)
                {
                    case "STD":
                        std = Convert.ToByte(dval) & 3;
                        isync = (Convert.ToByte(dval) & 4) == 0 ? false : true;
                        break;
                    case "XSIZE":
                        xsize = Convert.ToByte(dval);
                        break;
                    case "YSIZE":
                        ysize = Convert.ToInt16(dval);
                        break;
                    case "XOFFSET":
                        xoffset = Convert.ToInt16(dval);
                        break;
                    case "YOFFSET":
                        yoffset = Convert.ToInt16(dval);
                        break;
                    case "BRIGHT":
                        bright = Convert.ToInt16(dval);
                        break;
                    case "WHITE":
                        white = Convert.ToInt16(dval);
                        break;
                    case "GRAY":
                        gray = Convert.ToInt16(dval);
                        break;
                    case "BLACK":
                        black = Convert.ToInt16(dval);
                        break;

                    /* common */
                    case "CHMODE":
                        chmode = Convert.ToInt16(dval);
                        break;
                    case "CHTIME":
                        chtimer = Convert.ToInt16(dval);
                        break;
                    case "CH":
                        ch = Convert.ToInt16(dval);
                        break;
                    case "CHMIN":
                        chmin = Convert.ToInt16(dval);
                        break;
                    case "CHMAX":
                        chmax = Convert.ToInt16(dval);
                        break;

                    default:
                        break;
                }
                switch (key)
                {
                    default:
                    case "VIDEO":
                    case "VIDE0":
                        if (chmode != -1) cb_vswmode.SelectedIndex = chmode;
                        if (chtimer != -1) nud_vswtimer.Value = chtimer * 100;
                        if (ch != -1) cb_vswch.SelectedIndex = ch;
                        if (chmin != -1) nud_vswmin.Value = chmin;
                        if (chmax != -1) nud_vswmax.Value = chmax;

                        if (std != -1)
                        {
                            cb_vidstd.SelectedIndex = std;
                            cbx_isync.Checked = isync;
                        }
                        if (xsize != -1) cb_xsize.SelectedIndex = xsize;
                        if (ysize != -1) nud_ysize.Value = ysize;
                        if (xoffset != -1) nud_xoffset.Value = xoffset;
                        if (yoffset != -1) nud_yoffset.Value = yoffset;
                        if (bright != -1) nud_brightness.Value = bright;
                        if (white != -1) nud_whitelvl.Value = white;
                        if (gray != -1) nud_graylvl.Value = gray;
                        if (black != -1) nud_blacklvl.Value = black;
                        break;
                    case "VIDE1":
                        if (std != -1)
                        {
                            cb_vidstd1.SelectedIndex = std;
                            cbx_isync1.Checked = isync;
                        }
                        if (xsize != -1) cb_xsize1.SelectedIndex = xsize;
                        if (ysize != -1) nud_ysize1.Value = ysize;
                        if (xoffset != -1) nud_xoffset1.Value = xoffset;
                        if (yoffset != -1) nud_yoffset1.Value = yoffset;
                        if (bright != -1) nud_brightness1.Value = bright;
                        if (white != -1) nud_whitelvl1.Value = white;
                        if (gray != -1) nud_graylvl1.Value = gray;
                        if (black != -1) nud_blacklvl1.Value = black;
                        break;
                }
            }
        }

        private void populateUARTConfig(List<string> config)
        {
            string[] entry, entry2;
            string key, val, param;
            double dval;
            int mode = -1, baud = -1, port = -1;
            foreach (string value in config)
            {
                entry = value.Split('=');
                if (entry.Count() < 2)
                    continue;
                key = entry.ElementAt(0).Trim();
                entry2 = key.Split('_');
                key = entry2.ElementAt(0).Trim();
                param = entry2.ElementAt(1).Trim();
                val = entry.ElementAt(1).Trim();
                dval = Convert.ToDouble(val, CultureInfo.InvariantCulture.NumberFormat);
                //tb_log.AppendText(key + "=" + val + "\n");

                switch (param)
                {
                    case "MODE":
                        mode = Convert.ToByte(dval);
                        break;
                    case "BAUD":
                        baud = Convert.ToByte(dval);
                        break;
                    case "PINS":
                        port = Convert.ToByte(dval);
                        break;
                    default:
                        break;
                }

                switch (key)
                {
                    case "SERIAL1":
                        cb_mode1.SelectedIndex = mode;
                        cb_baud1.SelectedIndex = baud;
                        cb_port1.SelectedIndex = port;
                        break;
                    case "SERIAL2":
                        cb_mode2.SelectedIndex = mode;
                        cb_baud2.SelectedIndex = baud;
                        cb_port2.SelectedIndex = port;
                        break;
                    case "SERIAL3":
                        cb_mode3.SelectedIndex = mode;
                        cb_baud3.SelectedIndex = baud;
                        cb_port3.SelectedIndex = port;
                        break;
                    case "SERIAL4":
                        cb_mode4.SelectedIndex = mode;
                        cb_baud4.SelectedIndex = baud;
                        cb_port4.SelectedIndex = port;
                        break;
                    default:
                        break;

                }
            }
        }

        private void populateTabswitchConfig(List<string> config)
        {
            string[] entry;
            string key, val;
            double dval;
            foreach (string value in config)
            {
                entry = value.Split('=');
                if (entry.Count() < 2)
                    continue;
                key = entry.ElementAt(0).Trim();
                val = entry.ElementAt(1).Trim();
                dval = Convert.ToDouble(val, CultureInfo.InvariantCulture.NumberFormat);
                //tb_log.AppendText(key + "=" + val + "\n");

                switch (key)
                {
                    case "MODE":
                        cb_tabmode.SelectedIndex = Convert.ToByte(dval);
                        break;
                    case "TIME":
                        nud_tabtimer.Value = Convert.ToByte(dval) * 100;
                        break;
                    case "CH":
                        cb_tabch.SelectedIndex = Convert.ToByte(dval);
                        break;
                    case "CH_MIN":
                        nud_tabmin.Value = Convert.ToUInt16(dval);
                        break;
                    case "CH_MAX":
                        nud_tabmax.Value = Convert.ToUInt16(dval);
                        break;
                    default:
                        break;
                }

            }
        }


        private void populateMavlinkConfig(List<string> config)
        {
            string[] entry;
            string key, val;
            double dval;
            foreach (string value in config)
            {
                entry = value.Split('=');
                if (entry.Count() < 2)
                    continue;
                key = entry.ElementAt(0).Trim();
                val = entry.ElementAt(1).Trim();
                dval = Convert.ToDouble(val, CultureInfo.InvariantCulture.NumberFormat);
                //tb_log.AppendText(key + "=" + val + "\n");

                switch (key)
                {
                    case "UAVSYSID":
                        nud_uavsysid.Value = Convert.ToByte(dval);
                        break;
                    case "OSDSYSID":
                        nud_osdsysid.Value = Convert.ToByte(dval);
                        break;
                    case "RAWSENS":
                        nud_streamRawSensors.Value = Convert.ToByte(dval);
                        break;
                    case "EXTSTAT":
                        nud_streamExtStatus.Value = Convert.ToByte(dval);
                        break;
                    case "RCCHAN":
                        nud_streamRcChannels.Value = Convert.ToByte(dval);
                        break;
                    case "RAWCTRL":
                        nud_streamRawCtrl.Value = Convert.ToByte(dval);
                        break;
                    case "POSITION":
                        nud_streamPosition.Value = Convert.ToByte(dval);
                        break;
                    case "EXTRA1":
                        nud_streamExtra1.Value = Convert.ToByte(dval);
                        break;
                    case "EXTRA2":
                        nud_streamExtra2.Value = Convert.ToByte(dval);
                        break;
                    case "EXTRA3":
                        nud_streamExtra3.Value = Convert.ToByte(dval);
                        break;
                    case "HRTBEAT":
                        cbx_mavhb.Checked = (Convert.ToByte(dval) == 1) ? true : false;
                        break;
                    default:
                        break;
                }

            }
        }


        private void populateMiscConfig(List<string> config)
        {
            string[] entry;
            string key, val;
            double dval;
            foreach (string value in config)
            {
                entry = value.Split('=');
                if (entry.Count() < 2)
                    continue;
                key = entry.ElementAt(0).Trim();
                val = entry.ElementAt(1).Trim();
                dval = Convert.ToDouble(val, CultureInfo.InvariantCulture.NumberFormat);
                //tb_log.AppendText(key + "=" + val + "\n");

                switch (key)
                {
                    case "HOME_LOCKING":
                        nud_homelock.Value = Convert.ToByte(dval);
                        break;
                    case "OSD_UNITS":
                        cb_units.SelectedIndex = Convert.ToByte(dval) - 1;
                        break;
                    default:
                        break;
                }

            }
        }

        private void submit_widget_config(String name)
        {
            if (!widgets.ContainsKey(name))
                return;
            
            if (!shell_active)
                return;

            Dictionary<String, Double> w = widgets[name];

            string wname = name.Substring(0, name.Length - 1);

            int id = -1;
            if (widget_ids.ContainsKey(wname))
            {
                id = widget_ids[wname];
            }
            int uid = name.ElementAt(name.Length - 1) - '0';

            string full_id = id.ToString() + "+" + uid.ToString();

            string cmd = "widgets cfg -i " + full_id;
            cmd += " -x " + w["X"];
            cmd += " -y " + w["Y"];
            cmd += " -h " + w["HJUST"];
            cmd += " -v " + w["VJUST"];
            comPort.WriteLine(cmd);
        }


        private void populateWidgetsConfig(List<string> config)
        {

            widgets.Clear();

            string[] entry, entry2;
            string key, val, param;
            double dval;
            foreach (string value in config)
            {
                entry = value.Split('=');
                if (entry.Count() < 2)
                    continue;
                key = entry.ElementAt(0).Trim();

                entry2 = key.Split('_');

                key = entry2.ElementAt(0).Trim();
                param = entry2.ElementAt(1).Trim();

                val = entry.ElementAt(1).Trim();
                dval = Convert.ToDouble(val, CultureInfo.InvariantCulture.NumberFormat);
                //tb_log.AppendText(key + "=" + val + "\n");

                if (!widgets.ContainsKey(key))
                    widgets[key] = new Dictionary<string, double>();

                widgets[key][param] = dval;
            }

            update_lb_widgets();

            /*
            foreach (KeyValuePair<string, Dictionary<string, double>> pair in widgets)
            {

                txt_log.AppendText(pair.Key + ": ");
                foreach (KeyValuePair<string, double> pair2 in pair.Value)
                    txt_log.AppendText(pair2.Key + "=" + pair2.Value + "; ");
                txt_log.AppendText("\n");
            }
            */
        }


        private void update_lb_widgets()
        {
            lb_widgets.Items.Clear();

            foreach (KeyValuePair<string, Dictionary<string, double>> pair in widgets)
            {
                if (Convert.ToDecimal(pair.Value["TAB"]) == nud_seltab.Value)
                {
                    lb_widgets.Items.Add(pair.Key);
                }
            }
        }


        private void nud_seltab_ValueChanged(object sender, EventArgs e)
        {
            if (shell_active)
            {
                comPort.WriteLine("tabs load -t " + nud_seltab.Value);

            }
            update_lb_widgets();
        }

        private void set_param(int idx, string text)
        {
            TextBox[] tb = { tb_wp1, tb_wp2, tb_wp3, tb_wp4 };
            Label[] lbl = { lbl_wp1, lbl_wp2, lbl_wp3, lbl_wp4 };
            lbl[idx - 1].Visible = true;
            tb[idx - 1].Visible = true;
            lbl[idx - 1].Text = text;
        }


        bool timer_submit_allowed = true;

        private void lb_widgets_SelectedIndexChanged(object sender, EventArgs e)
        {
            string key;
            try {
                key = lb_widgets.SelectedItem.ToString();
            } catch
            {
                return;
            }
            //tb_log.AppendText(key + "\n");

            string wid = key.Substring(0, key.Length - 1);

            timer_submit_allowed = false;

            selected_widget = key;
            pb_osd.Invalidate();

            lbl_wp1.Visible = false;
            lbl_wp2.Visible = false;
            lbl_wp3.Visible = false;
            lbl_wp4.Visible = false;
            tb_wp1.Visible = false;
            tb_wp2.Visible = false;
            tb_wp3.Visible = false;
            tb_wp4.Visible = false;

            lbl_wmode.Visible = false;
            cb_wmode.Visible = false;
            lbl_wmode.Text = "Mode";
            cb_wmode.Items.Clear();
            cb_wmode.Text = "";

            lbl_wsource.Visible = false;
            cb_wsource.Visible = false;
            cb_wsource.Items.Clear();
            cb_wsource.Text = "";

            cb_wunits.Items.Clear();
            cb_wunits.Items.Add("Default");
            cb_wunits.Items.Add("Metric");
            cb_wunits.Items.Add("Imperial");

            /* setup display */
            switch (wid)
            {
                case "ALTITUD":
                    lbl_wname.Text = "Altitude";
                    cb_wmode.Items.Add("Dial");
                    cb_wmode.Items.Add("Text");
                    cb_wmode.Visible = true;
                    lbl_wmode.Visible = true;
                    cb_wsource.Items.Add("GPS (M.S.L.)");
                    cb_wsource.Items.Add("Home altitude");
                    cb_wsource.Items.Add("GPS2 (M.S.L.)");
                    cb_wsource.Items.Add("Terrain altitude");
                    cb_wsource.Visible = true;
                    lbl_wsource.Visible = true;
                    break;
                case "BATTERY":
                    lbl_wname.Text = "Battery, voltage and current";
                    cb_wmode.Items.Add("Mavlink voltage+current");
                    cb_wmode.Items.Add("ADC CH0");
                    cb_wmode.Items.Add("ADC CH1");
                    cb_wmode.Items.Add("ADC CH0+CH1");
                    cb_wmode.Items.Add("Calculated flight mAh");
                    lbl_wmode.Visible = true;
                    cb_wmode.Visible = true;
                    set_param(1, "ADC0 cal");
                    set_param(2, "ADC1 cal");
                    break;
                case "COMPASS":
                    lbl_wname.Text = "Compass";
                    break;
                case "CONSOLE":
                    lbl_wname.Text = "Console";
                    break;
                case "FLTINFO":
                    lbl_wname.Text = "Flight information";
                    break;
                case "FLTMODE":
                    lbl_wname.Text = "Flight mode";
                    lbl_wmode.Text = "Font";
                    lbl_wmode.Visible = true;
                    cb_wmode.Visible = true;
                    cb_wmode.Items.Add("Small");
                    cb_wmode.Items.Add("Medium");
                    cb_wmode.Items.Add("Large");
                    break;
                case "GIMBAL":
                    lbl_wname.Text = "Storm32 gimbal";
                    break;
                case "GPSINFO":
                    lbl_wname.Text = "GPS coords/status";
                    lbl_wmode.Text = "Font";
                    lbl_wmode.Visible = true;
                    lbl_wsource.Text = "Source";
                    lbl_wsource.Visible = true;
                    cb_wmode.Visible = true;
                    cb_wmode.Items.Add("Small");
                    cb_wmode.Items.Add("Medium");
                    cb_wmode.Items.Add("Large");
                    cb_wsource.Visible = true;
                    cb_wsource.Items.Add("GPS1");
                    cb_wsource.Items.Add("GPS2");
                    break;
                case "HOMEINF":
                    lbl_wname.Text = "Home information (distance, altitude, direction)";
                    break;
                case "HORIZON":
                    lbl_wname.Text = "Artificial horizon";
                    lbl_wmode.Visible = true;
                    cb_wmode.Visible = true;
                    cb_wmode.Items.Add("Default");
                    cb_wmode.Items.Add("Compass");
                    break;
                case "RADAR":
                    lbl_wname.Text = "Radar";
                    lbl_wmode.Visible = true;
                    cb_wmode.Visible = true;
                    cb_wmode.Items.Add("UAV point of view (small)");
                    cb_wmode.Items.Add("UAV point of view (large)");
                    cb_wmode.Items.Add("Pilot point of view, north up (small)");
                    cb_wmode.Items.Add("Pilot point of view, north up (large)");
                    cb_wmode.Items.Add("Pilot point of view, launch direction up (small)");
                    cb_wmode.Items.Add("Pilot point of view, launch direction up (large)");
                    cb_wmode.Items.Add("Waypoints, pilot point of view, north up (small)");
                    cb_wmode.Items.Add("Waypoints, pilot point of view, north up (large)");
                    break;
                case "RCCHAN":
                    lbl_wname.Text = "RC Channel monitor";
                    lbl_wmode.Visible = true;
                    cb_wmode.Visible = true;
                    cb_wmode.Items.Add("Numbers and Bars");
                    cb_wmode.Items.Add("Numbers only");
                    cb_wmode.Items.Add("Bars only");
                    break;
                case "RSSI":
                    lbl_wname.Text = "RSSI monitor";
                    lbl_wsource.Visible = true;
                    cb_wsource.Visible = true;
                    cb_wsource.Items.Add("Mavlink RSSI");
                    cb_wsource.Items.Add("RC Channel");
                    //cb_wsource.Items.Add("ADC0");
                    set_param(1, "Min value");
                    set_param(2, "Max value");
                    set_param(3, "RC Channel(0-7)");
                    break;
                case "SONAR":
                    lbl_wname.Text = "Sonar";
                    break;
                case "SPEED":
                    lbl_wname.Text = "Speed";
                    lbl_wsource.Visible = true;
                    cb_wsource.Visible = true;
                    cb_wsource.Items.Add("Air speed");
                    cb_wsource.Items.Add("Ground speed");
                    lbl_wmode.Visible = true;
                    cb_wmode.Visible = true;
                    cb_wmode.Items.Add("Dial");
                    cb_wmode.Items.Add("Text");

                    cb_wunits.Items.Clear();
                    cb_wunits.Items.Add("Default");
                    cb_wunits.Items.Add("km/h");
                    cb_wunits.Items.Add("mph");
                    cb_wunits.Items.Add("m/s");
                    cb_wunits.Items.Add("f/s");
                    cb_wunits.Items.Add("kn");
                    break;
                case "THROTTL":
                    lbl_wname.Text = "Throttle bar";
                    break;
                case "VARIO":
                    lbl_wname.Text = "Variometer chart / vertical speed";
                    break;
                case "VIDLVL":
                    lbl_wname.Text = "Video levels (for debug)";
                    break;
                case "VIDPRF":
                    lbl_wname.Text = "Video profile";
                    lbl_wmode.Visible = true;
                    cb_wmode.Visible = true;
                    cb_wmode.Items.Add("Profile 0 (default)");
                    cb_wmode.Items.Add("Profile 1");
                    break;
                case "WINDINF":
                    lbl_wname.Text = "Wind speed";
                    cb_wunits.Items.Clear();
                    cb_wunits.Items.Add("Default");
                    cb_wunits.Items.Add("km/h");
                    cb_wunits.Items.Add("mph");
                    cb_wunits.Items.Add("m/s");
                    cb_wunits.Items.Add("f/s");
                    cb_wunits.Items.Add("kn");
                    break;
                default:
                    break;
            }



            Dictionary<string, double> wcfg = widgets[key];

            /* common stuff */
            nud_wxpos.Value = Convert.ToDecimal(wcfg["X"]);
            nud_wypos.Value = Convert.ToDecimal(wcfg["Y"]);
            cb_wvjust.SelectedIndex = Convert.ToByte(wcfg["VJUST"]);
            cb_whjust.SelectedIndex = Convert.ToByte(wcfg["HJUST"]);
            cb_wunits.SelectedIndex = Convert.ToByte(wcfg["UNITS"]);

            tb_wp1.Text = wcfg["PARAM1"].ToString();
            tb_wp2.Text = wcfg["PARAM2"].ToString();
            tb_wp3.Text = wcfg["PARAM3"].ToString();
            tb_wp4.Text = wcfg["PARAM4"].ToString();

            if (cb_wmode.Items.Count > 0)
                cb_wmode.SelectedIndex = Convert.ToByte(wcfg["MODE"]);
            if (cb_wsource.Items.Count > 0)
                cb_wsource.SelectedIndex = Convert.ToByte(wcfg["SOURCE"]);

            timer_submit_allowed = true;

        }



        public static string ShowMoveToTabDialog()
        {
            Form prompt = new Form();
            prompt.Width = 300;
            prompt.Height = 150;
            prompt.FormBorderStyle = FormBorderStyle.FixedDialog;
            prompt.Text = "Destination tab";
            prompt.StartPosition = FormStartPosition.CenterScreen;
            Label textLabel = new Label() { Left = 50, Top = 20, Text = "New tab" };
            NumericUpDown nud = new NumericUpDown() { Left = 150, Top = 20, Width = 100, Maximum = 255, Minimum = 1 };
            Button confirmation = new Button() { Text = "Ok", Left = 180, Width = 70, Top = 70, DialogResult = DialogResult.OK };
            Button cancel = new Button() { Text = "Cancel", Left = 100, Width = 70, Top = 70, DialogResult = DialogResult.Cancel };
            confirmation.Click += (sender, e) => { prompt.Close(); };
            cancel.Click += (sender, e) => { prompt.Close(); };
            prompt.Controls.Add(nud);
            prompt.Controls.Add(confirmation);
            prompt.Controls.Add(cancel);
            prompt.Controls.Add(textLabel);
            prompt.AcceptButton = confirmation;

            return prompt.ShowDialog() == DialogResult.OK ? nud.Value.ToString() : "";
        }


        private void moveToTabToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string new_tab = ShowMoveToTabDialog();
            if (new_tab == "")
                return;
            string w = lb_widgets.SelectedItem.ToString();
            widgets[w]["TAB"] = Convert.ToDouble(new_tab);
            update_lb_widgets();
        }

        private void cm_widget_Opening(object sender, CancelEventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
            {
                cm_widget.Items[0].Enabled = false;
                cm_widget.Items[2].Enabled = false;
            }
            else
            {
                cm_widget.Items[0].Enabled = true;
                cm_widget.Items[2].Enabled = true;
            }

        }







        private string AddNewWidgetDialog()
        {
            Form prompt = new Form();
            prompt.Width = 300;
            prompt.Height = 150;
            prompt.FormBorderStyle = FormBorderStyle.FixedDialog;
            prompt.Text = "Select Widget";
            prompt.StartPosition = FormStartPosition.CenterScreen;
            Label textLabel = new Label() { Left = 50, Top = 20, Text = "Widget" };
            ComboBox cb = new ComboBox() { Left = 150, Top = 20, Width = 100 };
            Button confirmation = new Button() { Text = "Ok", Left = 180, Width = 70, Top = 70, DialogResult = DialogResult.OK };
            Button cancel = new Button() { Text = "Cancel", Left = 100, Width = 70, Top = 70, DialogResult = DialogResult.Cancel };
            confirmation.Click += (sender, e) => { prompt.Close(); };
            cancel.Click += (sender, e) => { prompt.Close(); };
            prompt.Controls.Add(cb);
            prompt.Controls.Add(confirmation);
            prompt.Controls.Add(cancel);
            prompt.Controls.Add(textLabel);
            prompt.AcceptButton = confirmation;

            foreach (KeyValuePair<string, string> pair in widget_name_map)
            {
                cb.Items.Add(pair.Key);
            }

            cb.SelectedIndex = 0;

            string r;
            if (prompt.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    r = cb.SelectedItem.ToString();
                }
                catch
                {
                    r = "";
                }

            }
            else
            {
                r = "";
            }
            return r;
        }



        private void addWidgetToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string w = AddNewWidgetDialog();

            if (w == "")
                return;

            string wid = widget_name_map[w];

            List<string> all_wids = new List<string>();

            all_wids = widgets.Keys.ToList<string>();

            int i;
            for (i = 0; i < 10; i++) {
                if (!widgets.Keys.Contains(wid + i.ToString()))
                    break;
            }


            string new_wid = wid + i.ToString();

            Dictionary<string, double> new_wid_d = new Dictionary<string, double>() {
                {"TAB", Convert.ToDouble(nud_seltab.Value) },
                {"X", 0.0 },
                {"Y", 0.0 },
                {"HJUST", 0.0 },
                {"VJUST", 0.0 },
                {"MODE", 0.0 },
                {"SOURCE", 0.0 },
                {"UNITS", 0.0 },
                {"PARAM1", 0.0 },
                {"PARAM2", 0.0 },
                {"PARAM3", 0.0 },
                {"PARAM4", 0.0 },
            };

            widgets[new_wid] = new_wid_d;
            update_lb_widgets();
        }

        private void removeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string w = lb_widgets.SelectedItem.ToString();
            DialogResult result = MessageBox.Show("Remove '" + w + "' widget?",
                "Remove widget",
                MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                widgets.Remove(w);
                update_lb_widgets();
            }
        }



        private void save_cfg(string filename)
        {
            using (StreamWriter sw = new StreamWriter(filename))
            {
                string[] config = dump_config();

                foreach (string element in config)
                    sw.WriteLine(element);
            }
        }


        private int pos2canvas(String name, int pos, char dir)
        {
            Dictionary<String, Double> w = widgets[name];
            int div = (int) w[dir + "JUST"];
            int osd_size = (dir == 'H') ? xsize : ysize;
            int wid_size = (dir == 'H') ? ca[name].width * 4 : ca[name].height;
            int ret = 0;

            if (div > 0)
                ret = (osd_size - wid_size) / div;

            return ret + pos;
        }



        private void flag_submit()
        {
            if (ca.ContainsKey(selected_widget))
            {
                Canvas c = ca[selected_widget];
                c.x0 = pos2canvas(selected_widget, (int)nud_wxpos.Value, 'H');
                c.y0 = pos2canvas(selected_widget, (int)nud_wypos.Value, 'V');
                ca[selected_widget] = c;
                pb_osd.Invalidate();
            }

            timer_submit.Stop();
            if (timer_submit_allowed)
                timer_submit.Start();
        }


        private void saveAsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ofd_savecfg.FileName = def_filename;
            if (ofd_savecfg.ShowDialog() != DialogResult.OK)
                return;

            save_cfg(ofd_savecfg.FileName);
            def_filename = ofd_savecfg.FileName;
            this.Text = "AlceOSD config editor - " + Path.GetFileName(def_filename);
        }

        private void saveConfigToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!file_opened)
            {
                ofd_savecfg.FileName = def_filename;
                ofd_savecfg.ShowDialog();

                if (ofd_savecfg.ShowDialog() != DialogResult.OK)
                    return;

                file_opened = true;
                def_filename = ofd_savecfg.FileName;
            }

            save_cfg(def_filename);
            this.Text = "AlceOSD Config Editor - " + Path.GetFileName(def_filename);
        }

        private void nud_wxpos_ValueChanged(object sender, EventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
                return;
            string w = lb_widgets.SelectedItem.ToString();
            widgets[w]["X"] = Convert.ToDouble(nud_wxpos.Value);
            flag_submit();
        }

        private void nud_wypos_ValueChanged(object sender, EventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
                return;
            string w = lb_widgets.SelectedItem.ToString();
            widgets[w]["Y"] = Convert.ToDouble(nud_wypos.Value);
            flag_submit();
        }

        private void cb_wvjust_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
                return;
            string w = lb_widgets.SelectedItem.ToString();
            widgets[w]["VJUST"] = Convert.ToDouble(cb_wvjust.SelectedIndex);
        }

        private void cb_whjust_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
                return;
            string w = lb_widgets.SelectedItem.ToString();
            widgets[w]["HJUST"] = Convert.ToDouble(cb_whjust.SelectedIndex);

            //if (ca.ContainsKey(w))
            //    redraw_widget(w);

        }

        private void cb_wmode_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
                return;
            string w = lb_widgets.SelectedItem.ToString();
            widgets[w]["MODE"] = Convert.ToDouble(cb_wmode.SelectedIndex);
        }

        private void cb_wunits_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
                return;
            string w = lb_widgets.SelectedItem.ToString();
            widgets[w]["UNITS"] = Convert.ToDouble(cb_wunits.SelectedIndex);
        }

        private void cb_wsource_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
                return;
            string w = lb_widgets.SelectedItem.ToString();
            widgets[w]["SOURCE"] = Convert.ToDouble(cb_wsource.SelectedIndex);
        }

        private void tb_wp1_TextChanged(object sender, EventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
                return;
            string w = lb_widgets.SelectedItem.ToString();
            try
            {
                widgets[w]["PARAM1"] = Convert.ToDouble(tb_wp1.Text, CultureInfo.InvariantCulture.NumberFormat);
            }
            catch
            {
                widgets[w]["PARAM1"] = 0.0;
            }
        }

        private void tb_wp2_TextChanged(object sender, EventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
                return;
            string w = lb_widgets.SelectedItem.ToString();

            try
            {
                widgets[w]["PARAM2"] = Convert.ToDouble(tb_wp2.Text, CultureInfo.InvariantCulture.NumberFormat);
            }
            catch
            {
                widgets[w]["PARAM2"] = 0.0;
            }
        }

        private void tb_wp3_TextChanged(object sender, EventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
                return;
            string w = lb_widgets.SelectedItem.ToString();
            try
            {
                widgets[w]["PARAM3"] = Convert.ToDouble(tb_wp3.Text, CultureInfo.InvariantCulture.NumberFormat);
            }
            catch
            {
                widgets[w]["PARAM3"] = 0.0;
            }
        }

        private void tb_wp4_TextChanged(object sender, EventArgs e)
        {
            if (lb_widgets.SelectedItems.Count == 0)
                return;
            string w = lb_widgets.SelectedItem.ToString();
            try
            {
                widgets[w]["PARAM4"] = Convert.ToDouble(tb_wp4.Text, CultureInfo.InvariantCulture.NumberFormat);
            }
            catch
            {
                widgets[w]["PARAM4"] = 0.0;
            }
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show(
                "Exit Config Editor?", "Exit",
                MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
                this.Close();
        }

        private void Form2_FormClosing(object sender, FormClosingEventArgs e)
        {
            DialogResult result = MessageBox.Show(
                "Save config?", "Exiting...",
                MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                ofd_savecfg.FileName = def_filename;
                if (ofd_savecfg.ShowDialog() != DialogResult.OK)
                    return;
                save_cfg(ofd_savecfg.FileName);
            }

            settings.Save();
        }

        private void readConfigToolStripMenuItem_Click(object sender, EventArgs e)
        {
            setup_comport();
            if (!open_comport())
                return;
            if (!reset_board(false))
                return;

            txt_log.AppendText("Port " + comPort.PortName + " opened for config read\n");

            /* dump config */
            comPort.Write("config dump\n");

            List<string> config = new List<string> { };
            string line;
            bool started = false;
            bool finished = false;
            while (!finished)
            {
                try
                {
                    line = comPort.ReadLine();
                }
                catch
                {
                    MessageBox.Show("Error waiting for config!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    txt_log.AppendText("Error waiting for config!\n");
                    comPort.Close();
                    return;
                }


                if (line.Contains("AlceOSD config"))
                {
                    started = true;
                    txt_log.AppendText(line + '\n');
                }

                if (started)
                {
                    config.Add(line);
                    if (line.StartsWith("--"))
                        finished = true;
                }
                //System.Threading.Thread.Sleep(10);
            }
            comPort.Write("x");
            comPort.Close();
            MessageBox.Show("Config successfully read", "Config", MessageBoxButtons.OK, MessageBoxIcon.Information);

            parse_config(config.ToArray());

        }

        private void writeConfigToolStripMenuItem_Click(object sender, EventArgs e)
        {
            setup_comport();
            if (!open_comport())
                return;
            if (!reset_board(false))
                return;

            txt_log.AppendText("Port " + comPort.PortName + " opened for config upload\n");

            comPort.Write("config load\n");
            System.Threading.Thread.Sleep(100);

            string[] config = dump_config();


            string line;
            while (comPort.BytesToRead > 0)
            {
                comPort.DiscardInBuffer();
                System.Threading.Thread.Sleep(20);
            }
            txt_log.AppendText("Writing config to board\n");

            int total = config.Length;
            int p, i = 0;
            pb.Value = 0;

            foreach (string value in config)
            {
                comPort.Write(value + '\n');
                System.Threading.Thread.Sleep(20);
                if (comPort.BytesToRead > 0)
                {
                    line = comPort.ReadLine();
                    txt_log.AppendText(".");
                    txt_log.AppendText(line + '\n');
                }

                p = (++i) * 100 / total;
                if (p != pb.Value)
                {
                    pb.Value = p;
                    Application.DoEvents();
                }

            }
            pb.Value = 100;
            comPort.Write(".\n");
            txt_log.AppendText("Done!\n");

            comPort.Write("config save\n");
            System.Threading.Thread.Sleep(500);
            comPort.Write("reboot\r");
            comPort.Close();
            MessageBox.Show("Config successfully uploaded, rebooting", "Config", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }


        private void do_flash(string version)
        {
            if ((version == "0.1") || (version == "0.2"))
            {
                /* ihex flasher */
                try
                {
                    using (StreamReader sr = new StreamReader(ofd_fwfile.OpenFile()))
                    {
                        string[] lines;
                        string fw = "";

                        fw = sr.ReadToEnd();
                        lines = fw.Split('\n');

                        int total = lines.Length;

                        string line = "";
                        string lineType = "";
                        char ret = ' ';
                        int p = 0, prev_p = -1;

                        pb.Value = 0;

                        for (int i = 0; i < total; i++)
                        {

                            p = ((i + 1) * 100 / total);
                            if (p != prev_p)
                            {
                                pb.Value = prev_p = p;
                                txt_log.AppendText("\n" + p.ToString() + "%\n");

                                Application.DoEvents();
                            }


                            line = lines[i];
                            if (line.Length < 9)
                                continue;

                            comPort.Write(line + "\n");

                            bool err = false;

                            if (version == "0.1")
                            {
                                System.Threading.Thread.Sleep(30);

                                lineType = line.Substring(7, 2);
                                if ((lineType == "02") || (lineType == "04"))
                                {
                                    continue;
                                }

                                int timeout = 0;
                                while (comPort.BytesToRead < 1)
                                {
                                    System.Threading.Thread.Sleep(1);
                                    if (timeout++ > 500)
                                    {
                                        MessageBox.Show("Timeout flashing firmware!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        return;
                                    }
                                }
                                //txt_log.AppendText(" ");
                                while (comPort.BytesToRead > 0)
                                {
                                    ret = (char)comPort.ReadChar();
                                    //txt_log.AppendText(ret.ToString());


                                    if ((ret == '2') || (ret == '3') || (ret == 'x'))
                                    {
                                        err = true;
                                        txt_log.AppendText(ret.ToString());
                                    }

                                    if (ret == 'e')
                                    {
                                        System.Threading.Thread.Sleep(100);
                                    }

                                }

                            }
                            else
                            {
                                bool next = false;
                                while (next == false)
                                {
                                    int timeout = 0;
                                    while (comPort.BytesToRead < 1)
                                    {
                                        System.Threading.Thread.Sleep(1);
                                        if (timeout++ > 500)
                                        {
                                            MessageBox.Show("Timeout flashing firmware!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                            return;
                                        }

                                    }

                                    ret = (char)comPort.ReadChar();
                                    //txt_log.AppendText(ret.ToString());

                                    if ((ret == '2') || (ret == '3') || (ret == 'x'))
                                    {
                                        err = true;
                                        next = true;
                                        txt_log.AppendText(ret.ToString());
                                    }
                                    if (ret == 'e')
                                    {
                                        System.Threading.Thread.Sleep(100);
                                    }
                                    else if (ret == '.')
                                    {
                                        next = true;
                                    }
                                }

                            }
                            if (err)
                            {
                                MessageBox.Show("Error flashing firmware!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                //txt_log.AppendText("\n\nError on line: " + line + "\n");
                                return;
                            }

                        }
                        txt_log.AppendText("\nDone!\n");
                    }


                }
                catch
                {
                    MessageBox.Show("Error flashing firmware!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    txt_log.AppendText("Error flashing firmware!\n");
                }
            }
            else
            {
                /* 0v3 - bin flasher */

                pages.Clear();

                string[] lines;
                using (StreamReader sr = new StreamReader(ofd_fwfile.OpenFile()))
                {
                    string fw = "";
                    fw = sr.ReadToEnd();
                    lines = fw.Split('\n');
                }

                int total = lines.Length;

                string line;
                UInt32 a, t, l, addr = 0, e_addr = 0;
                Byte crc, ccrc;

                string data;

                txt_log.AppendText("Parsing ihex...\n");

                pb.Value = 0;

                for (int i = 0; i < total; i++)
                {
                    line = lines[i].Trim();
                    if (!line.StartsWith(":"))
                        continue;

                    l = Convert.ToUInt32(line.Substring(1, 2), 16);
                    a = Convert.ToUInt32(line.Substring(3, 4), 16);
                    t = Convert.ToUInt32(line.Substring(7, 2), 16);

                    data = line.Substring(9, (int)l * 2);

                    crc = Convert.ToByte(line.Substring(line.Length - 2, 2), 16);

                    ccrc = 0;
                    for (int j = 0; j < 5 + l; j++)
                        ccrc += Convert.ToByte(line.Substring(1 + 2 * j, 2), 16);

                    if (ccrc != 0)
                    {
                        txt_log.AppendText("CRC failed at line " + i + "\nAborting...\n");
                        return;
                    }

                    if (t == 0)
                    {
                        addr = (a + e_addr) >> 1;

                        for (int k = 0; k < (data.Length / 2) / 4; k++)
                        {
                            string word = data.Substring(k * 8, 8);
                            UInt32 value;

                            value = Convert.ToUInt32(word.Substring(4, 2), 16) << 16;
                            value |= Convert.ToUInt32(word.Substring(2, 2), 16) << 8;
                            value |= Convert.ToUInt32(word.Substring(0, 2), 16);
                            write_mem(addr + (uint)k * 2, value);
                        }


                    }
                    else if (t == 1)
                    {
                        txt_log.AppendText("Finished parsing ihex file.\n");
                        break;
                    }
                    else if (t == 2)
                    {
                        e_addr = Convert.ToUInt32(data, 16) << 8;
                    }
                    else if (t == 4)
                    {
                        e_addr = Convert.ToUInt32(data, 16) << 16;
                    }
                    else
                    {
                        txt_log.AppendText("Unknown ihex record '" + t + "'. Skipping...\n");
                    }

                }

                total = pages.Keys.Count();

                txt_log.AppendText("total_pages: " + total.ToString() + "\n");

                txt_log.AppendText("Flashing...\n");

                int c;
                byte[] iword = new byte[3];

                int p = 0, prev_p = -1;

                int ii = 0;

                foreach (KeyValuePair<UInt32, UInt32[]> entry in pages.OrderBy(entry => entry.Key))
                {
                    txt_log.AppendText("Writing page address 0x" + entry.Key.ToString("X6") + " :: ");


                    // send page address
                    iword[2] = (byte)((entry.Key));
                    iword[1] = (byte)((entry.Key) >> 8);
                    iword[0] = (byte)((entry.Key) >> 16);

                    comPort.Write(iword, 0, 3);


                    c = comPort.ReadChar(); /* returns (p)age / (e)nd*/
                    txt_log.AppendText("p=" + Convert.ToChar(c));

                    /* send page data */
                    c = comPort.ReadChar(); /* receive (s)kip / (d)ata */
                    txt_log.AppendText(" d/s=" + Convert.ToChar(c));

                    if (Convert.ToChar(c) == 's')
                    {
                        txt_log.AppendText(" protected memory, skipping...\n");
                        continue;
                    }

                    UInt16 pcrc = 0;
                    for (int k = 0; k < 0x400; k++)
                    {
                        iword[0] = (byte)((entry.Value[k]) >> 16);
                        iword[1] = (byte)((entry.Value[k]) >> 8);
                        iword[2] = (byte)((entry.Value[k]));
                        pcrc += iword[2];
                        pcrc += iword[1];
                        pcrc += iword[0];
                        comPort.Write(iword, 0, 3);
                    }

                    /* send CRC */
                    c = comPort.ReadChar(); /* request (c)rc */
                    txt_log.AppendText(" c=" + Convert.ToChar(c));

                    iword[0] = (byte)((pcrc) >> 8);
                    iword[1] = (byte)((pcrc));
                    comPort.Write(iword, 0, 2);

                    c = comPort.ReadChar();
                    txt_log.AppendText(" e=" + Convert.ToChar(c));

                    if (Convert.ToChar(c) == 'x')
                    {
                        txt_log.AppendText(" CRC ERROR!\n");
                        break;
                    }

                    c = comPort.ReadChar();
                    txt_log.AppendText(" w=" + Convert.ToChar(c));

                    txt_log.AppendText("\n");

                    ii++;

                    p = (ii) * 100 / total;
                    if (p != prev_p)
                    {
                        pb.Value = prev_p = p;
                        Application.DoEvents();
                    }

                }
                pb.Value = 100;
                /* end */
                iword[0] = 0xff;
                iword[1] = 0xff;
                iword[2] = 0xff;
                comPort.Write(iword, 0, 3);

                txt_log.AppendText("END!\n");
            }
        }

        private void downloadFirmwareToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("https://github.com/ArduPilot/alceosd/releases");
        }


        private void recalculate_pb_osd_size()
        {
            switch (cb_xsize.SelectedIndex)
            {
                case 0:
                default:
                    xsize = 480;
                    break;
                case 1:
                    xsize = 480;
                    break;
                case 2:
                    xsize = 560;
                    break;
                case 3:
                    xsize = 672;
                    break;
            }
            ysize = (int) nud_ysize.Value;

            if (cb_vidstd.Text.Contains("nterlaced"))
                ysize *= 2;

            Size s = new Size();
            s.Height = ysize + 10;
            s.Width = xsize + 10;
            pb_osd.Size = s;
        }


        private void AlceOSDconfigForm_Load(object sender, EventArgs e)
        {
            settings = new UserSettings();
            cb_comport.Text = settings.ComPort;

            cb_vswch.Items.Clear();
            cb_tabch.Items.Clear();
            for (int i = 1; i < 18; i++)
            {
                cb_vswch.Items.Add("RC" + i.ToString());
                cb_tabch.Items.Add("RC" + i.ToString());
            }


            recalculate_pb_osd_size();


        }

        private void cb_comport_SelectedIndexChanged(object sender, EventArgs e)
        {
            settings.ComPort = cb_comport.Text;
            settings.Save();
        }




        private void get_widget_ids()
        {
            widget_ids.Clear();

            comPort.Write("widgets available\n");
            System.Threading.Thread.Sleep(100);

            string ans = "";
            do {
                ans += comPort.ReadExisting();
            } while (!ans.EndsWith("> "));

            string[] lines = ans.Split('\n');

            bool s = false;
            foreach (string value in lines)
            {
                if (value.Contains("---------"))
                {
                    s = true;
                    continue;
                }

                if (s)
                {
                    string[] l = value.Split('|');

                    if (l.Length < 5)
                        continue;

                    txt_log.AppendText(l[0] + "," + l[2] + "\n");
                    widget_ids.Add(l[2].Trim(), Convert.ToInt16(l[0]));


                }


            }
        }


        private void get_config()
        {
            comPort.Write("config dump\n");

            List<string> config = new List<string> { };
            string line;
            bool started = false;
            bool finished = false;
            while (!finished)
            {
                line = comPort.ReadLine();
                if (line.Contains("AlceOSD config"))
                {
                    started = true;
                    txt_log.AppendText(line + '\n');
                }
                if (started)
                {
                    config.Add(line);
                    if (line.StartsWith("--"))
                        finished = true;
                }
            }
            parse_config(config.ToArray());
        }


        bool shell_active = false;

        int his_idx = 0;
        List<string> cmd_history = new List<string> { };

        private void bt_conn_Click(object sender, EventArgs e)
        {
            if (shell_active)
            {
                timer_com.Enabled = false;
                comPort.Close();
                shell_active = false;
                bt_conn.Text = "Connect";

                his_idx = 0;
                lb_history.Items.Clear();

            }
            else
            {
                setup_comport();
                if (!open_comport())
                    return;
                if (!reset_board(false))
                    return;

                comPort.Write("\n");
                System.Threading.Thread.Sleep(100);
                comPort.DiscardInBuffer();


                get_config();

                get_widget_ids();

                



                shell_active = true;
                timer_com.Enabled = true;
                comPort.Write("version\n");
                bt_conn.Text = "Disconnect";
            }





        }

        private void timer_com_Tick(object sender, EventArgs e)
        {
            if (!shell_active)
                timer_com.Enabled = false;

            if (comPort.BytesToRead < 1)
                return;

            string ans = comPort.ReadExisting();
            foreach (char c in ans)
            {
                if (c == '\n')
                    txt_shell.AppendText("\r");
                txt_shell.AppendText(c.ToString());
            }


            
        }

        private void tb_cmdLine_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == '\t')
            {
                //e.Handled = true;
            }
        }

        private void tb_cmdLine_KeyDown(object sender, KeyEventArgs e)
        {
            if ((e.KeyCode == Keys.Tab) || (e.KeyCode == Keys.Enter))
            {
                e.SuppressKeyPress = true;
            }

            if (!comPort.IsOpen)
                return;

            if (!shell_active)
                return;

            string cmd = tb_cmdLine.Text.Trim('\n').Trim('\r');

            switch (e.KeyCode)
            {
                case Keys.Enter:
                    bool add2hist = true;
                    if (cmd == "")
                        add2hist = false;

                    if ((cmd_history.Count > 0) && (cmd == cmd_history.ElementAt(cmd_history.Count - 1)))
                        add2hist = false;

                    if (add2hist)
                    {
                        cmd_history.Add(cmd);
                        lb_history.Items.Add(cmd);
                    }

                    comPort.Write(cmd + "\n");
                    tb_cmdLine.Clear();
                    e.Handled = true;
                    his_idx = 0;
                    break;

                case Keys.Up:
                    if (cmd_history.Count == 0)
                        break;
                    his_idx++;
                    if (his_idx > cmd_history.Count)
                        his_idx = cmd_history.Count;
                    tb_cmdLine.Text = cmd_history.ElementAt(cmd_history.Count - his_idx);
                    tb_cmdLine.SelectionStart = tb_cmdLine.Text.Length;
                    break;

                case Keys.Down:
                    his_idx--;
                    if (his_idx <= 0)
                    {
                        tb_cmdLine.Text = "";
                        his_idx = 0;
                    }
                    else
                    {
                        tb_cmdLine.Text = cmd_history.ElementAt(cmd_history.Count - his_idx);
                    }
                    break;

                case Keys.Tab:
                    comPort.Write(tb_cmdLine.Text + "\t");
                    break;

                default:
                    break;
            }


        }






        private Canvas get_widget_bitmap(string id)
        {
            Canvas c = new Canvas();
            String line;
            c.width = 0; c.height = 0;

            timer_com.Enabled = false;
            comPort.Write("widgets bitmap "+id+"\n");
            System.Threading.Thread.Sleep(100);

            do
            {
                Match m;
                line = comPort.ReadLine();

                m = Regex.Match(line, @"^w:(\d+)");
                if (m.Success)
                {
                    c.width = Convert.ToInt16(m.Groups[1].Value);
                    continue;
                }

                m = Regex.Match(line, @"^h:(\d+)");
                if (m.Success)
                {
                    c.height = Convert.ToInt16(m.Groups[1].Value);
                }

            } while (!line.StartsWith("h:"));

            int size = c.width * c.height;
            if (size > 0)
            {
                int left = size;
                List<byte> recievedData = new List<byte>();
                do
                {
                    int avail = comPort.BytesToRead;
                    int n = (avail > left) ? left : avail;
                    byte[] data = new byte[n];
                    comPort.Read(data, 0, data.Length);
                    data.ToList().ForEach(b => recievedData.Add(b));
                    left -= n;
                } while (left > 0);

                c.bitmap = recievedData.ToArray();
            }

            System.Threading.Thread.Sleep(100);
            comPort.DiscardInBuffer();

            timer_com.Enabled = true;
            return c;
        }



        private void pb_osd_Paint(object sender, PaintEventArgs e)
        {
            IntPtr hdc = e.Graphics.GetHdc();
            int x, y, b, v, d;
            uint bgr;

            foreach(KeyValuePair<string, Canvas> _c in ca)
            {
                Canvas c = _c.Value;
                txt_log.AppendText("canvas w" + c.width + "\n");
                for (y = 0; y < c.height; y++)
                {
                    for (x = 0; x < c.width; x++)
                    {
                        if (y * c.width + x < c.bitmap.Length)
                        {
                            v = c.bitmap[y * c.width + x];
                            for (b = 0; b < 4; b++)
                            {

                                d = (v >> (6 - (2 * b))) & 3;
                                bgr = 0;
                                switch (d)
                                {
                                    case 1:
                                        bgr = 0xffffff;
                                        break;
                                    case 2:
                                        bgr = 0x808080;
                                        break;
                                    case 3:
                                        bgr = 0x000000;
                                        break;
                                    default:
                                        break;
                                }
                                if (d > 0)
                                    GDI.SetPixel(hdc, c.x0 + x * 4 + b, c.y0 + y, bgr);

                            }
                        }
                    }
                }
            }

            e.Graphics.ReleaseHdc(hdc);

            if (ca.ContainsKey(selected_widget))
            {
                Canvas c = ca[selected_widget];
                Rectangle ee = new Rectangle(c.x0, c.y0, c.width * 4, c.height);
                using (Pen pen = new Pen(Color.Red, 2)) { e.Graphics.DrawRectangle(pen, ee); }
            }

        }


        private void set_widget_position(Canvas c)
        {

        }


        private Canvas get_widget_canvas(String name, Dictionary<string, double> cfg)
        {
            string wname = name.Substring(0, name.Length - 1);

            int id = -1;
            if (widget_ids.ContainsKey(wname))
            {
                id = widget_ids[wname];
            }

            int uid = name.ElementAt(name.Length - 1) - '0';
            txt_log.AppendText("uid=" + uid + "\n");
            txt_log.AppendText("id=" + id + "\n");

            string req = id.ToString() + "+" + uid.ToString();

            int hjust = (int)cfg["HJUST"];
            int vjust = (int)cfg["VJUST"];
            int x = (int)cfg["X"];
            int y = (int)cfg["Y"];

            //txt_log.AppendText("hj" + hjust + "vj" + vjust + "x" + x + "y" + y + "\n");

            int xsize;
            switch (cb_xsize.SelectedIndex)
            {
                case 0:
                default:
                    xsize = 480;
                    break;
                case 1:
                    xsize = 480;
                    break;
                case 2:
                    xsize = 560;
                    break;
                case 3:
                    xsize = 672;
                    break;
            }

            int ysize = (int)nud_ysize.Value;

            Canvas c = get_widget_bitmap(req);
            if (c.width > 0)
            {
                switch (hjust)
                {
                    case 0:
                    default:
                        c.x0 = x;
                        break;
                    case 1:
                        c.x0 = xsize + x - c.width * 4;
                        break;
                    case 2:
                        c.x0 = xsize / 2 + x - (c.width * 4) / 2;
                        break;
                }
                switch (vjust)
                {
                    case 0:
                    default:
                        c.y0 = y;
                        break;
                    case 1:
                        c.y0 = ysize + y - c.height;
                        break;
                    case 2:
                        c.y0 = ysize / 2 + y - c.height / 2;
                        break;
                }
            }

            return c;
        }


        private void button1_Click(object sender, EventArgs e)
        {
            Graphics g = pb_osd.CreateGraphics();


            int xsize;
            switch (cb_xsize.SelectedIndex)
            {
                case 0:
                default:
                    xsize = 480;
                    break;
                case 1:
                    xsize = 480;
                    break;
                case 2:
                    xsize = 560;
                    break;
                case 3:
                    xsize = 672;
                    break;
            }
            int ysize = (int)nud_ysize.Value;
            Size s = new Size();
            s.Height = ysize + 10;
            s.Width = xsize + 10;
            pb_osd.Size = s;


            ca.Clear();
            foreach (KeyValuePair<string, Dictionary<string, double>> pair in widgets)
            {
                if (pair.Value["TAB"] != (double)nud_seltab.Value)
                    continue;

                Canvas c = get_widget_canvas(pair.Key, pair.Value);
                if (c.width > 0)
                    ca[pair.Key] = c;

            }


            //g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.None;
            //g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.NearestNeighbor;
            //g.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.None;
            pb_osd.Invalidate();
        }

        Point _startPt = new Point();
        bool _tracking = false;
        decimal nud_x0, nud_y0;

        private void pb_osd_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Left)
            {
                _startPt = e.Location;
                if (ca.ContainsKey(selected_widget))
                {
                    Canvas c = ca[selected_widget];
                    if ( (_startPt.X >= c.x0) && (_startPt.X <= (c.x0 + c.width*4)) &&
                         (_startPt.Y >= c.y0) && (_startPt.Y <= (c.y0 + c.height)))
                    {
                        _tracking = true;
                    }
                }

                if (! _tracking)
                {
                    foreach(KeyValuePair<String,Canvas> pair in ca)
                    {
                        Canvas c = pair.Value;
                        if ((_startPt.X >= c.x0) && (_startPt.X <= (c.x0 + c.width * 4)) &&
                            (_startPt.Y >= c.y0) && (_startPt.Y <= (c.y0 + c.height)))
                        {
                            selected_widget = pair.Key;
                            lb_widgets.SelectedItem = selected_widget;
                            _tracking = true;
                            pb_osd.Invalidate();
                            break;
                        }
                    }
                }

                if (_tracking)
                {
                    nud_x0 = nud_wxpos.Value;
                    nud_y0 = nud_wypos.Value;
                }


            }
        }

        private void pb_osd_MouseMove(object sender, MouseEventArgs e)
        {
            if (_tracking)
            {

                int dx = (e.X - _startPt.X);
                int dy = (e.Y - _startPt.Y);

                nud_wxpos.Value = (int) (nud_x0 + dx) & ~3;
                nud_wypos.Value = nud_y0 + dy;

            }

        }

        private void pb_osd_MouseUp(object sender, MouseEventArgs e)
        {
            if (_tracking)
            {
                _tracking = false;
                //submit_widget_config(selected_widget);
            }
        }

        private void timer_submit_Tick(object sender, EventArgs e)
        {
            submit_widget_config(selected_widget);
            timer_submit.Stop();
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            Console.WriteLine("selected={0} widgets={1}", tabControl1.SelectedIndex, tabControl1.TabPages.IndexOfKey("tabWidgets"));
            if (tabControl1.SelectedIndex == tabControl1.TabPages.IndexOfKey("tabWidgets"))
                recalculate_pb_osd_size();
        }

    }
}
