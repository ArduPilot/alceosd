

/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;
using System.Collections;
using System.Collections.Generic;
    
namespace MavLink
{
    public static class MavlinkSettings
    {
		public const string WireProtocolVersion = "1.0";
		public const byte ProtocolMarker = 0xfe;
		public const bool CrcExtra = true;
		public const bool IsLittleEndian = true;
    }
    
    public delegate MavlinkMessage MavlinkPacketDeserializeFunc(byte[] bytes, int offset);

    //returns the message ID, offset is advanced by the number of bytes used to serialize
    public delegate int MavlinkPacketSerializeFunc(byte[] bytes, ref int offset, object mavlinkPacket);
 
    public class MavPacketInfo
    {
        public MavlinkPacketDeserializeFunc Deserializer;
        public int [] OrderMap;
        public byte CrcExtra;

         public MavPacketInfo(MavlinkPacketDeserializeFunc deserializer, byte crcExtra)
         {
             this.Deserializer = deserializer;
             this.CrcExtra = crcExtra;
         }
    }
 
    public static class MavLinkSerializer
    {
        public static void SetDataIsLittleEndian(bool isLittle)
        {
            bitconverter.SetDataIsLittleEndian(isLittle);
        }
    
        private static readonly FrameworkBitConverter bitconverter = new FrameworkBitConverter(); 
    
        public static Dictionary<int, MavPacketInfo> Lookup = new Dictionary<int, MavPacketInfo>
        {
			{150, new MavPacketInfo(Deserialize_SENSOR_OFFSETS, 134)},
			{151, new MavPacketInfo(Deserialize_SET_MAG_OFFSETS, 219)},
			{152, new MavPacketInfo(Deserialize_MEMINFO, 208)},
			{153, new MavPacketInfo(Deserialize_AP_ADC, 188)},
			{154, new MavPacketInfo(Deserialize_DIGICAM_CONFIGURE, 84)},
			{155, new MavPacketInfo(Deserialize_DIGICAM_CONTROL, 22)},
			{156, new MavPacketInfo(Deserialize_MOUNT_CONFIGURE, 19)},
			{157, new MavPacketInfo(Deserialize_MOUNT_CONTROL, 21)},
			{158, new MavPacketInfo(Deserialize_MOUNT_STATUS, 134)},
			{160, new MavPacketInfo(Deserialize_FENCE_POINT, 78)},
			{161, new MavPacketInfo(Deserialize_FENCE_FETCH_POINT, 68)},
			{162, new MavPacketInfo(Deserialize_FENCE_STATUS, 189)},
			{163, new MavPacketInfo(Deserialize_AHRS, 127)},
			{164, new MavPacketInfo(Deserialize_SIMSTATE, 154)},
			{165, new MavPacketInfo(Deserialize_HWSTATUS, 21)},
			{166, new MavPacketInfo(Deserialize_RADIO, 21)},
			{167, new MavPacketInfo(Deserialize_LIMITS_STATUS, 144)},
			{168, new MavPacketInfo(Deserialize_WIND, 1)},
			{169, new MavPacketInfo(Deserialize_DATA16, 234)},
			{170, new MavPacketInfo(Deserialize_DATA32, 73)},
			{171, new MavPacketInfo(Deserialize_DATA64, 181)},
			{172, new MavPacketInfo(Deserialize_DATA96, 22)},
			{173, new MavPacketInfo(Deserialize_RANGEFINDER, 83)},
			{174, new MavPacketInfo(Deserialize_AIRSPEED_AUTOCAL, 167)},
			{175, new MavPacketInfo(Deserialize_RALLY_POINT, 138)},
			{176, new MavPacketInfo(Deserialize_RALLY_FETCH_POINT, 234)},
			{177, new MavPacketInfo(Deserialize_COMPASSMOT_STATUS, 240)},
			{178, new MavPacketInfo(Deserialize_AHRS2, 47)},
			{179, new MavPacketInfo(Deserialize_CAMERA_STATUS, 189)},
			{180, new MavPacketInfo(Deserialize_CAMERA_FEEDBACK, 52)},
			{181, new MavPacketInfo(Deserialize_BATTERY2, 174)},
			{182, new MavPacketInfo(Deserialize_AHRS3, 229)},
			{183, new MavPacketInfo(Deserialize_AUTOPILOT_VERSION_REQUEST, 85)},
			{184, new MavPacketInfo(Deserialize_REMOTE_LOG_DATA_BLOCK, 159)},
			{185, new MavPacketInfo(Deserialize_REMOTE_LOG_BLOCK_STATUS, 186)},
			{186, new MavPacketInfo(Deserialize_LED_CONTROL, 72)},
			{191, new MavPacketInfo(Deserialize_MAG_CAL_PROGRESS, 92)},
			{192, new MavPacketInfo(Deserialize_MAG_CAL_REPORT, 36)},
			{193, new MavPacketInfo(Deserialize_EKF_STATUS_REPORT, 71)},
			{194, new MavPacketInfo(Deserialize_PID_TUNING, 98)},
			{200, new MavPacketInfo(Deserialize_GIMBAL_REPORT, 134)},
			{201, new MavPacketInfo(Deserialize_GIMBAL_CONTROL, 205)},
			{214, new MavPacketInfo(Deserialize_GIMBAL_TORQUE_CMD_REPORT, 69)},
			{215, new MavPacketInfo(Deserialize_GOPRO_HEARTBEAT, 101)},
			{216, new MavPacketInfo(Deserialize_GOPRO_GET_REQUEST, 50)},
			{217, new MavPacketInfo(Deserialize_GOPRO_GET_RESPONSE, 202)},
			{218, new MavPacketInfo(Deserialize_GOPRO_SET_REQUEST, 17)},
			{219, new MavPacketInfo(Deserialize_GOPRO_SET_RESPONSE, 162)},
			{226, new MavPacketInfo(Deserialize_RPM, 207)},
			{0, new MavPacketInfo(Deserialize_HEARTBEAT, 50)},
			{1, new MavPacketInfo(Deserialize_SYS_STATUS, 124)},
			{2, new MavPacketInfo(Deserialize_SYSTEM_TIME, 137)},
			{4, new MavPacketInfo(Deserialize_PING, 237)},
			{5, new MavPacketInfo(Deserialize_CHANGE_OPERATOR_CONTROL, 217)},
			{6, new MavPacketInfo(Deserialize_CHANGE_OPERATOR_CONTROL_ACK, 104)},
			{7, new MavPacketInfo(Deserialize_AUTH_KEY, 119)},
			{11, new MavPacketInfo(Deserialize_SET_MODE, 89)},
			{20, new MavPacketInfo(Deserialize_PARAM_REQUEST_READ, 214)},
			{21, new MavPacketInfo(Deserialize_PARAM_REQUEST_LIST, 159)},
			{22, new MavPacketInfo(Deserialize_PARAM_VALUE, 220)},
			{23, new MavPacketInfo(Deserialize_PARAM_SET, 168)},
			{24, new MavPacketInfo(Deserialize_GPS_RAW_INT, 24)},
			{25, new MavPacketInfo(Deserialize_GPS_STATUS, 23)},
			{26, new MavPacketInfo(Deserialize_SCALED_IMU, 170)},
			{27, new MavPacketInfo(Deserialize_RAW_IMU, 144)},
			{28, new MavPacketInfo(Deserialize_RAW_PRESSURE, 67)},
			{29, new MavPacketInfo(Deserialize_SCALED_PRESSURE, 115)},
			{30, new MavPacketInfo(Deserialize_ATTITUDE, 39)},
			{31, new MavPacketInfo(Deserialize_ATTITUDE_QUATERNION, 246)},
			{32, new MavPacketInfo(Deserialize_LOCAL_POSITION_NED, 185)},
			{33, new MavPacketInfo(Deserialize_GLOBAL_POSITION_INT, 104)},
			{34, new MavPacketInfo(Deserialize_RC_CHANNELS_SCALED, 237)},
			{35, new MavPacketInfo(Deserialize_RC_CHANNELS_RAW, 244)},
			{36, new MavPacketInfo(Deserialize_SERVO_OUTPUT_RAW, 222)},
			{37, new MavPacketInfo(Deserialize_MISSION_REQUEST_PARTIAL_LIST, 212)},
			{38, new MavPacketInfo(Deserialize_MISSION_WRITE_PARTIAL_LIST, 9)},
			{39, new MavPacketInfo(Deserialize_MISSION_ITEM, 254)},
			{40, new MavPacketInfo(Deserialize_MISSION_REQUEST, 230)},
			{41, new MavPacketInfo(Deserialize_MISSION_SET_CURRENT, 28)},
			{42, new MavPacketInfo(Deserialize_MISSION_CURRENT, 28)},
			{43, new MavPacketInfo(Deserialize_MISSION_REQUEST_LIST, 132)},
			{44, new MavPacketInfo(Deserialize_MISSION_COUNT, 221)},
			{45, new MavPacketInfo(Deserialize_MISSION_CLEAR_ALL, 232)},
			{46, new MavPacketInfo(Deserialize_MISSION_ITEM_REACHED, 11)},
			{47, new MavPacketInfo(Deserialize_MISSION_ACK, 153)},
			{48, new MavPacketInfo(Deserialize_SET_GPS_GLOBAL_ORIGIN, 41)},
			{49, new MavPacketInfo(Deserialize_GPS_GLOBAL_ORIGIN, 39)},
			{50, new MavPacketInfo(Deserialize_PARAM_MAP_RC, 78)},
			{51, new MavPacketInfo(Deserialize_MISSION_REQUEST_INT, 196)},
			{54, new MavPacketInfo(Deserialize_SAFETY_SET_ALLOWED_AREA, 15)},
			{55, new MavPacketInfo(Deserialize_SAFETY_ALLOWED_AREA, 3)},
			{61, new MavPacketInfo(Deserialize_ATTITUDE_QUATERNION_COV, 167)},
			{62, new MavPacketInfo(Deserialize_NAV_CONTROLLER_OUTPUT, 183)},
			{63, new MavPacketInfo(Deserialize_GLOBAL_POSITION_INT_COV, 119)},
			{64, new MavPacketInfo(Deserialize_LOCAL_POSITION_NED_COV, 191)},
			{65, new MavPacketInfo(Deserialize_RC_CHANNELS, 118)},
			{66, new MavPacketInfo(Deserialize_REQUEST_DATA_STREAM, 148)},
			{67, new MavPacketInfo(Deserialize_DATA_STREAM, 21)},
			{69, new MavPacketInfo(Deserialize_MANUAL_CONTROL, 243)},
			{70, new MavPacketInfo(Deserialize_RC_CHANNELS_OVERRIDE, 124)},
			{73, new MavPacketInfo(Deserialize_MISSION_ITEM_INT, 38)},
			{74, new MavPacketInfo(Deserialize_VFR_HUD, 20)},
			{75, new MavPacketInfo(Deserialize_COMMAND_INT, 158)},
			{76, new MavPacketInfo(Deserialize_COMMAND_LONG, 152)},
			{77, new MavPacketInfo(Deserialize_COMMAND_ACK, 143)},
			{81, new MavPacketInfo(Deserialize_MANUAL_SETPOINT, 106)},
			{82, new MavPacketInfo(Deserialize_SET_ATTITUDE_TARGET, 49)},
			{83, new MavPacketInfo(Deserialize_ATTITUDE_TARGET, 22)},
			{84, new MavPacketInfo(Deserialize_SET_POSITION_TARGET_LOCAL_NED, 143)},
			{85, new MavPacketInfo(Deserialize_POSITION_TARGET_LOCAL_NED, 140)},
			{86, new MavPacketInfo(Deserialize_SET_POSITION_TARGET_GLOBAL_INT, 5)},
			{87, new MavPacketInfo(Deserialize_POSITION_TARGET_GLOBAL_INT, 150)},
			{89, new MavPacketInfo(Deserialize_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET, 231)},
			{90, new MavPacketInfo(Deserialize_HIL_STATE, 183)},
			{91, new MavPacketInfo(Deserialize_HIL_CONTROLS, 63)},
			{92, new MavPacketInfo(Deserialize_HIL_RC_INPUTS_RAW, 54)},
			{93, new MavPacketInfo(Deserialize_HIL_ACTUATOR_CONTROLS, 47)},
			{100, new MavPacketInfo(Deserialize_OPTICAL_FLOW, 175)},
			{101, new MavPacketInfo(Deserialize_GLOBAL_VISION_POSITION_ESTIMATE, 102)},
			{102, new MavPacketInfo(Deserialize_VISION_POSITION_ESTIMATE, 158)},
			{103, new MavPacketInfo(Deserialize_VISION_SPEED_ESTIMATE, 208)},
			{104, new MavPacketInfo(Deserialize_VICON_POSITION_ESTIMATE, 56)},
			{105, new MavPacketInfo(Deserialize_HIGHRES_IMU, 93)},
			{106, new MavPacketInfo(Deserialize_OPTICAL_FLOW_RAD, 138)},
			{107, new MavPacketInfo(Deserialize_HIL_SENSOR, 108)},
			{108, new MavPacketInfo(Deserialize_SIM_STATE, 32)},
			{109, new MavPacketInfo(Deserialize_RADIO_STATUS, 185)},
			{110, new MavPacketInfo(Deserialize_FILE_TRANSFER_PROTOCOL, 84)},
			{111, new MavPacketInfo(Deserialize_TIMESYNC, 34)},
			{112, new MavPacketInfo(Deserialize_CAMERA_TRIGGER, 174)},
			{113, new MavPacketInfo(Deserialize_HIL_GPS, 124)},
			{114, new MavPacketInfo(Deserialize_HIL_OPTICAL_FLOW, 237)},
			{115, new MavPacketInfo(Deserialize_HIL_STATE_QUATERNION, 4)},
			{116, new MavPacketInfo(Deserialize_SCALED_IMU2, 76)},
			{117, new MavPacketInfo(Deserialize_LOG_REQUEST_LIST, 128)},
			{118, new MavPacketInfo(Deserialize_LOG_ENTRY, 56)},
			{119, new MavPacketInfo(Deserialize_LOG_REQUEST_DATA, 116)},
			{120, new MavPacketInfo(Deserialize_LOG_DATA, 134)},
			{121, new MavPacketInfo(Deserialize_LOG_ERASE, 237)},
			{122, new MavPacketInfo(Deserialize_LOG_REQUEST_END, 203)},
			{123, new MavPacketInfo(Deserialize_GPS_INJECT_DATA, 250)},
			{124, new MavPacketInfo(Deserialize_GPS2_RAW, 87)},
			{125, new MavPacketInfo(Deserialize_POWER_STATUS, 203)},
			{126, new MavPacketInfo(Deserialize_SERIAL_CONTROL, 220)},
			{127, new MavPacketInfo(Deserialize_GPS_RTK, 25)},
			{128, new MavPacketInfo(Deserialize_GPS2_RTK, 226)},
			{129, new MavPacketInfo(Deserialize_SCALED_IMU3, 46)},
			{130, new MavPacketInfo(Deserialize_DATA_TRANSMISSION_HANDSHAKE, 29)},
			{131, new MavPacketInfo(Deserialize_ENCAPSULATED_DATA, 223)},
			{132, new MavPacketInfo(Deserialize_DISTANCE_SENSOR, 85)},
			{133, new MavPacketInfo(Deserialize_TERRAIN_REQUEST, 6)},
			{134, new MavPacketInfo(Deserialize_TERRAIN_DATA, 229)},
			{135, new MavPacketInfo(Deserialize_TERRAIN_CHECK, 203)},
			{136, new MavPacketInfo(Deserialize_TERRAIN_REPORT, 1)},
			{137, new MavPacketInfo(Deserialize_SCALED_PRESSURE2, 195)},
			{138, new MavPacketInfo(Deserialize_ATT_POS_MOCAP, 109)},
			{139, new MavPacketInfo(Deserialize_SET_ACTUATOR_CONTROL_TARGET, 168)},
			{140, new MavPacketInfo(Deserialize_ACTUATOR_CONTROL_TARGET, 181)},
			{141, new MavPacketInfo(Deserialize_ALTITUDE, 47)},
			{142, new MavPacketInfo(Deserialize_RESOURCE_REQUEST, 72)},
			{143, new MavPacketInfo(Deserialize_SCALED_PRESSURE3, 131)},
			{144, new MavPacketInfo(Deserialize_FOLLOW_TARGET, 127)},
			{146, new MavPacketInfo(Deserialize_CONTROL_SYSTEM_STATE, 103)},
			{147, new MavPacketInfo(Deserialize_BATTERY_STATUS, 154)},
			{148, new MavPacketInfo(Deserialize_AUTOPILOT_VERSION, 178)},
			{149, new MavPacketInfo(Deserialize_LANDING_TARGET, 200)},
			{230, new MavPacketInfo(Deserialize_ESTIMATOR_STATUS, 163)},
			{231, new MavPacketInfo(Deserialize_WIND_COV, 105)},
			{232, new MavPacketInfo(Deserialize_GPS_INPUT, 151)},
			{233, new MavPacketInfo(Deserialize_GPS_RTCM_DATA, 35)},
			{234, new MavPacketInfo(Deserialize_HIGH_LATENCY, 150)},
			{241, new MavPacketInfo(Deserialize_VIBRATION, 90)},
			{242, new MavPacketInfo(Deserialize_HOME_POSITION, 104)},
			{243, new MavPacketInfo(Deserialize_SET_HOME_POSITION, 85)},
			{244, new MavPacketInfo(Deserialize_MESSAGE_INTERVAL, 95)},
			{245, new MavPacketInfo(Deserialize_EXTENDED_SYS_STATE, 130)},
			{246, new MavPacketInfo(Deserialize_ADSB_VEHICLE, 184)},
			{247, new MavPacketInfo(Deserialize_COLLISION, 81)},
			{248, new MavPacketInfo(Deserialize_V2_EXTENSION, 8)},
			{249, new MavPacketInfo(Deserialize_MEMORY_VECT, 204)},
			{250, new MavPacketInfo(Deserialize_DEBUG_VECT, 49)},
			{251, new MavPacketInfo(Deserialize_NAMED_VALUE_FLOAT, 170)},
			{252, new MavPacketInfo(Deserialize_NAMED_VALUE_INT, 44)},
			{253, new MavPacketInfo(Deserialize_STATUSTEXT, 83)},
			{254, new MavPacketInfo(Deserialize_DEBUG, 46)},
		};

		internal static MavlinkMessage Deserialize_SENSOR_OFFSETS(byte[] bytes, int offset)
		{
			return new Msg_sensor_offsets
			{
				mag_declination = bitconverter.ToSingle(bytes, offset + 0),
				raw_press = bitconverter.ToInt32(bytes, offset + 4),
				raw_temp = bitconverter.ToInt32(bytes, offset + 8),
				gyro_cal_x = bitconverter.ToSingle(bytes, offset + 12),
				gyro_cal_y = bitconverter.ToSingle(bytes, offset + 16),
				gyro_cal_z = bitconverter.ToSingle(bytes, offset + 20),
				accel_cal_x = bitconverter.ToSingle(bytes, offset + 24),
				accel_cal_y = bitconverter.ToSingle(bytes, offset + 28),
				accel_cal_z = bitconverter.ToSingle(bytes, offset + 32),
				mag_ofs_x = bitconverter.ToInt16(bytes, offset + 36),
				mag_ofs_y = bitconverter.ToInt16(bytes, offset + 38),
				mag_ofs_z = bitconverter.ToInt16(bytes, offset + 40),
			};
		}

		internal static MavlinkMessage Deserialize_SET_MAG_OFFSETS(byte[] bytes, int offset)
		{
			return new Msg_set_mag_offsets
			{
				mag_ofs_x = bitconverter.ToInt16(bytes, offset + 0),
				mag_ofs_y = bitconverter.ToInt16(bytes, offset + 2),
				mag_ofs_z = bitconverter.ToInt16(bytes, offset + 4),
				target_system = bytes[offset + 6],
				target_component = bytes[offset + 7],
			};
		}

		internal static MavlinkMessage Deserialize_MEMINFO(byte[] bytes, int offset)
		{
			return new Msg_meminfo
			{
				brkval = bitconverter.ToUInt16(bytes, offset + 0),
				freemem = bitconverter.ToUInt16(bytes, offset + 2),
			};
		}

		internal static MavlinkMessage Deserialize_AP_ADC(byte[] bytes, int offset)
		{
			return new Msg_ap_adc
			{
				adc1 = bitconverter.ToUInt16(bytes, offset + 0),
				adc2 = bitconverter.ToUInt16(bytes, offset + 2),
				adc3 = bitconverter.ToUInt16(bytes, offset + 4),
				adc4 = bitconverter.ToUInt16(bytes, offset + 6),
				adc5 = bitconverter.ToUInt16(bytes, offset + 8),
				adc6 = bitconverter.ToUInt16(bytes, offset + 10),
			};
		}

		internal static MavlinkMessage Deserialize_DIGICAM_CONFIGURE(byte[] bytes, int offset)
		{
			return new Msg_digicam_configure
			{
				extra_value = bitconverter.ToSingle(bytes, offset + 0),
				shutter_speed = bitconverter.ToUInt16(bytes, offset + 4),
				target_system = bytes[offset + 6],
				target_component = bytes[offset + 7],
				mode = bytes[offset + 8],
				aperture = bytes[offset + 9],
				iso = bytes[offset + 10],
				exposure_type = bytes[offset + 11],
				command_id = bytes[offset + 12],
				engine_cut_off = bytes[offset + 13],
				extra_param = bytes[offset + 14],
			};
		}

		internal static MavlinkMessage Deserialize_DIGICAM_CONTROL(byte[] bytes, int offset)
		{
			return new Msg_digicam_control
			{
				extra_value = bitconverter.ToSingle(bytes, offset + 0),
				target_system = bytes[offset + 4],
				target_component = bytes[offset + 5],
				session = bytes[offset + 6],
				zoom_pos = bytes[offset + 7],
				zoom_step = bitconverter.ToInt8(bytes, offset + 8),
				focus_lock = bytes[offset + 9],
				shot = bytes[offset + 10],
				command_id = bytes[offset + 11],
				extra_param = bytes[offset + 12],
			};
		}

		internal static MavlinkMessage Deserialize_MOUNT_CONFIGURE(byte[] bytes, int offset)
		{
			return new Msg_mount_configure
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				mount_mode = bytes[offset + 2],
				stab_roll = bytes[offset + 3],
				stab_pitch = bytes[offset + 4],
				stab_yaw = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_MOUNT_CONTROL(byte[] bytes, int offset)
		{
			return new Msg_mount_control
			{
				input_a = bitconverter.ToInt32(bytes, offset + 0),
				input_b = bitconverter.ToInt32(bytes, offset + 4),
				input_c = bitconverter.ToInt32(bytes, offset + 8),
				target_system = bytes[offset + 12],
				target_component = bytes[offset + 13],
				save_position = bytes[offset + 14],
			};
		}

		internal static MavlinkMessage Deserialize_MOUNT_STATUS(byte[] bytes, int offset)
		{
			return new Msg_mount_status
			{
				pointing_a = bitconverter.ToInt32(bytes, offset + 0),
				pointing_b = bitconverter.ToInt32(bytes, offset + 4),
				pointing_c = bitconverter.ToInt32(bytes, offset + 8),
				target_system = bytes[offset + 12],
				target_component = bytes[offset + 13],
			};
		}

		internal static MavlinkMessage Deserialize_FENCE_POINT(byte[] bytes, int offset)
		{
			return new Msg_fence_point
			{
				lat = bitconverter.ToSingle(bytes, offset + 0),
				lng = bitconverter.ToSingle(bytes, offset + 4),
				target_system = bytes[offset + 8],
				target_component = bytes[offset + 9],
				idx = bytes[offset + 10],
				count = bytes[offset + 11],
			};
		}

		internal static MavlinkMessage Deserialize_FENCE_FETCH_POINT(byte[] bytes, int offset)
		{
			return new Msg_fence_fetch_point
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				idx = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_FENCE_STATUS(byte[] bytes, int offset)
		{
			return new Msg_fence_status
			{
				breach_time = bitconverter.ToUInt32(bytes, offset + 0),
				breach_count = bitconverter.ToUInt16(bytes, offset + 4),
				breach_status = bytes[offset + 6],
				breach_type = bytes[offset + 7],
			};
		}

		internal static MavlinkMessage Deserialize_AHRS(byte[] bytes, int offset)
		{
			return new Msg_ahrs
			{
				omegaIx = bitconverter.ToSingle(bytes, offset + 0),
				omegaIy = bitconverter.ToSingle(bytes, offset + 4),
				omegaIz = bitconverter.ToSingle(bytes, offset + 8),
				accel_weight = bitconverter.ToSingle(bytes, offset + 12),
				renorm_val = bitconverter.ToSingle(bytes, offset + 16),
				error_rp = bitconverter.ToSingle(bytes, offset + 20),
				error_yaw = bitconverter.ToSingle(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_SIMSTATE(byte[] bytes, int offset)
		{
			return new Msg_simstate
			{
				roll = bitconverter.ToSingle(bytes, offset + 0),
				pitch = bitconverter.ToSingle(bytes, offset + 4),
				yaw = bitconverter.ToSingle(bytes, offset + 8),
				xacc = bitconverter.ToSingle(bytes, offset + 12),
				yacc = bitconverter.ToSingle(bytes, offset + 16),
				zacc = bitconverter.ToSingle(bytes, offset + 20),
				xgyro = bitconverter.ToSingle(bytes, offset + 24),
				ygyro = bitconverter.ToSingle(bytes, offset + 28),
				zgyro = bitconverter.ToSingle(bytes, offset + 32),
				lat = bitconverter.ToInt32(bytes, offset + 36),
				lng = bitconverter.ToInt32(bytes, offset + 40),
			};
		}

		internal static MavlinkMessage Deserialize_HWSTATUS(byte[] bytes, int offset)
		{
			return new Msg_hwstatus
			{
				Vcc = bitconverter.ToUInt16(bytes, offset + 0),
				I2Cerr = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_RADIO(byte[] bytes, int offset)
		{
			return new Msg_radio
			{
				rxerrors = bitconverter.ToUInt16(bytes, offset + 0),
				@fixed = bitconverter.ToUInt16(bytes, offset + 2),
				rssi = bytes[offset + 4],
				remrssi = bytes[offset + 5],
				txbuf = bytes[offset + 6],
				noise = bytes[offset + 7],
				remnoise = bytes[offset + 8],
			};
		}

		internal static MavlinkMessage Deserialize_LIMITS_STATUS(byte[] bytes, int offset)
		{
			return new Msg_limits_status
			{
				last_trigger = bitconverter.ToUInt32(bytes, offset + 0),
				last_action = bitconverter.ToUInt32(bytes, offset + 4),
				last_recovery = bitconverter.ToUInt32(bytes, offset + 8),
				last_clear = bitconverter.ToUInt32(bytes, offset + 12),
				breach_count = bitconverter.ToUInt16(bytes, offset + 16),
				limits_state = bytes[offset + 18],
				mods_enabled = bytes[offset + 19],
				mods_required = bytes[offset + 20],
				mods_triggered = bytes[offset + 21],
			};
		}

		internal static MavlinkMessage Deserialize_WIND(byte[] bytes, int offset)
		{
			return new Msg_wind
			{
				direction = bitconverter.ToSingle(bytes, offset + 0),
				speed = bitconverter.ToSingle(bytes, offset + 4),
				speed_z = bitconverter.ToSingle(bytes, offset + 8),
			};
		}

		internal static MavlinkMessage Deserialize_DATA16(byte[] bytes, int offset)
		{
			return new Msg_data16
			{
				type = bytes[offset + 0],
				len = bytes[offset + 1],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 16),
			};
		}

		internal static MavlinkMessage Deserialize_DATA32(byte[] bytes, int offset)
		{
			return new Msg_data32
			{
				type = bytes[offset + 0],
				len = bytes[offset + 1],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 32),
			};
		}

		internal static MavlinkMessage Deserialize_DATA64(byte[] bytes, int offset)
		{
			return new Msg_data64
			{
				type = bytes[offset + 0],
				len = bytes[offset + 1],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 64),
			};
		}

		internal static MavlinkMessage Deserialize_DATA96(byte[] bytes, int offset)
		{
			return new Msg_data96
			{
				type = bytes[offset + 0],
				len = bytes[offset + 1],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 96),
			};
		}

		internal static MavlinkMessage Deserialize_RANGEFINDER(byte[] bytes, int offset)
		{
			return new Msg_rangefinder
			{
				distance = bitconverter.ToSingle(bytes, offset + 0),
				voltage = bitconverter.ToSingle(bytes, offset + 4),
			};
		}

		internal static MavlinkMessage Deserialize_AIRSPEED_AUTOCAL(byte[] bytes, int offset)
		{
			return new Msg_airspeed_autocal
			{
				vx = bitconverter.ToSingle(bytes, offset + 0),
				vy = bitconverter.ToSingle(bytes, offset + 4),
				vz = bitconverter.ToSingle(bytes, offset + 8),
				diff_pressure = bitconverter.ToSingle(bytes, offset + 12),
				EAS2TAS = bitconverter.ToSingle(bytes, offset + 16),
				ratio = bitconverter.ToSingle(bytes, offset + 20),
				state_x = bitconverter.ToSingle(bytes, offset + 24),
				state_y = bitconverter.ToSingle(bytes, offset + 28),
				state_z = bitconverter.ToSingle(bytes, offset + 32),
				Pax = bitconverter.ToSingle(bytes, offset + 36),
				Pby = bitconverter.ToSingle(bytes, offset + 40),
				Pcz = bitconverter.ToSingle(bytes, offset + 44),
			};
		}

		internal static MavlinkMessage Deserialize_RALLY_POINT(byte[] bytes, int offset)
		{
			return new Msg_rally_point
			{
				lat = bitconverter.ToInt32(bytes, offset + 0),
				lng = bitconverter.ToInt32(bytes, offset + 4),
				alt = bitconverter.ToInt16(bytes, offset + 8),
				break_alt = bitconverter.ToInt16(bytes, offset + 10),
				land_dir = bitconverter.ToUInt16(bytes, offset + 12),
				target_system = bytes[offset + 14],
				target_component = bytes[offset + 15],
				idx = bytes[offset + 16],
				count = bytes[offset + 17],
				flags = bytes[offset + 18],
			};
		}

		internal static MavlinkMessage Deserialize_RALLY_FETCH_POINT(byte[] bytes, int offset)
		{
			return new Msg_rally_fetch_point
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				idx = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_COMPASSMOT_STATUS(byte[] bytes, int offset)
		{
			return new Msg_compassmot_status
			{
				current = bitconverter.ToSingle(bytes, offset + 0),
				CompensationX = bitconverter.ToSingle(bytes, offset + 4),
				CompensationY = bitconverter.ToSingle(bytes, offset + 8),
				CompensationZ = bitconverter.ToSingle(bytes, offset + 12),
				throttle = bitconverter.ToUInt16(bytes, offset + 16),
				interference = bitconverter.ToUInt16(bytes, offset + 18),
			};
		}

		internal static MavlinkMessage Deserialize_AHRS2(byte[] bytes, int offset)
		{
			return new Msg_ahrs2
			{
				roll = bitconverter.ToSingle(bytes, offset + 0),
				pitch = bitconverter.ToSingle(bytes, offset + 4),
				yaw = bitconverter.ToSingle(bytes, offset + 8),
				altitude = bitconverter.ToSingle(bytes, offset + 12),
				lat = bitconverter.ToInt32(bytes, offset + 16),
				lng = bitconverter.ToInt32(bytes, offset + 20),
			};
		}

		internal static MavlinkMessage Deserialize_CAMERA_STATUS(byte[] bytes, int offset)
		{
			return new Msg_camera_status
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				p1 = bitconverter.ToSingle(bytes, offset + 8),
				p2 = bitconverter.ToSingle(bytes, offset + 12),
				p3 = bitconverter.ToSingle(bytes, offset + 16),
				p4 = bitconverter.ToSingle(bytes, offset + 20),
				img_idx = bitconverter.ToUInt16(bytes, offset + 24),
				target_system = bytes[offset + 26],
				cam_idx = bytes[offset + 27],
				event_id = bytes[offset + 28],
			};
		}

		internal static MavlinkMessage Deserialize_CAMERA_FEEDBACK(byte[] bytes, int offset)
		{
			return new Msg_camera_feedback
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 8),
				lng = bitconverter.ToInt32(bytes, offset + 12),
				alt_msl = bitconverter.ToSingle(bytes, offset + 16),
				alt_rel = bitconverter.ToSingle(bytes, offset + 20),
				roll = bitconverter.ToSingle(bytes, offset + 24),
				pitch = bitconverter.ToSingle(bytes, offset + 28),
				yaw = bitconverter.ToSingle(bytes, offset + 32),
				foc_len = bitconverter.ToSingle(bytes, offset + 36),
				img_idx = bitconverter.ToUInt16(bytes, offset + 40),
				target_system = bytes[offset + 42],
				cam_idx = bytes[offset + 43],
				flags = bytes[offset + 44],
			};
		}

		internal static MavlinkMessage Deserialize_BATTERY2(byte[] bytes, int offset)
		{
			return new Msg_battery2
			{
				voltage = bitconverter.ToUInt16(bytes, offset + 0),
				current_battery = bitconverter.ToInt16(bytes, offset + 2),
			};
		}

		internal static MavlinkMessage Deserialize_AHRS3(byte[] bytes, int offset)
		{
			return new Msg_ahrs3
			{
				roll = bitconverter.ToSingle(bytes, offset + 0),
				pitch = bitconverter.ToSingle(bytes, offset + 4),
				yaw = bitconverter.ToSingle(bytes, offset + 8),
				altitude = bitconverter.ToSingle(bytes, offset + 12),
				lat = bitconverter.ToInt32(bytes, offset + 16),
				lng = bitconverter.ToInt32(bytes, offset + 20),
				v1 = bitconverter.ToSingle(bytes, offset + 24),
				v2 = bitconverter.ToSingle(bytes, offset + 28),
				v3 = bitconverter.ToSingle(bytes, offset + 32),
				v4 = bitconverter.ToSingle(bytes, offset + 36),
			};
		}

		internal static MavlinkMessage Deserialize_AUTOPILOT_VERSION_REQUEST(byte[] bytes, int offset)
		{
			return new Msg_autopilot_version_request
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_REMOTE_LOG_DATA_BLOCK(byte[] bytes, int offset)
		{
			return new Msg_remote_log_data_block
			{
				seqno = bitconverter.ToUInt32(bytes, offset + 0),
				target_system = bytes[offset + 4],
				target_component = bytes[offset + 5],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 6, 200),
			};
		}

		internal static MavlinkMessage Deserialize_REMOTE_LOG_BLOCK_STATUS(byte[] bytes, int offset)
		{
			return new Msg_remote_log_block_status
			{
				seqno = bitconverter.ToUInt32(bytes, offset + 0),
				target_system = bytes[offset + 4],
				target_component = bytes[offset + 5],
				status = bytes[offset + 6],
			};
		}

		internal static MavlinkMessage Deserialize_LED_CONTROL(byte[] bytes, int offset)
		{
			return new Msg_led_control
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				instance = bytes[offset + 2],
				pattern = bytes[offset + 3],
				custom_len = bytes[offset + 4],
				custom_bytes =  ByteArrayUtil.ToUInt8(bytes, offset + 5, 24),
			};
		}

		internal static MavlinkMessage Deserialize_MAG_CAL_PROGRESS(byte[] bytes, int offset)
		{
			return new Msg_mag_cal_progress
			{
				direction_x = bitconverter.ToSingle(bytes, offset + 0),
				direction_y = bitconverter.ToSingle(bytes, offset + 4),
				direction_z = bitconverter.ToSingle(bytes, offset + 8),
				compass_id = bytes[offset + 12],
				cal_mask = bytes[offset + 13],
				cal_status = bytes[offset + 14],
				attempt = bytes[offset + 15],
				completion_pct = bytes[offset + 16],
				completion_mask =  ByteArrayUtil.ToUInt8(bytes, offset + 17, 10),
			};
		}

		internal static MavlinkMessage Deserialize_MAG_CAL_REPORT(byte[] bytes, int offset)
		{
			return new Msg_mag_cal_report
			{
				fitness = bitconverter.ToSingle(bytes, offset + 0),
				ofs_x = bitconverter.ToSingle(bytes, offset + 4),
				ofs_y = bitconverter.ToSingle(bytes, offset + 8),
				ofs_z = bitconverter.ToSingle(bytes, offset + 12),
				diag_x = bitconverter.ToSingle(bytes, offset + 16),
				diag_y = bitconverter.ToSingle(bytes, offset + 20),
				diag_z = bitconverter.ToSingle(bytes, offset + 24),
				offdiag_x = bitconverter.ToSingle(bytes, offset + 28),
				offdiag_y = bitconverter.ToSingle(bytes, offset + 32),
				offdiag_z = bitconverter.ToSingle(bytes, offset + 36),
				compass_id = bytes[offset + 40],
				cal_mask = bytes[offset + 41],
				cal_status = bytes[offset + 42],
				autosaved = bytes[offset + 43],
			};
		}

		internal static MavlinkMessage Deserialize_EKF_STATUS_REPORT(byte[] bytes, int offset)
		{
			return new Msg_ekf_status_report
			{
				velocity_variance = bitconverter.ToSingle(bytes, offset + 0),
				pos_horiz_variance = bitconverter.ToSingle(bytes, offset + 4),
				pos_vert_variance = bitconverter.ToSingle(bytes, offset + 8),
				compass_variance = bitconverter.ToSingle(bytes, offset + 12),
				terrain_alt_variance = bitconverter.ToSingle(bytes, offset + 16),
				flags = bitconverter.ToUInt16(bytes, offset + 20),
			};
		}

		internal static MavlinkMessage Deserialize_PID_TUNING(byte[] bytes, int offset)
		{
			return new Msg_pid_tuning
			{
				desired = bitconverter.ToSingle(bytes, offset + 0),
				achieved = bitconverter.ToSingle(bytes, offset + 4),
				FF = bitconverter.ToSingle(bytes, offset + 8),
				P = bitconverter.ToSingle(bytes, offset + 12),
				I = bitconverter.ToSingle(bytes, offset + 16),
				D = bitconverter.ToSingle(bytes, offset + 20),
				axis = bytes[offset + 24],
			};
		}

		internal static MavlinkMessage Deserialize_GIMBAL_REPORT(byte[] bytes, int offset)
		{
			return new Msg_gimbal_report
			{
				delta_time = bitconverter.ToSingle(bytes, offset + 0),
				delta_angle_x = bitconverter.ToSingle(bytes, offset + 4),
				delta_angle_y = bitconverter.ToSingle(bytes, offset + 8),
				delta_angle_z = bitconverter.ToSingle(bytes, offset + 12),
				delta_velocity_x = bitconverter.ToSingle(bytes, offset + 16),
				delta_velocity_y = bitconverter.ToSingle(bytes, offset + 20),
				delta_velocity_z = bitconverter.ToSingle(bytes, offset + 24),
				joint_roll = bitconverter.ToSingle(bytes, offset + 28),
				joint_el = bitconverter.ToSingle(bytes, offset + 32),
				joint_az = bitconverter.ToSingle(bytes, offset + 36),
				target_system = bytes[offset + 40],
				target_component = bytes[offset + 41],
			};
		}

		internal static MavlinkMessage Deserialize_GIMBAL_CONTROL(byte[] bytes, int offset)
		{
			return new Msg_gimbal_control
			{
				demanded_rate_x = bitconverter.ToSingle(bytes, offset + 0),
				demanded_rate_y = bitconverter.ToSingle(bytes, offset + 4),
				demanded_rate_z = bitconverter.ToSingle(bytes, offset + 8),
				target_system = bytes[offset + 12],
				target_component = bytes[offset + 13],
			};
		}

		internal static MavlinkMessage Deserialize_GIMBAL_TORQUE_CMD_REPORT(byte[] bytes, int offset)
		{
			return new Msg_gimbal_torque_cmd_report
			{
				rl_torque_cmd = bitconverter.ToInt16(bytes, offset + 0),
				el_torque_cmd = bitconverter.ToInt16(bytes, offset + 2),
				az_torque_cmd = bitconverter.ToInt16(bytes, offset + 4),
				target_system = bytes[offset + 6],
				target_component = bytes[offset + 7],
			};
		}

		internal static MavlinkMessage Deserialize_GOPRO_HEARTBEAT(byte[] bytes, int offset)
		{
			return new Msg_gopro_heartbeat
			{
				status = bytes[offset + 0],
				capture_mode = bytes[offset + 1],
				flags = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_GOPRO_GET_REQUEST(byte[] bytes, int offset)
		{
			return new Msg_gopro_get_request
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				cmd_id = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_GOPRO_GET_RESPONSE(byte[] bytes, int offset)
		{
			return new Msg_gopro_get_response
			{
				cmd_id = bytes[offset + 0],
				status = bytes[offset + 1],
				value =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 4),
			};
		}

		internal static MavlinkMessage Deserialize_GOPRO_SET_REQUEST(byte[] bytes, int offset)
		{
			return new Msg_gopro_set_request
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				cmd_id = bytes[offset + 2],
				value =  ByteArrayUtil.ToUInt8(bytes, offset + 3, 4),
			};
		}

		internal static MavlinkMessage Deserialize_GOPRO_SET_RESPONSE(byte[] bytes, int offset)
		{
			return new Msg_gopro_set_response
			{
				cmd_id = bytes[offset + 0],
				status = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_RPM(byte[] bytes, int offset)
		{
			return new Msg_rpm
			{
				rpm1 = bitconverter.ToSingle(bytes, offset + 0),
				rpm2 = bitconverter.ToSingle(bytes, offset + 4),
			};
		}

		internal static MavlinkMessage Deserialize_HEARTBEAT(byte[] bytes, int offset)
		{
			return new Msg_heartbeat
			{
				custom_mode = bitconverter.ToUInt32(bytes, offset + 0),
				type = bytes[offset + 4],
				autopilot = bytes[offset + 5],
				base_mode = bytes[offset + 6],
				system_status = bytes[offset + 7],
				mavlink_version = bytes[offset + 8],
			};
		}

		internal static MavlinkMessage Deserialize_SYS_STATUS(byte[] bytes, int offset)
		{
			return new Msg_sys_status
			{
				onboard_control_sensors_present = bitconverter.ToUInt32(bytes, offset + 0),
				onboard_control_sensors_enabled = bitconverter.ToUInt32(bytes, offset + 4),
				onboard_control_sensors_health = bitconverter.ToUInt32(bytes, offset + 8),
				load = bitconverter.ToUInt16(bytes, offset + 12),
				voltage_battery = bitconverter.ToUInt16(bytes, offset + 14),
				current_battery = bitconverter.ToInt16(bytes, offset + 16),
				drop_rate_comm = bitconverter.ToUInt16(bytes, offset + 18),
				errors_comm = bitconverter.ToUInt16(bytes, offset + 20),
				errors_count1 = bitconverter.ToUInt16(bytes, offset + 22),
				errors_count2 = bitconverter.ToUInt16(bytes, offset + 24),
				errors_count3 = bitconverter.ToUInt16(bytes, offset + 26),
				errors_count4 = bitconverter.ToUInt16(bytes, offset + 28),
				battery_remaining = bitconverter.ToInt8(bytes, offset + 30),
			};
		}

		internal static MavlinkMessage Deserialize_SYSTEM_TIME(byte[] bytes, int offset)
		{
			return new Msg_system_time
			{
				time_unix_usec = bitconverter.ToUInt64(bytes, offset + 0),
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 8),
			};
		}

		internal static MavlinkMessage Deserialize_PING(byte[] bytes, int offset)
		{
			return new Msg_ping
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				seq = bitconverter.ToUInt32(bytes, offset + 8),
				target_system = bytes[offset + 12],
				target_component = bytes[offset + 13],
			};
		}

		internal static MavlinkMessage Deserialize_CHANGE_OPERATOR_CONTROL(byte[] bytes, int offset)
		{
			return new Msg_change_operator_control
			{
				target_system = bytes[offset + 0],
				control_request = bytes[offset + 1],
				version = bytes[offset + 2],
				passkey =  ByteArrayUtil.ToChar(bytes, offset + 3, 25),
			};
		}

		internal static MavlinkMessage Deserialize_CHANGE_OPERATOR_CONTROL_ACK(byte[] bytes, int offset)
		{
			return new Msg_change_operator_control_ack
			{
				gcs_system_id = bytes[offset + 0],
				control_request = bytes[offset + 1],
				ack = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_AUTH_KEY(byte[] bytes, int offset)
		{
			return new Msg_auth_key
			{
				key =  ByteArrayUtil.ToChar(bytes, offset + 0, 32),
			};
		}

		internal static MavlinkMessage Deserialize_SET_MODE(byte[] bytes, int offset)
		{
			return new Msg_set_mode
			{
				custom_mode = bitconverter.ToUInt32(bytes, offset + 0),
				target_system = bytes[offset + 4],
				base_mode = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_REQUEST_READ(byte[] bytes, int offset)
		{
			return new Msg_param_request_read
			{
				param_index = bitconverter.ToInt16(bytes, offset + 0),
				target_system = bytes[offset + 2],
				target_component = bytes[offset + 3],
				param_id =  ByteArrayUtil.ToChar(bytes, offset + 4, 16),
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_REQUEST_LIST(byte[] bytes, int offset)
		{
			return new Msg_param_request_list
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_VALUE(byte[] bytes, int offset)
		{
			return new Msg_param_value
			{
				param_value = bitconverter.ToSingle(bytes, offset + 0),
				param_count = bitconverter.ToUInt16(bytes, offset + 4),
				param_index = bitconverter.ToUInt16(bytes, offset + 6),
				param_id =  ByteArrayUtil.ToChar(bytes, offset + 8, 16),
				param_type = bytes[offset + 24],
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_SET(byte[] bytes, int offset)
		{
			return new Msg_param_set
			{
				param_value = bitconverter.ToSingle(bytes, offset + 0),
				target_system = bytes[offset + 4],
				target_component = bytes[offset + 5],
				param_id =  ByteArrayUtil.ToChar(bytes, offset + 6, 16),
				param_type = bytes[offset + 22],
			};
		}

		internal static MavlinkMessage Deserialize_GPS_RAW_INT(byte[] bytes, int offset)
		{
			return new Msg_gps_raw_int
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 8),
				lon = bitconverter.ToInt32(bytes, offset + 12),
				alt = bitconverter.ToInt32(bytes, offset + 16),
				eph = bitconverter.ToUInt16(bytes, offset + 20),
				epv = bitconverter.ToUInt16(bytes, offset + 22),
				vel = bitconverter.ToUInt16(bytes, offset + 24),
				cog = bitconverter.ToUInt16(bytes, offset + 26),
				fix_type = bytes[offset + 28],
				satellites_visible = bytes[offset + 29],
			};
		}

		internal static MavlinkMessage Deserialize_GPS_STATUS(byte[] bytes, int offset)
		{
			return new Msg_gps_status
			{
				satellites_visible = bytes[offset + 0],
				satellite_prn =  ByteArrayUtil.ToUInt8(bytes, offset + 1, 20),
				satellite_used =  ByteArrayUtil.ToUInt8(bytes, offset + 21, 20),
				satellite_elevation =  ByteArrayUtil.ToUInt8(bytes, offset + 41, 20),
				satellite_azimuth =  ByteArrayUtil.ToUInt8(bytes, offset + 61, 20),
				satellite_snr =  ByteArrayUtil.ToUInt8(bytes, offset + 81, 20),
			};
		}

		internal static MavlinkMessage Deserialize_SCALED_IMU(byte[] bytes, int offset)
		{
			return new Msg_scaled_imu
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				xacc = bitconverter.ToInt16(bytes, offset + 4),
				yacc = bitconverter.ToInt16(bytes, offset + 6),
				zacc = bitconverter.ToInt16(bytes, offset + 8),
				xgyro = bitconverter.ToInt16(bytes, offset + 10),
				ygyro = bitconverter.ToInt16(bytes, offset + 12),
				zgyro = bitconverter.ToInt16(bytes, offset + 14),
				xmag = bitconverter.ToInt16(bytes, offset + 16),
				ymag = bitconverter.ToInt16(bytes, offset + 18),
				zmag = bitconverter.ToInt16(bytes, offset + 20),
			};
		}

		internal static MavlinkMessage Deserialize_RAW_IMU(byte[] bytes, int offset)
		{
			return new Msg_raw_imu
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				xacc = bitconverter.ToInt16(bytes, offset + 8),
				yacc = bitconverter.ToInt16(bytes, offset + 10),
				zacc = bitconverter.ToInt16(bytes, offset + 12),
				xgyro = bitconverter.ToInt16(bytes, offset + 14),
				ygyro = bitconverter.ToInt16(bytes, offset + 16),
				zgyro = bitconverter.ToInt16(bytes, offset + 18),
				xmag = bitconverter.ToInt16(bytes, offset + 20),
				ymag = bitconverter.ToInt16(bytes, offset + 22),
				zmag = bitconverter.ToInt16(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_RAW_PRESSURE(byte[] bytes, int offset)
		{
			return new Msg_raw_pressure
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				press_abs = bitconverter.ToInt16(bytes, offset + 8),
				press_diff1 = bitconverter.ToInt16(bytes, offset + 10),
				press_diff2 = bitconverter.ToInt16(bytes, offset + 12),
				temperature = bitconverter.ToInt16(bytes, offset + 14),
			};
		}

		internal static MavlinkMessage Deserialize_SCALED_PRESSURE(byte[] bytes, int offset)
		{
			return new Msg_scaled_pressure
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				press_abs = bitconverter.ToSingle(bytes, offset + 4),
				press_diff = bitconverter.ToSingle(bytes, offset + 8),
				temperature = bitconverter.ToInt16(bytes, offset + 12),
			};
		}

		internal static MavlinkMessage Deserialize_ATTITUDE(byte[] bytes, int offset)
		{
			return new Msg_attitude
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				roll = bitconverter.ToSingle(bytes, offset + 4),
				pitch = bitconverter.ToSingle(bytes, offset + 8),
				yaw = bitconverter.ToSingle(bytes, offset + 12),
				rollspeed = bitconverter.ToSingle(bytes, offset + 16),
				pitchspeed = bitconverter.ToSingle(bytes, offset + 20),
				yawspeed = bitconverter.ToSingle(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_ATTITUDE_QUATERNION(byte[] bytes, int offset)
		{
			return new Msg_attitude_quaternion
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				q1 = bitconverter.ToSingle(bytes, offset + 4),
				q2 = bitconverter.ToSingle(bytes, offset + 8),
				q3 = bitconverter.ToSingle(bytes, offset + 12),
				q4 = bitconverter.ToSingle(bytes, offset + 16),
				rollspeed = bitconverter.ToSingle(bytes, offset + 20),
				pitchspeed = bitconverter.ToSingle(bytes, offset + 24),
				yawspeed = bitconverter.ToSingle(bytes, offset + 28),
			};
		}

		internal static MavlinkMessage Deserialize_LOCAL_POSITION_NED(byte[] bytes, int offset)
		{
			return new Msg_local_position_ned
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 4),
				y = bitconverter.ToSingle(bytes, offset + 8),
				z = bitconverter.ToSingle(bytes, offset + 12),
				vx = bitconverter.ToSingle(bytes, offset + 16),
				vy = bitconverter.ToSingle(bytes, offset + 20),
				vz = bitconverter.ToSingle(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_GLOBAL_POSITION_INT(byte[] bytes, int offset)
		{
			return new Msg_global_position_int
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 4),
				lon = bitconverter.ToInt32(bytes, offset + 8),
				alt = bitconverter.ToInt32(bytes, offset + 12),
				relative_alt = bitconverter.ToInt32(bytes, offset + 16),
				vx = bitconverter.ToInt16(bytes, offset + 20),
				vy = bitconverter.ToInt16(bytes, offset + 22),
				vz = bitconverter.ToInt16(bytes, offset + 24),
				hdg = bitconverter.ToUInt16(bytes, offset + 26),
			};
		}

		internal static MavlinkMessage Deserialize_RC_CHANNELS_SCALED(byte[] bytes, int offset)
		{
			return new Msg_rc_channels_scaled
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				chan1_scaled = bitconverter.ToInt16(bytes, offset + 4),
				chan2_scaled = bitconverter.ToInt16(bytes, offset + 6),
				chan3_scaled = bitconverter.ToInt16(bytes, offset + 8),
				chan4_scaled = bitconverter.ToInt16(bytes, offset + 10),
				chan5_scaled = bitconverter.ToInt16(bytes, offset + 12),
				chan6_scaled = bitconverter.ToInt16(bytes, offset + 14),
				chan7_scaled = bitconverter.ToInt16(bytes, offset + 16),
				chan8_scaled = bitconverter.ToInt16(bytes, offset + 18),
				port = bytes[offset + 20],
				rssi = bytes[offset + 21],
			};
		}

		internal static MavlinkMessage Deserialize_RC_CHANNELS_RAW(byte[] bytes, int offset)
		{
			return new Msg_rc_channels_raw
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				chan1_raw = bitconverter.ToUInt16(bytes, offset + 4),
				chan2_raw = bitconverter.ToUInt16(bytes, offset + 6),
				chan3_raw = bitconverter.ToUInt16(bytes, offset + 8),
				chan4_raw = bitconverter.ToUInt16(bytes, offset + 10),
				chan5_raw = bitconverter.ToUInt16(bytes, offset + 12),
				chan6_raw = bitconverter.ToUInt16(bytes, offset + 14),
				chan7_raw = bitconverter.ToUInt16(bytes, offset + 16),
				chan8_raw = bitconverter.ToUInt16(bytes, offset + 18),
				port = bytes[offset + 20],
				rssi = bytes[offset + 21],
			};
		}

		internal static MavlinkMessage Deserialize_SERVO_OUTPUT_RAW(byte[] bytes, int offset)
		{
			return new Msg_servo_output_raw
			{
				time_usec = bitconverter.ToUInt32(bytes, offset + 0),
				servo1_raw = bitconverter.ToUInt16(bytes, offset + 4),
				servo2_raw = bitconverter.ToUInt16(bytes, offset + 6),
				servo3_raw = bitconverter.ToUInt16(bytes, offset + 8),
				servo4_raw = bitconverter.ToUInt16(bytes, offset + 10),
				servo5_raw = bitconverter.ToUInt16(bytes, offset + 12),
				servo6_raw = bitconverter.ToUInt16(bytes, offset + 14),
				servo7_raw = bitconverter.ToUInt16(bytes, offset + 16),
				servo8_raw = bitconverter.ToUInt16(bytes, offset + 18),
				port = bytes[offset + 20],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_REQUEST_PARTIAL_LIST(byte[] bytes, int offset)
		{
			return new Msg_mission_request_partial_list
			{
				start_index = bitconverter.ToInt16(bytes, offset + 0),
				end_index = bitconverter.ToInt16(bytes, offset + 2),
				target_system = bytes[offset + 4],
				target_component = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_WRITE_PARTIAL_LIST(byte[] bytes, int offset)
		{
			return new Msg_mission_write_partial_list
			{
				start_index = bitconverter.ToInt16(bytes, offset + 0),
				end_index = bitconverter.ToInt16(bytes, offset + 2),
				target_system = bytes[offset + 4],
				target_component = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_ITEM(byte[] bytes, int offset)
		{
			return new Msg_mission_item
			{
				param1 = bitconverter.ToSingle(bytes, offset + 0),
				param2 = bitconverter.ToSingle(bytes, offset + 4),
				param3 = bitconverter.ToSingle(bytes, offset + 8),
				param4 = bitconverter.ToSingle(bytes, offset + 12),
				x = bitconverter.ToSingle(bytes, offset + 16),
				y = bitconverter.ToSingle(bytes, offset + 20),
				z = bitconverter.ToSingle(bytes, offset + 24),
				seq = bitconverter.ToUInt16(bytes, offset + 28),
				command = bitconverter.ToUInt16(bytes, offset + 30),
				target_system = bytes[offset + 32],
				target_component = bytes[offset + 33],
				frame = bytes[offset + 34],
				current = bytes[offset + 35],
				autocontinue = bytes[offset + 36],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_REQUEST(byte[] bytes, int offset)
		{
			return new Msg_mission_request
			{
				seq = bitconverter.ToUInt16(bytes, offset + 0),
				target_system = bytes[offset + 2],
				target_component = bytes[offset + 3],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_SET_CURRENT(byte[] bytes, int offset)
		{
			return new Msg_mission_set_current
			{
				seq = bitconverter.ToUInt16(bytes, offset + 0),
				target_system = bytes[offset + 2],
				target_component = bytes[offset + 3],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_CURRENT(byte[] bytes, int offset)
		{
			return new Msg_mission_current
			{
				seq = bitconverter.ToUInt16(bytes, offset + 0),
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_REQUEST_LIST(byte[] bytes, int offset)
		{
			return new Msg_mission_request_list
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_COUNT(byte[] bytes, int offset)
		{
			return new Msg_mission_count
			{
				count = bitconverter.ToUInt16(bytes, offset + 0),
				target_system = bytes[offset + 2],
				target_component = bytes[offset + 3],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_CLEAR_ALL(byte[] bytes, int offset)
		{
			return new Msg_mission_clear_all
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_ITEM_REACHED(byte[] bytes, int offset)
		{
			return new Msg_mission_item_reached
			{
				seq = bitconverter.ToUInt16(bytes, offset + 0),
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_ACK(byte[] bytes, int offset)
		{
			return new Msg_mission_ack
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				type = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_SET_GPS_GLOBAL_ORIGIN(byte[] bytes, int offset)
		{
			return new Msg_set_gps_global_origin
			{
				latitude = bitconverter.ToInt32(bytes, offset + 0),
				longitude = bitconverter.ToInt32(bytes, offset + 4),
				altitude = bitconverter.ToInt32(bytes, offset + 8),
				target_system = bytes[offset + 12],
			};
		}

		internal static MavlinkMessage Deserialize_GPS_GLOBAL_ORIGIN(byte[] bytes, int offset)
		{
			return new Msg_gps_global_origin
			{
				latitude = bitconverter.ToInt32(bytes, offset + 0),
				longitude = bitconverter.ToInt32(bytes, offset + 4),
				altitude = bitconverter.ToInt32(bytes, offset + 8),
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_MAP_RC(byte[] bytes, int offset)
		{
			return new Msg_param_map_rc
			{
				param_value0 = bitconverter.ToSingle(bytes, offset + 0),
				scale = bitconverter.ToSingle(bytes, offset + 4),
				param_value_min = bitconverter.ToSingle(bytes, offset + 8),
				param_value_max = bitconverter.ToSingle(bytes, offset + 12),
				param_index = bitconverter.ToInt16(bytes, offset + 16),
				target_system = bytes[offset + 18],
				target_component = bytes[offset + 19],
				param_id =  ByteArrayUtil.ToChar(bytes, offset + 20, 16),
				parameter_rc_channel_index = bytes[offset + 36],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_REQUEST_INT(byte[] bytes, int offset)
		{
			return new Msg_mission_request_int
			{
				seq = bitconverter.ToUInt16(bytes, offset + 0),
				target_system = bytes[offset + 2],
				target_component = bytes[offset + 3],
			};
		}

		internal static MavlinkMessage Deserialize_SAFETY_SET_ALLOWED_AREA(byte[] bytes, int offset)
		{
			return new Msg_safety_set_allowed_area
			{
				p1x = bitconverter.ToSingle(bytes, offset + 0),
				p1y = bitconverter.ToSingle(bytes, offset + 4),
				p1z = bitconverter.ToSingle(bytes, offset + 8),
				p2x = bitconverter.ToSingle(bytes, offset + 12),
				p2y = bitconverter.ToSingle(bytes, offset + 16),
				p2z = bitconverter.ToSingle(bytes, offset + 20),
				target_system = bytes[offset + 24],
				target_component = bytes[offset + 25],
				frame = bytes[offset + 26],
			};
		}

		internal static MavlinkMessage Deserialize_SAFETY_ALLOWED_AREA(byte[] bytes, int offset)
		{
			return new Msg_safety_allowed_area
			{
				p1x = bitconverter.ToSingle(bytes, offset + 0),
				p1y = bitconverter.ToSingle(bytes, offset + 4),
				p1z = bitconverter.ToSingle(bytes, offset + 8),
				p2x = bitconverter.ToSingle(bytes, offset + 12),
				p2y = bitconverter.ToSingle(bytes, offset + 16),
				p2z = bitconverter.ToSingle(bytes, offset + 20),
				frame = bytes[offset + 24],
			};
		}

		internal static MavlinkMessage Deserialize_ATTITUDE_QUATERNION_COV(byte[] bytes, int offset)
		{
			return new Msg_attitude_quaternion_cov
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				q =  ByteArrayUtil.ToSingle(bytes, offset + 8, 4),
				rollspeed = bitconverter.ToSingle(bytes, offset + 24),
				pitchspeed = bitconverter.ToSingle(bytes, offset + 28),
				yawspeed = bitconverter.ToSingle(bytes, offset + 32),
				covariance =  ByteArrayUtil.ToSingle(bytes, offset + 36, 9),
			};
		}

		internal static MavlinkMessage Deserialize_NAV_CONTROLLER_OUTPUT(byte[] bytes, int offset)
		{
			return new Msg_nav_controller_output
			{
				nav_roll = bitconverter.ToSingle(bytes, offset + 0),
				nav_pitch = bitconverter.ToSingle(bytes, offset + 4),
				alt_error = bitconverter.ToSingle(bytes, offset + 8),
				aspd_error = bitconverter.ToSingle(bytes, offset + 12),
				xtrack_error = bitconverter.ToSingle(bytes, offset + 16),
				nav_bearing = bitconverter.ToInt16(bytes, offset + 20),
				target_bearing = bitconverter.ToInt16(bytes, offset + 22),
				wp_dist = bitconverter.ToUInt16(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_GLOBAL_POSITION_INT_COV(byte[] bytes, int offset)
		{
			return new Msg_global_position_int_cov
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 8),
				lon = bitconverter.ToInt32(bytes, offset + 12),
				alt = bitconverter.ToInt32(bytes, offset + 16),
				relative_alt = bitconverter.ToInt32(bytes, offset + 20),
				vx = bitconverter.ToSingle(bytes, offset + 24),
				vy = bitconverter.ToSingle(bytes, offset + 28),
				vz = bitconverter.ToSingle(bytes, offset + 32),
				covariance =  ByteArrayUtil.ToSingle(bytes, offset + 36, 36),
				estimator_type = bytes[offset + 180],
			};
		}

		internal static MavlinkMessage Deserialize_LOCAL_POSITION_NED_COV(byte[] bytes, int offset)
		{
			return new Msg_local_position_ned_cov
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 8),
				y = bitconverter.ToSingle(bytes, offset + 12),
				z = bitconverter.ToSingle(bytes, offset + 16),
				vx = bitconverter.ToSingle(bytes, offset + 20),
				vy = bitconverter.ToSingle(bytes, offset + 24),
				vz = bitconverter.ToSingle(bytes, offset + 28),
				ax = bitconverter.ToSingle(bytes, offset + 32),
				ay = bitconverter.ToSingle(bytes, offset + 36),
				az = bitconverter.ToSingle(bytes, offset + 40),
				covariance =  ByteArrayUtil.ToSingle(bytes, offset + 44, 45),
				estimator_type = bytes[offset + 224],
			};
		}

		internal static MavlinkMessage Deserialize_RC_CHANNELS(byte[] bytes, int offset)
		{
			return new Msg_rc_channels
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				chan1_raw = bitconverter.ToUInt16(bytes, offset + 4),
				chan2_raw = bitconverter.ToUInt16(bytes, offset + 6),
				chan3_raw = bitconverter.ToUInt16(bytes, offset + 8),
				chan4_raw = bitconverter.ToUInt16(bytes, offset + 10),
				chan5_raw = bitconverter.ToUInt16(bytes, offset + 12),
				chan6_raw = bitconverter.ToUInt16(bytes, offset + 14),
				chan7_raw = bitconverter.ToUInt16(bytes, offset + 16),
				chan8_raw = bitconverter.ToUInt16(bytes, offset + 18),
				chan9_raw = bitconverter.ToUInt16(bytes, offset + 20),
				chan10_raw = bitconverter.ToUInt16(bytes, offset + 22),
				chan11_raw = bitconverter.ToUInt16(bytes, offset + 24),
				chan12_raw = bitconverter.ToUInt16(bytes, offset + 26),
				chan13_raw = bitconverter.ToUInt16(bytes, offset + 28),
				chan14_raw = bitconverter.ToUInt16(bytes, offset + 30),
				chan15_raw = bitconverter.ToUInt16(bytes, offset + 32),
				chan16_raw = bitconverter.ToUInt16(bytes, offset + 34),
				chan17_raw = bitconverter.ToUInt16(bytes, offset + 36),
				chan18_raw = bitconverter.ToUInt16(bytes, offset + 38),
				chancount = bytes[offset + 40],
				rssi = bytes[offset + 41],
			};
		}

		internal static MavlinkMessage Deserialize_REQUEST_DATA_STREAM(byte[] bytes, int offset)
		{
			return new Msg_request_data_stream
			{
				req_message_rate = bitconverter.ToUInt16(bytes, offset + 0),
				target_system = bytes[offset + 2],
				target_component = bytes[offset + 3],
				req_stream_id = bytes[offset + 4],
				start_stop = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_DATA_STREAM(byte[] bytes, int offset)
		{
			return new Msg_data_stream
			{
				message_rate = bitconverter.ToUInt16(bytes, offset + 0),
				stream_id = bytes[offset + 2],
				on_off = bytes[offset + 3],
			};
		}

		internal static MavlinkMessage Deserialize_MANUAL_CONTROL(byte[] bytes, int offset)
		{
			return new Msg_manual_control
			{
				x = bitconverter.ToInt16(bytes, offset + 0),
				y = bitconverter.ToInt16(bytes, offset + 2),
				z = bitconverter.ToInt16(bytes, offset + 4),
				r = bitconverter.ToInt16(bytes, offset + 6),
				buttons = bitconverter.ToUInt16(bytes, offset + 8),
				target = bytes[offset + 10],
			};
		}

		internal static MavlinkMessage Deserialize_RC_CHANNELS_OVERRIDE(byte[] bytes, int offset)
		{
			return new Msg_rc_channels_override
			{
				chan1_raw = bitconverter.ToUInt16(bytes, offset + 0),
				chan2_raw = bitconverter.ToUInt16(bytes, offset + 2),
				chan3_raw = bitconverter.ToUInt16(bytes, offset + 4),
				chan4_raw = bitconverter.ToUInt16(bytes, offset + 6),
				chan5_raw = bitconverter.ToUInt16(bytes, offset + 8),
				chan6_raw = bitconverter.ToUInt16(bytes, offset + 10),
				chan7_raw = bitconverter.ToUInt16(bytes, offset + 12),
				chan8_raw = bitconverter.ToUInt16(bytes, offset + 14),
				target_system = bytes[offset + 16],
				target_component = bytes[offset + 17],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_ITEM_INT(byte[] bytes, int offset)
		{
			return new Msg_mission_item_int
			{
				param1 = bitconverter.ToSingle(bytes, offset + 0),
				param2 = bitconverter.ToSingle(bytes, offset + 4),
				param3 = bitconverter.ToSingle(bytes, offset + 8),
				param4 = bitconverter.ToSingle(bytes, offset + 12),
				x = bitconverter.ToInt32(bytes, offset + 16),
				y = bitconverter.ToInt32(bytes, offset + 20),
				z = bitconverter.ToSingle(bytes, offset + 24),
				seq = bitconverter.ToUInt16(bytes, offset + 28),
				command = bitconverter.ToUInt16(bytes, offset + 30),
				target_system = bytes[offset + 32],
				target_component = bytes[offset + 33],
				frame = bytes[offset + 34],
				current = bytes[offset + 35],
				autocontinue = bytes[offset + 36],
			};
		}

		internal static MavlinkMessage Deserialize_VFR_HUD(byte[] bytes, int offset)
		{
			return new Msg_vfr_hud
			{
				airspeed = bitconverter.ToSingle(bytes, offset + 0),
				groundspeed = bitconverter.ToSingle(bytes, offset + 4),
				alt = bitconverter.ToSingle(bytes, offset + 8),
				climb = bitconverter.ToSingle(bytes, offset + 12),
				heading = bitconverter.ToInt16(bytes, offset + 16),
				throttle = bitconverter.ToUInt16(bytes, offset + 18),
			};
		}

		internal static MavlinkMessage Deserialize_COMMAND_INT(byte[] bytes, int offset)
		{
			return new Msg_command_int
			{
				param1 = bitconverter.ToSingle(bytes, offset + 0),
				param2 = bitconverter.ToSingle(bytes, offset + 4),
				param3 = bitconverter.ToSingle(bytes, offset + 8),
				param4 = bitconverter.ToSingle(bytes, offset + 12),
				x = bitconverter.ToInt32(bytes, offset + 16),
				y = bitconverter.ToInt32(bytes, offset + 20),
				z = bitconverter.ToSingle(bytes, offset + 24),
				command = bitconverter.ToUInt16(bytes, offset + 28),
				target_system = bytes[offset + 30],
				target_component = bytes[offset + 31],
				frame = bytes[offset + 32],
				current = bytes[offset + 33],
				autocontinue = bytes[offset + 34],
			};
		}

		internal static MavlinkMessage Deserialize_COMMAND_LONG(byte[] bytes, int offset)
		{
			return new Msg_command_long
			{
				param1 = bitconverter.ToSingle(bytes, offset + 0),
				param2 = bitconverter.ToSingle(bytes, offset + 4),
				param3 = bitconverter.ToSingle(bytes, offset + 8),
				param4 = bitconverter.ToSingle(bytes, offset + 12),
				param5 = bitconverter.ToSingle(bytes, offset + 16),
				param6 = bitconverter.ToSingle(bytes, offset + 20),
				param7 = bitconverter.ToSingle(bytes, offset + 24),
				command = bitconverter.ToUInt16(bytes, offset + 28),
				target_system = bytes[offset + 30],
				target_component = bytes[offset + 31],
				confirmation = bytes[offset + 32],
			};
		}

		internal static MavlinkMessage Deserialize_COMMAND_ACK(byte[] bytes, int offset)
		{
			return new Msg_command_ack
			{
				command = bitconverter.ToUInt16(bytes, offset + 0),
				result = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_MANUAL_SETPOINT(byte[] bytes, int offset)
		{
			return new Msg_manual_setpoint
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				roll = bitconverter.ToSingle(bytes, offset + 4),
				pitch = bitconverter.ToSingle(bytes, offset + 8),
				yaw = bitconverter.ToSingle(bytes, offset + 12),
				thrust = bitconverter.ToSingle(bytes, offset + 16),
				mode_switch = bytes[offset + 20],
				manual_override_switch = bytes[offset + 21],
			};
		}

		internal static MavlinkMessage Deserialize_SET_ATTITUDE_TARGET(byte[] bytes, int offset)
		{
			return new Msg_set_attitude_target
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				q =  ByteArrayUtil.ToSingle(bytes, offset + 4, 4),
				body_roll_rate = bitconverter.ToSingle(bytes, offset + 20),
				body_pitch_rate = bitconverter.ToSingle(bytes, offset + 24),
				body_yaw_rate = bitconverter.ToSingle(bytes, offset + 28),
				thrust = bitconverter.ToSingle(bytes, offset + 32),
				target_system = bytes[offset + 36],
				target_component = bytes[offset + 37],
				type_mask = bytes[offset + 38],
			};
		}

		internal static MavlinkMessage Deserialize_ATTITUDE_TARGET(byte[] bytes, int offset)
		{
			return new Msg_attitude_target
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				q =  ByteArrayUtil.ToSingle(bytes, offset + 4, 4),
				body_roll_rate = bitconverter.ToSingle(bytes, offset + 20),
				body_pitch_rate = bitconverter.ToSingle(bytes, offset + 24),
				body_yaw_rate = bitconverter.ToSingle(bytes, offset + 28),
				thrust = bitconverter.ToSingle(bytes, offset + 32),
				type_mask = bytes[offset + 36],
			};
		}

		internal static MavlinkMessage Deserialize_SET_POSITION_TARGET_LOCAL_NED(byte[] bytes, int offset)
		{
			return new Msg_set_position_target_local_ned
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 4),
				y = bitconverter.ToSingle(bytes, offset + 8),
				z = bitconverter.ToSingle(bytes, offset + 12),
				vx = bitconverter.ToSingle(bytes, offset + 16),
				vy = bitconverter.ToSingle(bytes, offset + 20),
				vz = bitconverter.ToSingle(bytes, offset + 24),
				afx = bitconverter.ToSingle(bytes, offset + 28),
				afy = bitconverter.ToSingle(bytes, offset + 32),
				afz = bitconverter.ToSingle(bytes, offset + 36),
				yaw = bitconverter.ToSingle(bytes, offset + 40),
				yaw_rate = bitconverter.ToSingle(bytes, offset + 44),
				type_mask = bitconverter.ToUInt16(bytes, offset + 48),
				target_system = bytes[offset + 50],
				target_component = bytes[offset + 51],
				coordinate_frame = bytes[offset + 52],
			};
		}

		internal static MavlinkMessage Deserialize_POSITION_TARGET_LOCAL_NED(byte[] bytes, int offset)
		{
			return new Msg_position_target_local_ned
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 4),
				y = bitconverter.ToSingle(bytes, offset + 8),
				z = bitconverter.ToSingle(bytes, offset + 12),
				vx = bitconverter.ToSingle(bytes, offset + 16),
				vy = bitconverter.ToSingle(bytes, offset + 20),
				vz = bitconverter.ToSingle(bytes, offset + 24),
				afx = bitconverter.ToSingle(bytes, offset + 28),
				afy = bitconverter.ToSingle(bytes, offset + 32),
				afz = bitconverter.ToSingle(bytes, offset + 36),
				yaw = bitconverter.ToSingle(bytes, offset + 40),
				yaw_rate = bitconverter.ToSingle(bytes, offset + 44),
				type_mask = bitconverter.ToUInt16(bytes, offset + 48),
				coordinate_frame = bytes[offset + 50],
			};
		}

		internal static MavlinkMessage Deserialize_SET_POSITION_TARGET_GLOBAL_INT(byte[] bytes, int offset)
		{
			return new Msg_set_position_target_global_int
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				lat_int = bitconverter.ToInt32(bytes, offset + 4),
				lon_int = bitconverter.ToInt32(bytes, offset + 8),
				alt = bitconverter.ToSingle(bytes, offset + 12),
				vx = bitconverter.ToSingle(bytes, offset + 16),
				vy = bitconverter.ToSingle(bytes, offset + 20),
				vz = bitconverter.ToSingle(bytes, offset + 24),
				afx = bitconverter.ToSingle(bytes, offset + 28),
				afy = bitconverter.ToSingle(bytes, offset + 32),
				afz = bitconverter.ToSingle(bytes, offset + 36),
				yaw = bitconverter.ToSingle(bytes, offset + 40),
				yaw_rate = bitconverter.ToSingle(bytes, offset + 44),
				type_mask = bitconverter.ToUInt16(bytes, offset + 48),
				target_system = bytes[offset + 50],
				target_component = bytes[offset + 51],
				coordinate_frame = bytes[offset + 52],
			};
		}

		internal static MavlinkMessage Deserialize_POSITION_TARGET_GLOBAL_INT(byte[] bytes, int offset)
		{
			return new Msg_position_target_global_int
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				lat_int = bitconverter.ToInt32(bytes, offset + 4),
				lon_int = bitconverter.ToInt32(bytes, offset + 8),
				alt = bitconverter.ToSingle(bytes, offset + 12),
				vx = bitconverter.ToSingle(bytes, offset + 16),
				vy = bitconverter.ToSingle(bytes, offset + 20),
				vz = bitconverter.ToSingle(bytes, offset + 24),
				afx = bitconverter.ToSingle(bytes, offset + 28),
				afy = bitconverter.ToSingle(bytes, offset + 32),
				afz = bitconverter.ToSingle(bytes, offset + 36),
				yaw = bitconverter.ToSingle(bytes, offset + 40),
				yaw_rate = bitconverter.ToSingle(bytes, offset + 44),
				type_mask = bitconverter.ToUInt16(bytes, offset + 48),
				coordinate_frame = bytes[offset + 50],
			};
		}

		internal static MavlinkMessage Deserialize_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(byte[] bytes, int offset)
		{
			return new Msg_local_position_ned_system_global_offset
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 4),
				y = bitconverter.ToSingle(bytes, offset + 8),
				z = bitconverter.ToSingle(bytes, offset + 12),
				roll = bitconverter.ToSingle(bytes, offset + 16),
				pitch = bitconverter.ToSingle(bytes, offset + 20),
				yaw = bitconverter.ToSingle(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_HIL_STATE(byte[] bytes, int offset)
		{
			return new Msg_hil_state
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				roll = bitconverter.ToSingle(bytes, offset + 8),
				pitch = bitconverter.ToSingle(bytes, offset + 12),
				yaw = bitconverter.ToSingle(bytes, offset + 16),
				rollspeed = bitconverter.ToSingle(bytes, offset + 20),
				pitchspeed = bitconverter.ToSingle(bytes, offset + 24),
				yawspeed = bitconverter.ToSingle(bytes, offset + 28),
				lat = bitconverter.ToInt32(bytes, offset + 32),
				lon = bitconverter.ToInt32(bytes, offset + 36),
				alt = bitconverter.ToInt32(bytes, offset + 40),
				vx = bitconverter.ToInt16(bytes, offset + 44),
				vy = bitconverter.ToInt16(bytes, offset + 46),
				vz = bitconverter.ToInt16(bytes, offset + 48),
				xacc = bitconverter.ToInt16(bytes, offset + 50),
				yacc = bitconverter.ToInt16(bytes, offset + 52),
				zacc = bitconverter.ToInt16(bytes, offset + 54),
			};
		}

		internal static MavlinkMessage Deserialize_HIL_CONTROLS(byte[] bytes, int offset)
		{
			return new Msg_hil_controls
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				roll_ailerons = bitconverter.ToSingle(bytes, offset + 8),
				pitch_elevator = bitconverter.ToSingle(bytes, offset + 12),
				yaw_rudder = bitconverter.ToSingle(bytes, offset + 16),
				throttle = bitconverter.ToSingle(bytes, offset + 20),
				aux1 = bitconverter.ToSingle(bytes, offset + 24),
				aux2 = bitconverter.ToSingle(bytes, offset + 28),
				aux3 = bitconverter.ToSingle(bytes, offset + 32),
				aux4 = bitconverter.ToSingle(bytes, offset + 36),
				mode = bytes[offset + 40],
				nav_mode = bytes[offset + 41],
			};
		}

		internal static MavlinkMessage Deserialize_HIL_RC_INPUTS_RAW(byte[] bytes, int offset)
		{
			return new Msg_hil_rc_inputs_raw
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				chan1_raw = bitconverter.ToUInt16(bytes, offset + 8),
				chan2_raw = bitconverter.ToUInt16(bytes, offset + 10),
				chan3_raw = bitconverter.ToUInt16(bytes, offset + 12),
				chan4_raw = bitconverter.ToUInt16(bytes, offset + 14),
				chan5_raw = bitconverter.ToUInt16(bytes, offset + 16),
				chan6_raw = bitconverter.ToUInt16(bytes, offset + 18),
				chan7_raw = bitconverter.ToUInt16(bytes, offset + 20),
				chan8_raw = bitconverter.ToUInt16(bytes, offset + 22),
				chan9_raw = bitconverter.ToUInt16(bytes, offset + 24),
				chan10_raw = bitconverter.ToUInt16(bytes, offset + 26),
				chan11_raw = bitconverter.ToUInt16(bytes, offset + 28),
				chan12_raw = bitconverter.ToUInt16(bytes, offset + 30),
				rssi = bytes[offset + 32],
			};
		}

		internal static MavlinkMessage Deserialize_HIL_ACTUATOR_CONTROLS(byte[] bytes, int offset)
		{
			return new Msg_hil_actuator_controls
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				flags = bitconverter.ToUInt64(bytes, offset + 8),
				controls =  ByteArrayUtil.ToSingle(bytes, offset + 16, 16),
				mode = bytes[offset + 80],
			};
		}

		internal static MavlinkMessage Deserialize_OPTICAL_FLOW(byte[] bytes, int offset)
		{
			return new Msg_optical_flow
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				flow_comp_m_x = bitconverter.ToSingle(bytes, offset + 8),
				flow_comp_m_y = bitconverter.ToSingle(bytes, offset + 12),
				ground_distance = bitconverter.ToSingle(bytes, offset + 16),
				flow_x = bitconverter.ToInt16(bytes, offset + 20),
				flow_y = bitconverter.ToInt16(bytes, offset + 22),
				sensor_id = bytes[offset + 24],
				quality = bytes[offset + 25],
			};
		}

		internal static MavlinkMessage Deserialize_GLOBAL_VISION_POSITION_ESTIMATE(byte[] bytes, int offset)
		{
			return new Msg_global_vision_position_estimate
			{
				usec = bitconverter.ToUInt64(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 8),
				y = bitconverter.ToSingle(bytes, offset + 12),
				z = bitconverter.ToSingle(bytes, offset + 16),
				roll = bitconverter.ToSingle(bytes, offset + 20),
				pitch = bitconverter.ToSingle(bytes, offset + 24),
				yaw = bitconverter.ToSingle(bytes, offset + 28),
			};
		}

		internal static MavlinkMessage Deserialize_VISION_POSITION_ESTIMATE(byte[] bytes, int offset)
		{
			return new Msg_vision_position_estimate
			{
				usec = bitconverter.ToUInt64(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 8),
				y = bitconverter.ToSingle(bytes, offset + 12),
				z = bitconverter.ToSingle(bytes, offset + 16),
				roll = bitconverter.ToSingle(bytes, offset + 20),
				pitch = bitconverter.ToSingle(bytes, offset + 24),
				yaw = bitconverter.ToSingle(bytes, offset + 28),
			};
		}

		internal static MavlinkMessage Deserialize_VISION_SPEED_ESTIMATE(byte[] bytes, int offset)
		{
			return new Msg_vision_speed_estimate
			{
				usec = bitconverter.ToUInt64(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 8),
				y = bitconverter.ToSingle(bytes, offset + 12),
				z = bitconverter.ToSingle(bytes, offset + 16),
			};
		}

		internal static MavlinkMessage Deserialize_VICON_POSITION_ESTIMATE(byte[] bytes, int offset)
		{
			return new Msg_vicon_position_estimate
			{
				usec = bitconverter.ToUInt64(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 8),
				y = bitconverter.ToSingle(bytes, offset + 12),
				z = bitconverter.ToSingle(bytes, offset + 16),
				roll = bitconverter.ToSingle(bytes, offset + 20),
				pitch = bitconverter.ToSingle(bytes, offset + 24),
				yaw = bitconverter.ToSingle(bytes, offset + 28),
			};
		}

		internal static MavlinkMessage Deserialize_HIGHRES_IMU(byte[] bytes, int offset)
		{
			return new Msg_highres_imu
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				xacc = bitconverter.ToSingle(bytes, offset + 8),
				yacc = bitconverter.ToSingle(bytes, offset + 12),
				zacc = bitconverter.ToSingle(bytes, offset + 16),
				xgyro = bitconverter.ToSingle(bytes, offset + 20),
				ygyro = bitconverter.ToSingle(bytes, offset + 24),
				zgyro = bitconverter.ToSingle(bytes, offset + 28),
				xmag = bitconverter.ToSingle(bytes, offset + 32),
				ymag = bitconverter.ToSingle(bytes, offset + 36),
				zmag = bitconverter.ToSingle(bytes, offset + 40),
				abs_pressure = bitconverter.ToSingle(bytes, offset + 44),
				diff_pressure = bitconverter.ToSingle(bytes, offset + 48),
				pressure_alt = bitconverter.ToSingle(bytes, offset + 52),
				temperature = bitconverter.ToSingle(bytes, offset + 56),
				fields_updated = bitconverter.ToUInt16(bytes, offset + 60),
			};
		}

		internal static MavlinkMessage Deserialize_OPTICAL_FLOW_RAD(byte[] bytes, int offset)
		{
			return new Msg_optical_flow_rad
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				integration_time_us = bitconverter.ToUInt32(bytes, offset + 8),
				integrated_x = bitconverter.ToSingle(bytes, offset + 12),
				integrated_y = bitconverter.ToSingle(bytes, offset + 16),
				integrated_xgyro = bitconverter.ToSingle(bytes, offset + 20),
				integrated_ygyro = bitconverter.ToSingle(bytes, offset + 24),
				integrated_zgyro = bitconverter.ToSingle(bytes, offset + 28),
				time_delta_distance_us = bitconverter.ToUInt32(bytes, offset + 32),
				distance = bitconverter.ToSingle(bytes, offset + 36),
				temperature = bitconverter.ToInt16(bytes, offset + 40),
				sensor_id = bytes[offset + 42],
				quality = bytes[offset + 43],
			};
		}

		internal static MavlinkMessage Deserialize_HIL_SENSOR(byte[] bytes, int offset)
		{
			return new Msg_hil_sensor
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				xacc = bitconverter.ToSingle(bytes, offset + 8),
				yacc = bitconverter.ToSingle(bytes, offset + 12),
				zacc = bitconverter.ToSingle(bytes, offset + 16),
				xgyro = bitconverter.ToSingle(bytes, offset + 20),
				ygyro = bitconverter.ToSingle(bytes, offset + 24),
				zgyro = bitconverter.ToSingle(bytes, offset + 28),
				xmag = bitconverter.ToSingle(bytes, offset + 32),
				ymag = bitconverter.ToSingle(bytes, offset + 36),
				zmag = bitconverter.ToSingle(bytes, offset + 40),
				abs_pressure = bitconverter.ToSingle(bytes, offset + 44),
				diff_pressure = bitconverter.ToSingle(bytes, offset + 48),
				pressure_alt = bitconverter.ToSingle(bytes, offset + 52),
				temperature = bitconverter.ToSingle(bytes, offset + 56),
				fields_updated = bitconverter.ToUInt32(bytes, offset + 60),
			};
		}

		internal static MavlinkMessage Deserialize_SIM_STATE(byte[] bytes, int offset)
		{
			return new Msg_sim_state
			{
				q1 = bitconverter.ToSingle(bytes, offset + 0),
				q2 = bitconverter.ToSingle(bytes, offset + 4),
				q3 = bitconverter.ToSingle(bytes, offset + 8),
				q4 = bitconverter.ToSingle(bytes, offset + 12),
				roll = bitconverter.ToSingle(bytes, offset + 16),
				pitch = bitconverter.ToSingle(bytes, offset + 20),
				yaw = bitconverter.ToSingle(bytes, offset + 24),
				xacc = bitconverter.ToSingle(bytes, offset + 28),
				yacc = bitconverter.ToSingle(bytes, offset + 32),
				zacc = bitconverter.ToSingle(bytes, offset + 36),
				xgyro = bitconverter.ToSingle(bytes, offset + 40),
				ygyro = bitconverter.ToSingle(bytes, offset + 44),
				zgyro = bitconverter.ToSingle(bytes, offset + 48),
				lat = bitconverter.ToSingle(bytes, offset + 52),
				lon = bitconverter.ToSingle(bytes, offset + 56),
				alt = bitconverter.ToSingle(bytes, offset + 60),
				std_dev_horz = bitconverter.ToSingle(bytes, offset + 64),
				std_dev_vert = bitconverter.ToSingle(bytes, offset + 68),
				vn = bitconverter.ToSingle(bytes, offset + 72),
				ve = bitconverter.ToSingle(bytes, offset + 76),
				vd = bitconverter.ToSingle(bytes, offset + 80),
			};
		}

		internal static MavlinkMessage Deserialize_RADIO_STATUS(byte[] bytes, int offset)
		{
			return new Msg_radio_status
			{
				rxerrors = bitconverter.ToUInt16(bytes, offset + 0),
				@fixed = bitconverter.ToUInt16(bytes, offset + 2),
				rssi = bytes[offset + 4],
				remrssi = bytes[offset + 5],
				txbuf = bytes[offset + 6],
				noise = bytes[offset + 7],
				remnoise = bytes[offset + 8],
			};
		}

		internal static MavlinkMessage Deserialize_FILE_TRANSFER_PROTOCOL(byte[] bytes, int offset)
		{
			return new Msg_file_transfer_protocol
			{
				target_network = bytes[offset + 0],
				target_system = bytes[offset + 1],
				target_component = bytes[offset + 2],
				payload =  ByteArrayUtil.ToUInt8(bytes, offset + 3, 251),
			};
		}

		internal static MavlinkMessage Deserialize_TIMESYNC(byte[] bytes, int offset)
		{
			return new Msg_timesync
			{
				tc1 = bitconverter.ToInt64(bytes, offset + 0),
				ts1 = bitconverter.ToInt64(bytes, offset + 8),
			};
		}

		internal static MavlinkMessage Deserialize_CAMERA_TRIGGER(byte[] bytes, int offset)
		{
			return new Msg_camera_trigger
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				seq = bitconverter.ToUInt32(bytes, offset + 8),
			};
		}

		internal static MavlinkMessage Deserialize_HIL_GPS(byte[] bytes, int offset)
		{
			return new Msg_hil_gps
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 8),
				lon = bitconverter.ToInt32(bytes, offset + 12),
				alt = bitconverter.ToInt32(bytes, offset + 16),
				eph = bitconverter.ToUInt16(bytes, offset + 20),
				epv = bitconverter.ToUInt16(bytes, offset + 22),
				vel = bitconverter.ToUInt16(bytes, offset + 24),
				vn = bitconverter.ToInt16(bytes, offset + 26),
				ve = bitconverter.ToInt16(bytes, offset + 28),
				vd = bitconverter.ToInt16(bytes, offset + 30),
				cog = bitconverter.ToUInt16(bytes, offset + 32),
				fix_type = bytes[offset + 34],
				satellites_visible = bytes[offset + 35],
			};
		}

		internal static MavlinkMessage Deserialize_HIL_OPTICAL_FLOW(byte[] bytes, int offset)
		{
			return new Msg_hil_optical_flow
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				integration_time_us = bitconverter.ToUInt32(bytes, offset + 8),
				integrated_x = bitconverter.ToSingle(bytes, offset + 12),
				integrated_y = bitconverter.ToSingle(bytes, offset + 16),
				integrated_xgyro = bitconverter.ToSingle(bytes, offset + 20),
				integrated_ygyro = bitconverter.ToSingle(bytes, offset + 24),
				integrated_zgyro = bitconverter.ToSingle(bytes, offset + 28),
				time_delta_distance_us = bitconverter.ToUInt32(bytes, offset + 32),
				distance = bitconverter.ToSingle(bytes, offset + 36),
				temperature = bitconverter.ToInt16(bytes, offset + 40),
				sensor_id = bytes[offset + 42],
				quality = bytes[offset + 43],
			};
		}

		internal static MavlinkMessage Deserialize_HIL_STATE_QUATERNION(byte[] bytes, int offset)
		{
			return new Msg_hil_state_quaternion
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				attitude_quaternion =  ByteArrayUtil.ToSingle(bytes, offset + 8, 4),
				rollspeed = bitconverter.ToSingle(bytes, offset + 24),
				pitchspeed = bitconverter.ToSingle(bytes, offset + 28),
				yawspeed = bitconverter.ToSingle(bytes, offset + 32),
				lat = bitconverter.ToInt32(bytes, offset + 36),
				lon = bitconverter.ToInt32(bytes, offset + 40),
				alt = bitconverter.ToInt32(bytes, offset + 44),
				vx = bitconverter.ToInt16(bytes, offset + 48),
				vy = bitconverter.ToInt16(bytes, offset + 50),
				vz = bitconverter.ToInt16(bytes, offset + 52),
				ind_airspeed = bitconverter.ToUInt16(bytes, offset + 54),
				true_airspeed = bitconverter.ToUInt16(bytes, offset + 56),
				xacc = bitconverter.ToInt16(bytes, offset + 58),
				yacc = bitconverter.ToInt16(bytes, offset + 60),
				zacc = bitconverter.ToInt16(bytes, offset + 62),
			};
		}

		internal static MavlinkMessage Deserialize_SCALED_IMU2(byte[] bytes, int offset)
		{
			return new Msg_scaled_imu2
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				xacc = bitconverter.ToInt16(bytes, offset + 4),
				yacc = bitconverter.ToInt16(bytes, offset + 6),
				zacc = bitconverter.ToInt16(bytes, offset + 8),
				xgyro = bitconverter.ToInt16(bytes, offset + 10),
				ygyro = bitconverter.ToInt16(bytes, offset + 12),
				zgyro = bitconverter.ToInt16(bytes, offset + 14),
				xmag = bitconverter.ToInt16(bytes, offset + 16),
				ymag = bitconverter.ToInt16(bytes, offset + 18),
				zmag = bitconverter.ToInt16(bytes, offset + 20),
			};
		}

		internal static MavlinkMessage Deserialize_LOG_REQUEST_LIST(byte[] bytes, int offset)
		{
			return new Msg_log_request_list
			{
				start = bitconverter.ToUInt16(bytes, offset + 0),
				end = bitconverter.ToUInt16(bytes, offset + 2),
				target_system = bytes[offset + 4],
				target_component = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_LOG_ENTRY(byte[] bytes, int offset)
		{
			return new Msg_log_entry
			{
				time_utc = bitconverter.ToUInt32(bytes, offset + 0),
				size = bitconverter.ToUInt32(bytes, offset + 4),
				id = bitconverter.ToUInt16(bytes, offset + 8),
				num_logs = bitconverter.ToUInt16(bytes, offset + 10),
				last_log_num = bitconverter.ToUInt16(bytes, offset + 12),
			};
		}

		internal static MavlinkMessage Deserialize_LOG_REQUEST_DATA(byte[] bytes, int offset)
		{
			return new Msg_log_request_data
			{
				ofs = bitconverter.ToUInt32(bytes, offset + 0),
				count = bitconverter.ToUInt32(bytes, offset + 4),
				id = bitconverter.ToUInt16(bytes, offset + 8),
				target_system = bytes[offset + 10],
				target_component = bytes[offset + 11],
			};
		}

		internal static MavlinkMessage Deserialize_LOG_DATA(byte[] bytes, int offset)
		{
			return new Msg_log_data
			{
				ofs = bitconverter.ToUInt32(bytes, offset + 0),
				id = bitconverter.ToUInt16(bytes, offset + 4),
				count = bytes[offset + 6],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 7, 90),
			};
		}

		internal static MavlinkMessage Deserialize_LOG_ERASE(byte[] bytes, int offset)
		{
			return new Msg_log_erase
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_LOG_REQUEST_END(byte[] bytes, int offset)
		{
			return new Msg_log_request_end
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_GPS_INJECT_DATA(byte[] bytes, int offset)
		{
			return new Msg_gps_inject_data
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				len = bytes[offset + 2],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 3, 110),
			};
		}

		internal static MavlinkMessage Deserialize_GPS2_RAW(byte[] bytes, int offset)
		{
			return new Msg_gps2_raw
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 8),
				lon = bitconverter.ToInt32(bytes, offset + 12),
				alt = bitconverter.ToInt32(bytes, offset + 16),
				dgps_age = bitconverter.ToUInt32(bytes, offset + 20),
				eph = bitconverter.ToUInt16(bytes, offset + 24),
				epv = bitconverter.ToUInt16(bytes, offset + 26),
				vel = bitconverter.ToUInt16(bytes, offset + 28),
				cog = bitconverter.ToUInt16(bytes, offset + 30),
				fix_type = bytes[offset + 32],
				satellites_visible = bytes[offset + 33],
				dgps_numch = bytes[offset + 34],
			};
		}

		internal static MavlinkMessage Deserialize_POWER_STATUS(byte[] bytes, int offset)
		{
			return new Msg_power_status
			{
				Vcc = bitconverter.ToUInt16(bytes, offset + 0),
				Vservo = bitconverter.ToUInt16(bytes, offset + 2),
				flags = bitconverter.ToUInt16(bytes, offset + 4),
			};
		}

		internal static MavlinkMessage Deserialize_SERIAL_CONTROL(byte[] bytes, int offset)
		{
			return new Msg_serial_control
			{
				baudrate = bitconverter.ToUInt32(bytes, offset + 0),
				timeout = bitconverter.ToUInt16(bytes, offset + 4),
				device = bytes[offset + 6],
				flags = bytes[offset + 7],
				count = bytes[offset + 8],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 9, 70),
			};
		}

		internal static MavlinkMessage Deserialize_GPS_RTK(byte[] bytes, int offset)
		{
			return new Msg_gps_rtk
			{
				time_last_baseline_ms = bitconverter.ToUInt32(bytes, offset + 0),
				tow = bitconverter.ToUInt32(bytes, offset + 4),
				baseline_a_mm = bitconverter.ToInt32(bytes, offset + 8),
				baseline_b_mm = bitconverter.ToInt32(bytes, offset + 12),
				baseline_c_mm = bitconverter.ToInt32(bytes, offset + 16),
				accuracy = bitconverter.ToUInt32(bytes, offset + 20),
				iar_num_hypotheses = bitconverter.ToInt32(bytes, offset + 24),
				wn = bitconverter.ToUInt16(bytes, offset + 28),
				rtk_receiver_id = bytes[offset + 30],
				rtk_health = bytes[offset + 31],
				rtk_rate = bytes[offset + 32],
				nsats = bytes[offset + 33],
				baseline_coords_type = bytes[offset + 34],
			};
		}

		internal static MavlinkMessage Deserialize_GPS2_RTK(byte[] bytes, int offset)
		{
			return new Msg_gps2_rtk
			{
				time_last_baseline_ms = bitconverter.ToUInt32(bytes, offset + 0),
				tow = bitconverter.ToUInt32(bytes, offset + 4),
				baseline_a_mm = bitconverter.ToInt32(bytes, offset + 8),
				baseline_b_mm = bitconverter.ToInt32(bytes, offset + 12),
				baseline_c_mm = bitconverter.ToInt32(bytes, offset + 16),
				accuracy = bitconverter.ToUInt32(bytes, offset + 20),
				iar_num_hypotheses = bitconverter.ToInt32(bytes, offset + 24),
				wn = bitconverter.ToUInt16(bytes, offset + 28),
				rtk_receiver_id = bytes[offset + 30],
				rtk_health = bytes[offset + 31],
				rtk_rate = bytes[offset + 32],
				nsats = bytes[offset + 33],
				baseline_coords_type = bytes[offset + 34],
			};
		}

		internal static MavlinkMessage Deserialize_SCALED_IMU3(byte[] bytes, int offset)
		{
			return new Msg_scaled_imu3
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				xacc = bitconverter.ToInt16(bytes, offset + 4),
				yacc = bitconverter.ToInt16(bytes, offset + 6),
				zacc = bitconverter.ToInt16(bytes, offset + 8),
				xgyro = bitconverter.ToInt16(bytes, offset + 10),
				ygyro = bitconverter.ToInt16(bytes, offset + 12),
				zgyro = bitconverter.ToInt16(bytes, offset + 14),
				xmag = bitconverter.ToInt16(bytes, offset + 16),
				ymag = bitconverter.ToInt16(bytes, offset + 18),
				zmag = bitconverter.ToInt16(bytes, offset + 20),
			};
		}

		internal static MavlinkMessage Deserialize_DATA_TRANSMISSION_HANDSHAKE(byte[] bytes, int offset)
		{
			return new Msg_data_transmission_handshake
			{
				size = bitconverter.ToUInt32(bytes, offset + 0),
				width = bitconverter.ToUInt16(bytes, offset + 4),
				height = bitconverter.ToUInt16(bytes, offset + 6),
				packets = bitconverter.ToUInt16(bytes, offset + 8),
				type = bytes[offset + 10],
				payload = bytes[offset + 11],
				jpg_quality = bytes[offset + 12],
			};
		}

		internal static MavlinkMessage Deserialize_ENCAPSULATED_DATA(byte[] bytes, int offset)
		{
			return new Msg_encapsulated_data
			{
				seqnr = bitconverter.ToUInt16(bytes, offset + 0),
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 253),
			};
		}

		internal static MavlinkMessage Deserialize_DISTANCE_SENSOR(byte[] bytes, int offset)
		{
			return new Msg_distance_sensor
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				min_distance = bitconverter.ToUInt16(bytes, offset + 4),
				max_distance = bitconverter.ToUInt16(bytes, offset + 6),
				current_distance = bitconverter.ToUInt16(bytes, offset + 8),
				type = bytes[offset + 10],
				id = bytes[offset + 11],
				orientation = bytes[offset + 12],
				covariance = bytes[offset + 13],
			};
		}

		internal static MavlinkMessage Deserialize_TERRAIN_REQUEST(byte[] bytes, int offset)
		{
			return new Msg_terrain_request
			{
				mask = bitconverter.ToUInt64(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 8),
				lon = bitconverter.ToInt32(bytes, offset + 12),
				grid_spacing = bitconverter.ToUInt16(bytes, offset + 16),
			};
		}

		internal static MavlinkMessage Deserialize_TERRAIN_DATA(byte[] bytes, int offset)
		{
			return new Msg_terrain_data
			{
				lat = bitconverter.ToInt32(bytes, offset + 0),
				lon = bitconverter.ToInt32(bytes, offset + 4),
				grid_spacing = bitconverter.ToUInt16(bytes, offset + 8),
				data =  ByteArrayUtil.ToInt16(bytes, offset + 10, 16),
				gridbit = bytes[offset + 42],
			};
		}

		internal static MavlinkMessage Deserialize_TERRAIN_CHECK(byte[] bytes, int offset)
		{
			return new Msg_terrain_check
			{
				lat = bitconverter.ToInt32(bytes, offset + 0),
				lon = bitconverter.ToInt32(bytes, offset + 4),
			};
		}

		internal static MavlinkMessage Deserialize_TERRAIN_REPORT(byte[] bytes, int offset)
		{
			return new Msg_terrain_report
			{
				lat = bitconverter.ToInt32(bytes, offset + 0),
				lon = bitconverter.ToInt32(bytes, offset + 4),
				terrain_height = bitconverter.ToSingle(bytes, offset + 8),
				current_height = bitconverter.ToSingle(bytes, offset + 12),
				spacing = bitconverter.ToUInt16(bytes, offset + 16),
				pending = bitconverter.ToUInt16(bytes, offset + 18),
				loaded = bitconverter.ToUInt16(bytes, offset + 20),
			};
		}

		internal static MavlinkMessage Deserialize_SCALED_PRESSURE2(byte[] bytes, int offset)
		{
			return new Msg_scaled_pressure2
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				press_abs = bitconverter.ToSingle(bytes, offset + 4),
				press_diff = bitconverter.ToSingle(bytes, offset + 8),
				temperature = bitconverter.ToInt16(bytes, offset + 12),
			};
		}

		internal static MavlinkMessage Deserialize_ATT_POS_MOCAP(byte[] bytes, int offset)
		{
			return new Msg_att_pos_mocap
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				q =  ByteArrayUtil.ToSingle(bytes, offset + 8, 4),
				x = bitconverter.ToSingle(bytes, offset + 24),
				y = bitconverter.ToSingle(bytes, offset + 28),
				z = bitconverter.ToSingle(bytes, offset + 32),
			};
		}

		internal static MavlinkMessage Deserialize_SET_ACTUATOR_CONTROL_TARGET(byte[] bytes, int offset)
		{
			return new Msg_set_actuator_control_target
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				controls =  ByteArrayUtil.ToSingle(bytes, offset + 8, 8),
				group_mlx = bytes[offset + 40],
				target_system = bytes[offset + 41],
				target_component = bytes[offset + 42],
			};
		}

		internal static MavlinkMessage Deserialize_ACTUATOR_CONTROL_TARGET(byte[] bytes, int offset)
		{
			return new Msg_actuator_control_target
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				controls =  ByteArrayUtil.ToSingle(bytes, offset + 8, 8),
				group_mlx = bytes[offset + 40],
			};
		}

		internal static MavlinkMessage Deserialize_ALTITUDE(byte[] bytes, int offset)
		{
			return new Msg_altitude
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				altitude_monotonic = bitconverter.ToSingle(bytes, offset + 8),
				altitude_amsl = bitconverter.ToSingle(bytes, offset + 12),
				altitude_local = bitconverter.ToSingle(bytes, offset + 16),
				altitude_relative = bitconverter.ToSingle(bytes, offset + 20),
				altitude_terrain = bitconverter.ToSingle(bytes, offset + 24),
				bottom_clearance = bitconverter.ToSingle(bytes, offset + 28),
			};
		}

		internal static MavlinkMessage Deserialize_RESOURCE_REQUEST(byte[] bytes, int offset)
		{
			return new Msg_resource_request
			{
				request_id = bytes[offset + 0],
				uri_type = bytes[offset + 1],
				uri =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 120),
				transfer_type = bytes[offset + 122],
				storage =  ByteArrayUtil.ToUInt8(bytes, offset + 123, 120),
			};
		}

		internal static MavlinkMessage Deserialize_SCALED_PRESSURE3(byte[] bytes, int offset)
		{
			return new Msg_scaled_pressure3
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				press_abs = bitconverter.ToSingle(bytes, offset + 4),
				press_diff = bitconverter.ToSingle(bytes, offset + 8),
				temperature = bitconverter.ToInt16(bytes, offset + 12),
			};
		}

		internal static MavlinkMessage Deserialize_FOLLOW_TARGET(byte[] bytes, int offset)
		{
			return new Msg_follow_target
			{
				timestamp = bitconverter.ToUInt64(bytes, offset + 0),
				custom_state = bitconverter.ToUInt64(bytes, offset + 8),
				lat = bitconverter.ToInt32(bytes, offset + 16),
				lon = bitconverter.ToInt32(bytes, offset + 20),
				alt = bitconverter.ToSingle(bytes, offset + 24),
				vel =  ByteArrayUtil.ToSingle(bytes, offset + 28, 3),
				acc =  ByteArrayUtil.ToSingle(bytes, offset + 40, 3),
				attitude_q =  ByteArrayUtil.ToSingle(bytes, offset + 52, 4),
				rates =  ByteArrayUtil.ToSingle(bytes, offset + 68, 3),
				position_cov =  ByteArrayUtil.ToSingle(bytes, offset + 80, 3),
				est_capabilities = bytes[offset + 92],
			};
		}

		internal static MavlinkMessage Deserialize_CONTROL_SYSTEM_STATE(byte[] bytes, int offset)
		{
			return new Msg_control_system_state
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				x_acc = bitconverter.ToSingle(bytes, offset + 8),
				y_acc = bitconverter.ToSingle(bytes, offset + 12),
				z_acc = bitconverter.ToSingle(bytes, offset + 16),
				x_vel = bitconverter.ToSingle(bytes, offset + 20),
				y_vel = bitconverter.ToSingle(bytes, offset + 24),
				z_vel = bitconverter.ToSingle(bytes, offset + 28),
				x_pos = bitconverter.ToSingle(bytes, offset + 32),
				y_pos = bitconverter.ToSingle(bytes, offset + 36),
				z_pos = bitconverter.ToSingle(bytes, offset + 40),
				airspeed = bitconverter.ToSingle(bytes, offset + 44),
				vel_variance =  ByteArrayUtil.ToSingle(bytes, offset + 48, 3),
				pos_variance =  ByteArrayUtil.ToSingle(bytes, offset + 60, 3),
				q =  ByteArrayUtil.ToSingle(bytes, offset + 72, 4),
				roll_rate = bitconverter.ToSingle(bytes, offset + 88),
				pitch_rate = bitconverter.ToSingle(bytes, offset + 92),
				yaw_rate = bitconverter.ToSingle(bytes, offset + 96),
			};
		}

		internal static MavlinkMessage Deserialize_BATTERY_STATUS(byte[] bytes, int offset)
		{
			return new Msg_battery_status
			{
				current_consumed = bitconverter.ToInt32(bytes, offset + 0),
				energy_consumed = bitconverter.ToInt32(bytes, offset + 4),
				temperature = bitconverter.ToInt16(bytes, offset + 8),
				voltages =  ByteArrayUtil.ToUInt16(bytes, offset + 10, 10),
				current_battery = bitconverter.ToInt16(bytes, offset + 30),
				id = bytes[offset + 32],
				battery_function = bytes[offset + 33],
				type = bytes[offset + 34],
				battery_remaining = bitconverter.ToInt8(bytes, offset + 35),
			};
		}

		internal static MavlinkMessage Deserialize_AUTOPILOT_VERSION(byte[] bytes, int offset)
		{
			return new Msg_autopilot_version
			{
				capabilities = bitconverter.ToUInt64(bytes, offset + 0),
				uid = bitconverter.ToUInt64(bytes, offset + 8),
				flight_sw_version = bitconverter.ToUInt32(bytes, offset + 16),
				middleware_sw_version = bitconverter.ToUInt32(bytes, offset + 20),
				os_sw_version = bitconverter.ToUInt32(bytes, offset + 24),
				board_version = bitconverter.ToUInt32(bytes, offset + 28),
				vendor_id = bitconverter.ToUInt16(bytes, offset + 32),
				product_id = bitconverter.ToUInt16(bytes, offset + 34),
				flight_custom_version =  ByteArrayUtil.ToUInt8(bytes, offset + 36, 8),
				middleware_custom_version =  ByteArrayUtil.ToUInt8(bytes, offset + 44, 8),
				os_custom_version =  ByteArrayUtil.ToUInt8(bytes, offset + 52, 8),
			};
		}

		internal static MavlinkMessage Deserialize_LANDING_TARGET(byte[] bytes, int offset)
		{
			return new Msg_landing_target
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				angle_x = bitconverter.ToSingle(bytes, offset + 8),
				angle_y = bitconverter.ToSingle(bytes, offset + 12),
				distance = bitconverter.ToSingle(bytes, offset + 16),
				size_x = bitconverter.ToSingle(bytes, offset + 20),
				size_y = bitconverter.ToSingle(bytes, offset + 24),
				target_num = bytes[offset + 28],
				frame = bytes[offset + 29],
			};
		}

		internal static MavlinkMessage Deserialize_ESTIMATOR_STATUS(byte[] bytes, int offset)
		{
			return new Msg_estimator_status
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				vel_ratio = bitconverter.ToSingle(bytes, offset + 8),
				pos_horiz_ratio = bitconverter.ToSingle(bytes, offset + 12),
				pos_vert_ratio = bitconverter.ToSingle(bytes, offset + 16),
				mag_ratio = bitconverter.ToSingle(bytes, offset + 20),
				hagl_ratio = bitconverter.ToSingle(bytes, offset + 24),
				tas_ratio = bitconverter.ToSingle(bytes, offset + 28),
				pos_horiz_accuracy = bitconverter.ToSingle(bytes, offset + 32),
				pos_vert_accuracy = bitconverter.ToSingle(bytes, offset + 36),
				flags = bitconverter.ToUInt16(bytes, offset + 40),
			};
		}

		internal static MavlinkMessage Deserialize_WIND_COV(byte[] bytes, int offset)
		{
			return new Msg_wind_cov
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				wind_x = bitconverter.ToSingle(bytes, offset + 8),
				wind_y = bitconverter.ToSingle(bytes, offset + 12),
				wind_z = bitconverter.ToSingle(bytes, offset + 16),
				var_horiz = bitconverter.ToSingle(bytes, offset + 20),
				var_vert = bitconverter.ToSingle(bytes, offset + 24),
				wind_alt = bitconverter.ToSingle(bytes, offset + 28),
				horiz_accuracy = bitconverter.ToSingle(bytes, offset + 32),
				vert_accuracy = bitconverter.ToSingle(bytes, offset + 36),
			};
		}

		internal static MavlinkMessage Deserialize_GPS_INPUT(byte[] bytes, int offset)
		{
			return new Msg_gps_input
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				time_week_ms = bitconverter.ToUInt32(bytes, offset + 8),
				lat = bitconverter.ToInt32(bytes, offset + 12),
				lon = bitconverter.ToInt32(bytes, offset + 16),
				alt = bitconverter.ToSingle(bytes, offset + 20),
				hdop = bitconverter.ToSingle(bytes, offset + 24),
				vdop = bitconverter.ToSingle(bytes, offset + 28),
				vn = bitconverter.ToSingle(bytes, offset + 32),
				ve = bitconverter.ToSingle(bytes, offset + 36),
				vd = bitconverter.ToSingle(bytes, offset + 40),
				speed_accuracy = bitconverter.ToSingle(bytes, offset + 44),
				horiz_accuracy = bitconverter.ToSingle(bytes, offset + 48),
				vert_accuracy = bitconverter.ToSingle(bytes, offset + 52),
				ignore_flags = bitconverter.ToUInt16(bytes, offset + 56),
				time_week = bitconverter.ToUInt16(bytes, offset + 58),
				gps_id = bytes[offset + 60],
				fix_type = bytes[offset + 61],
				satellites_visible = bytes[offset + 62],
			};
		}

		internal static MavlinkMessage Deserialize_GPS_RTCM_DATA(byte[] bytes, int offset)
		{
			return new Msg_gps_rtcm_data
			{
				flags = bytes[offset + 0],
				len = bytes[offset + 1],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 180),
			};
		}

		internal static MavlinkMessage Deserialize_HIGH_LATENCY(byte[] bytes, int offset)
		{
			return new Msg_high_latency
			{
				custom_mode = bitconverter.ToUInt32(bytes, offset + 0),
				latitude = bitconverter.ToInt32(bytes, offset + 4),
				longitude = bitconverter.ToInt32(bytes, offset + 8),
				roll = bitconverter.ToInt16(bytes, offset + 12),
				pitch = bitconverter.ToInt16(bytes, offset + 14),
				heading = bitconverter.ToUInt16(bytes, offset + 16),
				heading_sp = bitconverter.ToInt16(bytes, offset + 18),
				altitude_amsl = bitconverter.ToInt16(bytes, offset + 20),
				altitude_sp = bitconverter.ToInt16(bytes, offset + 22),
				wp_distance = bitconverter.ToUInt16(bytes, offset + 24),
				base_mode = bytes[offset + 26],
				landed_state = bytes[offset + 27],
				throttle = bitconverter.ToInt8(bytes, offset + 28),
				airspeed = bytes[offset + 29],
				airspeed_sp = bytes[offset + 30],
				groundspeed = bytes[offset + 31],
				climb_rate = bitconverter.ToInt8(bytes, offset + 32),
				gps_nsat = bytes[offset + 33],
				gps_fix_type = bytes[offset + 34],
				battery_remaining = bytes[offset + 35],
				temperature = bitconverter.ToInt8(bytes, offset + 36),
				temperature_air = bitconverter.ToInt8(bytes, offset + 37),
				failsafe = bytes[offset + 38],
				wp_num = bytes[offset + 39],
			};
		}

		internal static MavlinkMessage Deserialize_VIBRATION(byte[] bytes, int offset)
		{
			return new Msg_vibration
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				vibration_x = bitconverter.ToSingle(bytes, offset + 8),
				vibration_y = bitconverter.ToSingle(bytes, offset + 12),
				vibration_z = bitconverter.ToSingle(bytes, offset + 16),
				clipping_0 = bitconverter.ToUInt32(bytes, offset + 20),
				clipping_1 = bitconverter.ToUInt32(bytes, offset + 24),
				clipping_2 = bitconverter.ToUInt32(bytes, offset + 28),
			};
		}

		internal static MavlinkMessage Deserialize_HOME_POSITION(byte[] bytes, int offset)
		{
			return new Msg_home_position
			{
				latitude = bitconverter.ToInt32(bytes, offset + 0),
				longitude = bitconverter.ToInt32(bytes, offset + 4),
				altitude = bitconverter.ToInt32(bytes, offset + 8),
				x = bitconverter.ToSingle(bytes, offset + 12),
				y = bitconverter.ToSingle(bytes, offset + 16),
				z = bitconverter.ToSingle(bytes, offset + 20),
				q =  ByteArrayUtil.ToSingle(bytes, offset + 24, 4),
				approach_x = bitconverter.ToSingle(bytes, offset + 40),
				approach_y = bitconverter.ToSingle(bytes, offset + 44),
				approach_z = bitconverter.ToSingle(bytes, offset + 48),
			};
		}

		internal static MavlinkMessage Deserialize_SET_HOME_POSITION(byte[] bytes, int offset)
		{
			return new Msg_set_home_position
			{
				latitude = bitconverter.ToInt32(bytes, offset + 0),
				longitude = bitconverter.ToInt32(bytes, offset + 4),
				altitude = bitconverter.ToInt32(bytes, offset + 8),
				x = bitconverter.ToSingle(bytes, offset + 12),
				y = bitconverter.ToSingle(bytes, offset + 16),
				z = bitconverter.ToSingle(bytes, offset + 20),
				q =  ByteArrayUtil.ToSingle(bytes, offset + 24, 4),
				approach_x = bitconverter.ToSingle(bytes, offset + 40),
				approach_y = bitconverter.ToSingle(bytes, offset + 44),
				approach_z = bitconverter.ToSingle(bytes, offset + 48),
				target_system = bytes[offset + 52],
			};
		}

		internal static MavlinkMessage Deserialize_MESSAGE_INTERVAL(byte[] bytes, int offset)
		{
			return new Msg_message_interval
			{
				interval_us = bitconverter.ToInt32(bytes, offset + 0),
				message_id = bitconverter.ToUInt16(bytes, offset + 4),
			};
		}

		internal static MavlinkMessage Deserialize_EXTENDED_SYS_STATE(byte[] bytes, int offset)
		{
			return new Msg_extended_sys_state
			{
				vtol_state = bytes[offset + 0],
				landed_state = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_ADSB_VEHICLE(byte[] bytes, int offset)
		{
			return new Msg_adsb_vehicle
			{
				ICAO_address = bitconverter.ToUInt32(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 4),
				lon = bitconverter.ToInt32(bytes, offset + 8),
				altitude = bitconverter.ToInt32(bytes, offset + 12),
				heading = bitconverter.ToUInt16(bytes, offset + 16),
				hor_velocity = bitconverter.ToUInt16(bytes, offset + 18),
				ver_velocity = bitconverter.ToInt16(bytes, offset + 20),
				flags = bitconverter.ToUInt16(bytes, offset + 22),
				squawk = bitconverter.ToUInt16(bytes, offset + 24),
				altitude_type = bytes[offset + 26],
				callsign =  ByteArrayUtil.ToChar(bytes, offset + 27, 9),
				emitter_type = bytes[offset + 36],
				tslc = bytes[offset + 37],
			};
		}

		internal static MavlinkMessage Deserialize_COLLISION(byte[] bytes, int offset)
		{
			return new Msg_collision
			{
				id = bitconverter.ToUInt32(bytes, offset + 0),
				time_to_minimum_delta = bitconverter.ToSingle(bytes, offset + 4),
				altitude_minimum_delta = bitconverter.ToSingle(bytes, offset + 8),
				horizontal_minimum_delta = bitconverter.ToSingle(bytes, offset + 12),
				src = bytes[offset + 16],
				action = bytes[offset + 17],
				threat_level = bytes[offset + 18],
			};
		}

		internal static MavlinkMessage Deserialize_V2_EXTENSION(byte[] bytes, int offset)
		{
			return new Msg_v2_extension
			{
				message_type = bitconverter.ToUInt16(bytes, offset + 0),
				target_network = bytes[offset + 2],
				target_system = bytes[offset + 3],
				target_component = bytes[offset + 4],
				payload =  ByteArrayUtil.ToUInt8(bytes, offset + 5, 249),
			};
		}

		internal static MavlinkMessage Deserialize_MEMORY_VECT(byte[] bytes, int offset)
		{
			return new Msg_memory_vect
			{
				address = bitconverter.ToUInt16(bytes, offset + 0),
				ver = bytes[offset + 2],
				type = bytes[offset + 3],
				value =  ByteArrayUtil.ToInt8(bytes, offset + 4, 32),
			};
		}

		internal static MavlinkMessage Deserialize_DEBUG_VECT(byte[] bytes, int offset)
		{
			return new Msg_debug_vect
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 8),
				y = bitconverter.ToSingle(bytes, offset + 12),
				z = bitconverter.ToSingle(bytes, offset + 16),
				name =  ByteArrayUtil.ToChar(bytes, offset + 20, 10),
			};
		}

		internal static MavlinkMessage Deserialize_NAMED_VALUE_FLOAT(byte[] bytes, int offset)
		{
			return new Msg_named_value_float
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				value = bitconverter.ToSingle(bytes, offset + 4),
				name =  ByteArrayUtil.ToChar(bytes, offset + 8, 10),
			};
		}

		internal static MavlinkMessage Deserialize_NAMED_VALUE_INT(byte[] bytes, int offset)
		{
			return new Msg_named_value_int
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				value = bitconverter.ToInt32(bytes, offset + 4),
				name =  ByteArrayUtil.ToChar(bytes, offset + 8, 10),
			};
		}

		internal static MavlinkMessage Deserialize_STATUSTEXT(byte[] bytes, int offset)
		{
			return new Msg_statustext
			{
				severity = bytes[offset + 0],
				text =  ByteArrayUtil.ToChar(bytes, offset + 1, 50),
			};
		}

		internal static MavlinkMessage Deserialize_DEBUG(byte[] bytes, int offset)
		{
			return new Msg_debug
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				value = bitconverter.ToSingle(bytes, offset + 4),
				ind = bytes[offset + 8],
			};
		}

		internal static int Serialize_SENSOR_OFFSETS(this Msg_sensor_offsets msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.mag_declination, bytes, offset + 0);
			bitconverter.GetBytes(msg.raw_press, bytes, offset + 4);
			bitconverter.GetBytes(msg.raw_temp, bytes, offset + 8);
			bitconverter.GetBytes(msg.gyro_cal_x, bytes, offset + 12);
			bitconverter.GetBytes(msg.gyro_cal_y, bytes, offset + 16);
			bitconverter.GetBytes(msg.gyro_cal_z, bytes, offset + 20);
			bitconverter.GetBytes(msg.accel_cal_x, bytes, offset + 24);
			bitconverter.GetBytes(msg.accel_cal_y, bytes, offset + 28);
			bitconverter.GetBytes(msg.accel_cal_z, bytes, offset + 32);
			bitconverter.GetBytes(msg.mag_ofs_x, bytes, offset + 36);
			bitconverter.GetBytes(msg.mag_ofs_y, bytes, offset + 38);
			bitconverter.GetBytes(msg.mag_ofs_z, bytes, offset + 40);
			offset += 42;
			return 150;
		}

		internal static int Serialize_SET_MAG_OFFSETS(this Msg_set_mag_offsets msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.mag_ofs_x, bytes, offset + 0);
			bitconverter.GetBytes(msg.mag_ofs_y, bytes, offset + 2);
			bitconverter.GetBytes(msg.mag_ofs_z, bytes, offset + 4);
			bytes[offset + 6] = msg.target_system;
			bytes[offset + 7] = msg.target_component;
			offset += 8;
			return 151;
		}

		internal static int Serialize_MEMINFO(this Msg_meminfo msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.brkval, bytes, offset + 0);
			bitconverter.GetBytes(msg.freemem, bytes, offset + 2);
			offset += 4;
			return 152;
		}

		internal static int Serialize_AP_ADC(this Msg_ap_adc msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.adc1, bytes, offset + 0);
			bitconverter.GetBytes(msg.adc2, bytes, offset + 2);
			bitconverter.GetBytes(msg.adc3, bytes, offset + 4);
			bitconverter.GetBytes(msg.adc4, bytes, offset + 6);
			bitconverter.GetBytes(msg.adc5, bytes, offset + 8);
			bitconverter.GetBytes(msg.adc6, bytes, offset + 10);
			offset += 12;
			return 153;
		}

		internal static int Serialize_DIGICAM_CONFIGURE(this Msg_digicam_configure msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.extra_value, bytes, offset + 0);
			bitconverter.GetBytes(msg.shutter_speed, bytes, offset + 4);
			bytes[offset + 6] = msg.target_system;
			bytes[offset + 7] = msg.target_component;
			bytes[offset + 8] = msg.mode;
			bytes[offset + 9] = msg.aperture;
			bytes[offset + 10] = msg.iso;
			bytes[offset + 11] = msg.exposure_type;
			bytes[offset + 12] = msg.command_id;
			bytes[offset + 13] = msg.engine_cut_off;
			bytes[offset + 14] = msg.extra_param;
			offset += 15;
			return 154;
		}

		internal static int Serialize_DIGICAM_CONTROL(this Msg_digicam_control msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.extra_value, bytes, offset + 0);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.target_component;
			bytes[offset + 6] = msg.session;
			bytes[offset + 7] = msg.zoom_pos;
			bytes[offset + 8] = unchecked((byte)msg.zoom_step);
			bytes[offset + 9] = msg.focus_lock;
			bytes[offset + 10] = msg.shot;
			bytes[offset + 11] = msg.command_id;
			bytes[offset + 12] = msg.extra_param;
			offset += 13;
			return 155;
		}

		internal static int Serialize_MOUNT_CONFIGURE(this Msg_mount_configure msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.mount_mode;
			bytes[offset + 3] = msg.stab_roll;
			bytes[offset + 4] = msg.stab_pitch;
			bytes[offset + 5] = msg.stab_yaw;
			offset += 6;
			return 156;
		}

		internal static int Serialize_MOUNT_CONTROL(this Msg_mount_control msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.input_a, bytes, offset + 0);
			bitconverter.GetBytes(msg.input_b, bytes, offset + 4);
			bitconverter.GetBytes(msg.input_c, bytes, offset + 8);
			bytes[offset + 12] = msg.target_system;
			bytes[offset + 13] = msg.target_component;
			bytes[offset + 14] = msg.save_position;
			offset += 15;
			return 157;
		}

		internal static int Serialize_MOUNT_STATUS(this Msg_mount_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.pointing_a, bytes, offset + 0);
			bitconverter.GetBytes(msg.pointing_b, bytes, offset + 4);
			bitconverter.GetBytes(msg.pointing_c, bytes, offset + 8);
			bytes[offset + 12] = msg.target_system;
			bytes[offset + 13] = msg.target_component;
			offset += 14;
			return 158;
		}

		internal static int Serialize_FENCE_POINT(this Msg_fence_point msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.lat, bytes, offset + 0);
			bitconverter.GetBytes(msg.lng, bytes, offset + 4);
			bytes[offset + 8] = msg.target_system;
			bytes[offset + 9] = msg.target_component;
			bytes[offset + 10] = msg.idx;
			bytes[offset + 11] = msg.count;
			offset += 12;
			return 160;
		}

		internal static int Serialize_FENCE_FETCH_POINT(this Msg_fence_fetch_point msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.idx;
			offset += 3;
			return 161;
		}

		internal static int Serialize_FENCE_STATUS(this Msg_fence_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.breach_time, bytes, offset + 0);
			bitconverter.GetBytes(msg.breach_count, bytes, offset + 4);
			bytes[offset + 6] = msg.breach_status;
			bytes[offset + 7] = msg.breach_type;
			offset += 8;
			return 162;
		}

		internal static int Serialize_AHRS(this Msg_ahrs msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.omegaIx, bytes, offset + 0);
			bitconverter.GetBytes(msg.omegaIy, bytes, offset + 4);
			bitconverter.GetBytes(msg.omegaIz, bytes, offset + 8);
			bitconverter.GetBytes(msg.accel_weight, bytes, offset + 12);
			bitconverter.GetBytes(msg.renorm_val, bytes, offset + 16);
			bitconverter.GetBytes(msg.error_rp, bytes, offset + 20);
			bitconverter.GetBytes(msg.error_yaw, bytes, offset + 24);
			offset += 28;
			return 163;
		}

		internal static int Serialize_SIMSTATE(this Msg_simstate msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.roll, bytes, offset + 0);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 4);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 8);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 12);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 16);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 20);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 24);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 28);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 32);
			bitconverter.GetBytes(msg.lat, bytes, offset + 36);
			bitconverter.GetBytes(msg.lng, bytes, offset + 40);
			offset += 44;
			return 164;
		}

		internal static int Serialize_HWSTATUS(this Msg_hwstatus msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.Vcc, bytes, offset + 0);
			bytes[offset + 2] = msg.I2Cerr;
			offset += 3;
			return 165;
		}

		internal static int Serialize_RADIO(this Msg_radio msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.rxerrors, bytes, offset + 0);
			bitconverter.GetBytes(msg.@fixed, bytes, offset + 2);
			bytes[offset + 4] = msg.rssi;
			bytes[offset + 5] = msg.remrssi;
			bytes[offset + 6] = msg.txbuf;
			bytes[offset + 7] = msg.noise;
			bytes[offset + 8] = msg.remnoise;
			offset += 9;
			return 166;
		}

		internal static int Serialize_LIMITS_STATUS(this Msg_limits_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.last_trigger, bytes, offset + 0);
			bitconverter.GetBytes(msg.last_action, bytes, offset + 4);
			bitconverter.GetBytes(msg.last_recovery, bytes, offset + 8);
			bitconverter.GetBytes(msg.last_clear, bytes, offset + 12);
			bitconverter.GetBytes(msg.breach_count, bytes, offset + 16);
			bytes[offset + 18] = msg.limits_state;
			bytes[offset + 19] = msg.mods_enabled;
			bytes[offset + 20] = msg.mods_required;
			bytes[offset + 21] = msg.mods_triggered;
			offset += 22;
			return 167;
		}

		internal static int Serialize_WIND(this Msg_wind msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.direction, bytes, offset + 0);
			bitconverter.GetBytes(msg.speed, bytes, offset + 4);
			bitconverter.GetBytes(msg.speed_z, bytes, offset + 8);
			offset += 12;
			return 168;
		}

		internal static int Serialize_DATA16(this Msg_data16 msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.type;
			bytes[offset + 1] = msg.len;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 2, 16);
			offset += 18;
			return 169;
		}

		internal static int Serialize_DATA32(this Msg_data32 msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.type;
			bytes[offset + 1] = msg.len;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 2, 32);
			offset += 34;
			return 170;
		}

		internal static int Serialize_DATA64(this Msg_data64 msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.type;
			bytes[offset + 1] = msg.len;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 2, 64);
			offset += 66;
			return 171;
		}

		internal static int Serialize_DATA96(this Msg_data96 msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.type;
			bytes[offset + 1] = msg.len;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 2, 96);
			offset += 98;
			return 172;
		}

		internal static int Serialize_RANGEFINDER(this Msg_rangefinder msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.distance, bytes, offset + 0);
			bitconverter.GetBytes(msg.voltage, bytes, offset + 4);
			offset += 8;
			return 173;
		}

		internal static int Serialize_AIRSPEED_AUTOCAL(this Msg_airspeed_autocal msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.vx, bytes, offset + 0);
			bitconverter.GetBytes(msg.vy, bytes, offset + 4);
			bitconverter.GetBytes(msg.vz, bytes, offset + 8);
			bitconverter.GetBytes(msg.diff_pressure, bytes, offset + 12);
			bitconverter.GetBytes(msg.EAS2TAS, bytes, offset + 16);
			bitconverter.GetBytes(msg.ratio, bytes, offset + 20);
			bitconverter.GetBytes(msg.state_x, bytes, offset + 24);
			bitconverter.GetBytes(msg.state_y, bytes, offset + 28);
			bitconverter.GetBytes(msg.state_z, bytes, offset + 32);
			bitconverter.GetBytes(msg.Pax, bytes, offset + 36);
			bitconverter.GetBytes(msg.Pby, bytes, offset + 40);
			bitconverter.GetBytes(msg.Pcz, bytes, offset + 44);
			offset += 48;
			return 174;
		}

		internal static int Serialize_RALLY_POINT(this Msg_rally_point msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.lat, bytes, offset + 0);
			bitconverter.GetBytes(msg.lng, bytes, offset + 4);
			bitconverter.GetBytes(msg.alt, bytes, offset + 8);
			bitconverter.GetBytes(msg.break_alt, bytes, offset + 10);
			bitconverter.GetBytes(msg.land_dir, bytes, offset + 12);
			bytes[offset + 14] = msg.target_system;
			bytes[offset + 15] = msg.target_component;
			bytes[offset + 16] = msg.idx;
			bytes[offset + 17] = msg.count;
			bytes[offset + 18] = msg.flags;
			offset += 19;
			return 175;
		}

		internal static int Serialize_RALLY_FETCH_POINT(this Msg_rally_fetch_point msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.idx;
			offset += 3;
			return 176;
		}

		internal static int Serialize_COMPASSMOT_STATUS(this Msg_compassmot_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.current, bytes, offset + 0);
			bitconverter.GetBytes(msg.CompensationX, bytes, offset + 4);
			bitconverter.GetBytes(msg.CompensationY, bytes, offset + 8);
			bitconverter.GetBytes(msg.CompensationZ, bytes, offset + 12);
			bitconverter.GetBytes(msg.throttle, bytes, offset + 16);
			bitconverter.GetBytes(msg.interference, bytes, offset + 18);
			offset += 20;
			return 177;
		}

		internal static int Serialize_AHRS2(this Msg_ahrs2 msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.roll, bytes, offset + 0);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 4);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 8);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 12);
			bitconverter.GetBytes(msg.lat, bytes, offset + 16);
			bitconverter.GetBytes(msg.lng, bytes, offset + 20);
			offset += 24;
			return 178;
		}

		internal static int Serialize_CAMERA_STATUS(this Msg_camera_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.p1, bytes, offset + 8);
			bitconverter.GetBytes(msg.p2, bytes, offset + 12);
			bitconverter.GetBytes(msg.p3, bytes, offset + 16);
			bitconverter.GetBytes(msg.p4, bytes, offset + 20);
			bitconverter.GetBytes(msg.img_idx, bytes, offset + 24);
			bytes[offset + 26] = msg.target_system;
			bytes[offset + 27] = msg.cam_idx;
			bytes[offset + 28] = msg.event_id;
			offset += 29;
			return 179;
		}

		internal static int Serialize_CAMERA_FEEDBACK(this Msg_camera_feedback msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 8);
			bitconverter.GetBytes(msg.lng, bytes, offset + 12);
			bitconverter.GetBytes(msg.alt_msl, bytes, offset + 16);
			bitconverter.GetBytes(msg.alt_rel, bytes, offset + 20);
			bitconverter.GetBytes(msg.roll, bytes, offset + 24);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 28);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 32);
			bitconverter.GetBytes(msg.foc_len, bytes, offset + 36);
			bitconverter.GetBytes(msg.img_idx, bytes, offset + 40);
			bytes[offset + 42] = msg.target_system;
			bytes[offset + 43] = msg.cam_idx;
			bytes[offset + 44] = msg.flags;
			offset += 45;
			return 180;
		}

		internal static int Serialize_BATTERY2(this Msg_battery2 msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.voltage, bytes, offset + 0);
			bitconverter.GetBytes(msg.current_battery, bytes, offset + 2);
			offset += 4;
			return 181;
		}

		internal static int Serialize_AHRS3(this Msg_ahrs3 msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.roll, bytes, offset + 0);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 4);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 8);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 12);
			bitconverter.GetBytes(msg.lat, bytes, offset + 16);
			bitconverter.GetBytes(msg.lng, bytes, offset + 20);
			bitconverter.GetBytes(msg.v1, bytes, offset + 24);
			bitconverter.GetBytes(msg.v2, bytes, offset + 28);
			bitconverter.GetBytes(msg.v3, bytes, offset + 32);
			bitconverter.GetBytes(msg.v4, bytes, offset + 36);
			offset += 40;
			return 182;
		}

		internal static int Serialize_AUTOPILOT_VERSION_REQUEST(this Msg_autopilot_version_request msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			offset += 2;
			return 183;
		}

		internal static int Serialize_REMOTE_LOG_DATA_BLOCK(this Msg_remote_log_data_block msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seqno, bytes, offset + 0);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.target_component;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 6, 200);
			offset += 206;
			return 184;
		}

		internal static int Serialize_REMOTE_LOG_BLOCK_STATUS(this Msg_remote_log_block_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seqno, bytes, offset + 0);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.target_component;
			bytes[offset + 6] = msg.status;
			offset += 7;
			return 185;
		}

		internal static int Serialize_LED_CONTROL(this Msg_led_control msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.instance;
			bytes[offset + 3] = msg.pattern;
			bytes[offset + 4] = msg.custom_len;
			ByteArrayUtil.ToByteArray(msg.custom_bytes, bytes, offset + 5, 24);
			offset += 29;
			return 186;
		}

		internal static int Serialize_MAG_CAL_PROGRESS(this Msg_mag_cal_progress msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.direction_x, bytes, offset + 0);
			bitconverter.GetBytes(msg.direction_y, bytes, offset + 4);
			bitconverter.GetBytes(msg.direction_z, bytes, offset + 8);
			bytes[offset + 12] = msg.compass_id;
			bytes[offset + 13] = msg.cal_mask;
			bytes[offset + 14] = msg.cal_status;
			bytes[offset + 15] = msg.attempt;
			bytes[offset + 16] = msg.completion_pct;
			ByteArrayUtil.ToByteArray(msg.completion_mask, bytes, offset + 17, 10);
			offset += 27;
			return 191;
		}

		internal static int Serialize_MAG_CAL_REPORT(this Msg_mag_cal_report msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.fitness, bytes, offset + 0);
			bitconverter.GetBytes(msg.ofs_x, bytes, offset + 4);
			bitconverter.GetBytes(msg.ofs_y, bytes, offset + 8);
			bitconverter.GetBytes(msg.ofs_z, bytes, offset + 12);
			bitconverter.GetBytes(msg.diag_x, bytes, offset + 16);
			bitconverter.GetBytes(msg.diag_y, bytes, offset + 20);
			bitconverter.GetBytes(msg.diag_z, bytes, offset + 24);
			bitconverter.GetBytes(msg.offdiag_x, bytes, offset + 28);
			bitconverter.GetBytes(msg.offdiag_y, bytes, offset + 32);
			bitconverter.GetBytes(msg.offdiag_z, bytes, offset + 36);
			bytes[offset + 40] = msg.compass_id;
			bytes[offset + 41] = msg.cal_mask;
			bytes[offset + 42] = msg.cal_status;
			bytes[offset + 43] = msg.autosaved;
			offset += 44;
			return 192;
		}

		internal static int Serialize_EKF_STATUS_REPORT(this Msg_ekf_status_report msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.velocity_variance, bytes, offset + 0);
			bitconverter.GetBytes(msg.pos_horiz_variance, bytes, offset + 4);
			bitconverter.GetBytes(msg.pos_vert_variance, bytes, offset + 8);
			bitconverter.GetBytes(msg.compass_variance, bytes, offset + 12);
			bitconverter.GetBytes(msg.terrain_alt_variance, bytes, offset + 16);
			bitconverter.GetBytes(msg.flags, bytes, offset + 20);
			offset += 22;
			return 193;
		}

		internal static int Serialize_PID_TUNING(this Msg_pid_tuning msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.desired, bytes, offset + 0);
			bitconverter.GetBytes(msg.achieved, bytes, offset + 4);
			bitconverter.GetBytes(msg.FF, bytes, offset + 8);
			bitconverter.GetBytes(msg.P, bytes, offset + 12);
			bitconverter.GetBytes(msg.I, bytes, offset + 16);
			bitconverter.GetBytes(msg.D, bytes, offset + 20);
			bytes[offset + 24] = msg.axis;
			offset += 25;
			return 194;
		}

		internal static int Serialize_GIMBAL_REPORT(this Msg_gimbal_report msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.delta_time, bytes, offset + 0);
			bitconverter.GetBytes(msg.delta_angle_x, bytes, offset + 4);
			bitconverter.GetBytes(msg.delta_angle_y, bytes, offset + 8);
			bitconverter.GetBytes(msg.delta_angle_z, bytes, offset + 12);
			bitconverter.GetBytes(msg.delta_velocity_x, bytes, offset + 16);
			bitconverter.GetBytes(msg.delta_velocity_y, bytes, offset + 20);
			bitconverter.GetBytes(msg.delta_velocity_z, bytes, offset + 24);
			bitconverter.GetBytes(msg.joint_roll, bytes, offset + 28);
			bitconverter.GetBytes(msg.joint_el, bytes, offset + 32);
			bitconverter.GetBytes(msg.joint_az, bytes, offset + 36);
			bytes[offset + 40] = msg.target_system;
			bytes[offset + 41] = msg.target_component;
			offset += 42;
			return 200;
		}

		internal static int Serialize_GIMBAL_CONTROL(this Msg_gimbal_control msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.demanded_rate_x, bytes, offset + 0);
			bitconverter.GetBytes(msg.demanded_rate_y, bytes, offset + 4);
			bitconverter.GetBytes(msg.demanded_rate_z, bytes, offset + 8);
			bytes[offset + 12] = msg.target_system;
			bytes[offset + 13] = msg.target_component;
			offset += 14;
			return 201;
		}

		internal static int Serialize_GIMBAL_TORQUE_CMD_REPORT(this Msg_gimbal_torque_cmd_report msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.rl_torque_cmd, bytes, offset + 0);
			bitconverter.GetBytes(msg.el_torque_cmd, bytes, offset + 2);
			bitconverter.GetBytes(msg.az_torque_cmd, bytes, offset + 4);
			bytes[offset + 6] = msg.target_system;
			bytes[offset + 7] = msg.target_component;
			offset += 8;
			return 214;
		}

		internal static int Serialize_GOPRO_HEARTBEAT(this Msg_gopro_heartbeat msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.status;
			bytes[offset + 1] = msg.capture_mode;
			bytes[offset + 2] = msg.flags;
			offset += 3;
			return 215;
		}

		internal static int Serialize_GOPRO_GET_REQUEST(this Msg_gopro_get_request msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.cmd_id;
			offset += 3;
			return 216;
		}

		internal static int Serialize_GOPRO_GET_RESPONSE(this Msg_gopro_get_response msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.cmd_id;
			bytes[offset + 1] = msg.status;
			ByteArrayUtil.ToByteArray(msg.value, bytes, offset + 2, 4);
			offset += 6;
			return 217;
		}

		internal static int Serialize_GOPRO_SET_REQUEST(this Msg_gopro_set_request msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.cmd_id;
			ByteArrayUtil.ToByteArray(msg.value, bytes, offset + 3, 4);
			offset += 7;
			return 218;
		}

		internal static int Serialize_GOPRO_SET_RESPONSE(this Msg_gopro_set_response msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.cmd_id;
			bytes[offset + 1] = msg.status;
			offset += 2;
			return 219;
		}

		internal static int Serialize_RPM(this Msg_rpm msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.rpm1, bytes, offset + 0);
			bitconverter.GetBytes(msg.rpm2, bytes, offset + 4);
			offset += 8;
			return 226;
		}

		internal static int Serialize_HEARTBEAT(this Msg_heartbeat msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.custom_mode, bytes, offset + 0);
			bytes[offset + 4] = msg.type;
			bytes[offset + 5] = msg.autopilot;
			bytes[offset + 6] = msg.base_mode;
			bytes[offset + 7] = msg.system_status;
			bytes[offset + 8] = msg.mavlink_version;
			offset += 9;
			return 0;
		}

		internal static int Serialize_SYS_STATUS(this Msg_sys_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.onboard_control_sensors_present, bytes, offset + 0);
			bitconverter.GetBytes(msg.onboard_control_sensors_enabled, bytes, offset + 4);
			bitconverter.GetBytes(msg.onboard_control_sensors_health, bytes, offset + 8);
			bitconverter.GetBytes(msg.load, bytes, offset + 12);
			bitconverter.GetBytes(msg.voltage_battery, bytes, offset + 14);
			bitconverter.GetBytes(msg.current_battery, bytes, offset + 16);
			bitconverter.GetBytes(msg.drop_rate_comm, bytes, offset + 18);
			bitconverter.GetBytes(msg.errors_comm, bytes, offset + 20);
			bitconverter.GetBytes(msg.errors_count1, bytes, offset + 22);
			bitconverter.GetBytes(msg.errors_count2, bytes, offset + 24);
			bitconverter.GetBytes(msg.errors_count3, bytes, offset + 26);
			bitconverter.GetBytes(msg.errors_count4, bytes, offset + 28);
			bytes[offset + 30] = unchecked((byte)msg.battery_remaining);
			offset += 31;
			return 1;
		}

		internal static int Serialize_SYSTEM_TIME(this Msg_system_time msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_unix_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 8);
			offset += 12;
			return 2;
		}

		internal static int Serialize_PING(this Msg_ping msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.seq, bytes, offset + 8);
			bytes[offset + 12] = msg.target_system;
			bytes[offset + 13] = msg.target_component;
			offset += 14;
			return 4;
		}

		internal static int Serialize_CHANGE_OPERATOR_CONTROL(this Msg_change_operator_control msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.control_request;
			bytes[offset + 2] = msg.version;
			ByteArrayUtil.ToByteArray(msg.passkey, bytes, offset + 3, 25);
			offset += 28;
			return 5;
		}

		internal static int Serialize_CHANGE_OPERATOR_CONTROL_ACK(this Msg_change_operator_control_ack msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.gcs_system_id;
			bytes[offset + 1] = msg.control_request;
			bytes[offset + 2] = msg.ack;
			offset += 3;
			return 6;
		}

		internal static int Serialize_AUTH_KEY(this Msg_auth_key msg, byte[] bytes, ref int offset)
		{
			ByteArrayUtil.ToByteArray(msg.key, bytes, offset + 0, 32);
			offset += 32;
			return 7;
		}

		internal static int Serialize_SET_MODE(this Msg_set_mode msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.custom_mode, bytes, offset + 0);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.base_mode;
			offset += 6;
			return 11;
		}

		internal static int Serialize_PARAM_REQUEST_READ(this Msg_param_request_read msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param_index, bytes, offset + 0);
			bytes[offset + 2] = msg.target_system;
			bytes[offset + 3] = msg.target_component;
			ByteArrayUtil.ToByteArray(msg.param_id, bytes, offset + 4, 16);
			offset += 20;
			return 20;
		}

		internal static int Serialize_PARAM_REQUEST_LIST(this Msg_param_request_list msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			offset += 2;
			return 21;
		}

		internal static int Serialize_PARAM_VALUE(this Msg_param_value msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param_value, bytes, offset + 0);
			bitconverter.GetBytes(msg.param_count, bytes, offset + 4);
			bitconverter.GetBytes(msg.param_index, bytes, offset + 6);
			ByteArrayUtil.ToByteArray(msg.param_id, bytes, offset + 8, 16);
			bytes[offset + 24] = msg.param_type;
			offset += 25;
			return 22;
		}

		internal static int Serialize_PARAM_SET(this Msg_param_set msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param_value, bytes, offset + 0);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.target_component;
			ByteArrayUtil.ToByteArray(msg.param_id, bytes, offset + 6, 16);
			bytes[offset + 22] = msg.param_type;
			offset += 23;
			return 23;
		}

		internal static int Serialize_GPS_RAW_INT(this Msg_gps_raw_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 8);
			bitconverter.GetBytes(msg.lon, bytes, offset + 12);
			bitconverter.GetBytes(msg.alt, bytes, offset + 16);
			bitconverter.GetBytes(msg.eph, bytes, offset + 20);
			bitconverter.GetBytes(msg.epv, bytes, offset + 22);
			bitconverter.GetBytes(msg.vel, bytes, offset + 24);
			bitconverter.GetBytes(msg.cog, bytes, offset + 26);
			bytes[offset + 28] = msg.fix_type;
			bytes[offset + 29] = msg.satellites_visible;
			offset += 30;
			return 24;
		}

		internal static int Serialize_GPS_STATUS(this Msg_gps_status msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.satellites_visible;
			ByteArrayUtil.ToByteArray(msg.satellite_prn, bytes, offset + 1, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_used, bytes, offset + 21, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_elevation, bytes, offset + 41, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_azimuth, bytes, offset + 61, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_snr, bytes, offset + 81, 20);
			offset += 101;
			return 25;
		}

		internal static int Serialize_SCALED_IMU(this Msg_scaled_imu msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 4);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 6);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 8);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 10);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 12);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 14);
			bitconverter.GetBytes(msg.xmag, bytes, offset + 16);
			bitconverter.GetBytes(msg.ymag, bytes, offset + 18);
			bitconverter.GetBytes(msg.zmag, bytes, offset + 20);
			offset += 22;
			return 26;
		}

		internal static int Serialize_RAW_IMU(this Msg_raw_imu msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 8);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 10);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 12);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 14);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 16);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 18);
			bitconverter.GetBytes(msg.xmag, bytes, offset + 20);
			bitconverter.GetBytes(msg.ymag, bytes, offset + 22);
			bitconverter.GetBytes(msg.zmag, bytes, offset + 24);
			offset += 26;
			return 27;
		}

		internal static int Serialize_RAW_PRESSURE(this Msg_raw_pressure msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.press_abs, bytes, offset + 8);
			bitconverter.GetBytes(msg.press_diff1, bytes, offset + 10);
			bitconverter.GetBytes(msg.press_diff2, bytes, offset + 12);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 14);
			offset += 16;
			return 28;
		}

		internal static int Serialize_SCALED_PRESSURE(this Msg_scaled_pressure msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.press_abs, bytes, offset + 4);
			bitconverter.GetBytes(msg.press_diff, bytes, offset + 8);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 12);
			offset += 14;
			return 29;
		}

		internal static int Serialize_ATTITUDE(this Msg_attitude msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll, bytes, offset + 4);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 12);
			bitconverter.GetBytes(msg.rollspeed, bytes, offset + 16);
			bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 20);
			bitconverter.GetBytes(msg.yawspeed, bytes, offset + 24);
			offset += 28;
			return 30;
		}

		internal static int Serialize_ATTITUDE_QUATERNION(this Msg_attitude_quaternion msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.q1, bytes, offset + 4);
			bitconverter.GetBytes(msg.q2, bytes, offset + 8);
			bitconverter.GetBytes(msg.q3, bytes, offset + 12);
			bitconverter.GetBytes(msg.q4, bytes, offset + 16);
			bitconverter.GetBytes(msg.rollspeed, bytes, offset + 20);
			bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 24);
			bitconverter.GetBytes(msg.yawspeed, bytes, offset + 28);
			offset += 32;
			return 31;
		}

		internal static int Serialize_LOCAL_POSITION_NED(this Msg_local_position_ned msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 4);
			bitconverter.GetBytes(msg.y, bytes, offset + 8);
			bitconverter.GetBytes(msg.z, bytes, offset + 12);
			bitconverter.GetBytes(msg.vx, bytes, offset + 16);
			bitconverter.GetBytes(msg.vy, bytes, offset + 20);
			bitconverter.GetBytes(msg.vz, bytes, offset + 24);
			offset += 28;
			return 32;
		}

		internal static int Serialize_GLOBAL_POSITION_INT(this Msg_global_position_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 4);
			bitconverter.GetBytes(msg.lon, bytes, offset + 8);
			bitconverter.GetBytes(msg.alt, bytes, offset + 12);
			bitconverter.GetBytes(msg.relative_alt, bytes, offset + 16);
			bitconverter.GetBytes(msg.vx, bytes, offset + 20);
			bitconverter.GetBytes(msg.vy, bytes, offset + 22);
			bitconverter.GetBytes(msg.vz, bytes, offset + 24);
			bitconverter.GetBytes(msg.hdg, bytes, offset + 26);
			offset += 28;
			return 33;
		}

		internal static int Serialize_RC_CHANNELS_SCALED(this Msg_rc_channels_scaled msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.chan1_scaled, bytes, offset + 4);
			bitconverter.GetBytes(msg.chan2_scaled, bytes, offset + 6);
			bitconverter.GetBytes(msg.chan3_scaled, bytes, offset + 8);
			bitconverter.GetBytes(msg.chan4_scaled, bytes, offset + 10);
			bitconverter.GetBytes(msg.chan5_scaled, bytes, offset + 12);
			bitconverter.GetBytes(msg.chan6_scaled, bytes, offset + 14);
			bitconverter.GetBytes(msg.chan7_scaled, bytes, offset + 16);
			bitconverter.GetBytes(msg.chan8_scaled, bytes, offset + 18);
			bytes[offset + 20] = msg.port;
			bytes[offset + 21] = msg.rssi;
			offset += 22;
			return 34;
		}

		internal static int Serialize_RC_CHANNELS_RAW(this Msg_rc_channels_raw msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.chan1_raw, bytes, offset + 4);
			bitconverter.GetBytes(msg.chan2_raw, bytes, offset + 6);
			bitconverter.GetBytes(msg.chan3_raw, bytes, offset + 8);
			bitconverter.GetBytes(msg.chan4_raw, bytes, offset + 10);
			bitconverter.GetBytes(msg.chan5_raw, bytes, offset + 12);
			bitconverter.GetBytes(msg.chan6_raw, bytes, offset + 14);
			bitconverter.GetBytes(msg.chan7_raw, bytes, offset + 16);
			bitconverter.GetBytes(msg.chan8_raw, bytes, offset + 18);
			bytes[offset + 20] = msg.port;
			bytes[offset + 21] = msg.rssi;
			offset += 22;
			return 35;
		}

		internal static int Serialize_SERVO_OUTPUT_RAW(this Msg_servo_output_raw msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.servo1_raw, bytes, offset + 4);
			bitconverter.GetBytes(msg.servo2_raw, bytes, offset + 6);
			bitconverter.GetBytes(msg.servo3_raw, bytes, offset + 8);
			bitconverter.GetBytes(msg.servo4_raw, bytes, offset + 10);
			bitconverter.GetBytes(msg.servo5_raw, bytes, offset + 12);
			bitconverter.GetBytes(msg.servo6_raw, bytes, offset + 14);
			bitconverter.GetBytes(msg.servo7_raw, bytes, offset + 16);
			bitconverter.GetBytes(msg.servo8_raw, bytes, offset + 18);
			bytes[offset + 20] = msg.port;
			offset += 21;
			return 36;
		}

		internal static int Serialize_MISSION_REQUEST_PARTIAL_LIST(this Msg_mission_request_partial_list msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.start_index, bytes, offset + 0);
			bitconverter.GetBytes(msg.end_index, bytes, offset + 2);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.target_component;
			offset += 6;
			return 37;
		}

		internal static int Serialize_MISSION_WRITE_PARTIAL_LIST(this Msg_mission_write_partial_list msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.start_index, bytes, offset + 0);
			bitconverter.GetBytes(msg.end_index, bytes, offset + 2);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.target_component;
			offset += 6;
			return 38;
		}

		internal static int Serialize_MISSION_ITEM(this Msg_mission_item msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param1, bytes, offset + 0);
			bitconverter.GetBytes(msg.param2, bytes, offset + 4);
			bitconverter.GetBytes(msg.param3, bytes, offset + 8);
			bitconverter.GetBytes(msg.param4, bytes, offset + 12);
			bitconverter.GetBytes(msg.x, bytes, offset + 16);
			bitconverter.GetBytes(msg.y, bytes, offset + 20);
			bitconverter.GetBytes(msg.z, bytes, offset + 24);
			bitconverter.GetBytes(msg.seq, bytes, offset + 28);
			bitconverter.GetBytes(msg.command, bytes, offset + 30);
			bytes[offset + 32] = msg.target_system;
			bytes[offset + 33] = msg.target_component;
			bytes[offset + 34] = msg.frame;
			bytes[offset + 35] = msg.current;
			bytes[offset + 36] = msg.autocontinue;
			offset += 37;
			return 39;
		}

		internal static int Serialize_MISSION_REQUEST(this Msg_mission_request msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seq, bytes, offset + 0);
			bytes[offset + 2] = msg.target_system;
			bytes[offset + 3] = msg.target_component;
			offset += 4;
			return 40;
		}

		internal static int Serialize_MISSION_SET_CURRENT(this Msg_mission_set_current msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seq, bytes, offset + 0);
			bytes[offset + 2] = msg.target_system;
			bytes[offset + 3] = msg.target_component;
			offset += 4;
			return 41;
		}

		internal static int Serialize_MISSION_CURRENT(this Msg_mission_current msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seq, bytes, offset + 0);
			offset += 2;
			return 42;
		}

		internal static int Serialize_MISSION_REQUEST_LIST(this Msg_mission_request_list msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			offset += 2;
			return 43;
		}

		internal static int Serialize_MISSION_COUNT(this Msg_mission_count msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.count, bytes, offset + 0);
			bytes[offset + 2] = msg.target_system;
			bytes[offset + 3] = msg.target_component;
			offset += 4;
			return 44;
		}

		internal static int Serialize_MISSION_CLEAR_ALL(this Msg_mission_clear_all msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			offset += 2;
			return 45;
		}

		internal static int Serialize_MISSION_ITEM_REACHED(this Msg_mission_item_reached msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seq, bytes, offset + 0);
			offset += 2;
			return 46;
		}

		internal static int Serialize_MISSION_ACK(this Msg_mission_ack msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.type;
			offset += 3;
			return 47;
		}

		internal static int Serialize_SET_GPS_GLOBAL_ORIGIN(this Msg_set_gps_global_origin msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.latitude, bytes, offset + 0);
			bitconverter.GetBytes(msg.longitude, bytes, offset + 4);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 8);
			bytes[offset + 12] = msg.target_system;
			offset += 13;
			return 48;
		}

		internal static int Serialize_GPS_GLOBAL_ORIGIN(this Msg_gps_global_origin msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.latitude, bytes, offset + 0);
			bitconverter.GetBytes(msg.longitude, bytes, offset + 4);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 8);
			offset += 12;
			return 49;
		}

		internal static int Serialize_PARAM_MAP_RC(this Msg_param_map_rc msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param_value0, bytes, offset + 0);
			bitconverter.GetBytes(msg.scale, bytes, offset + 4);
			bitconverter.GetBytes(msg.param_value_min, bytes, offset + 8);
			bitconverter.GetBytes(msg.param_value_max, bytes, offset + 12);
			bitconverter.GetBytes(msg.param_index, bytes, offset + 16);
			bytes[offset + 18] = msg.target_system;
			bytes[offset + 19] = msg.target_component;
			ByteArrayUtil.ToByteArray(msg.param_id, bytes, offset + 20, 16);
			bytes[offset + 36] = msg.parameter_rc_channel_index;
			offset += 37;
			return 50;
		}

		internal static int Serialize_MISSION_REQUEST_INT(this Msg_mission_request_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seq, bytes, offset + 0);
			bytes[offset + 2] = msg.target_system;
			bytes[offset + 3] = msg.target_component;
			offset += 4;
			return 51;
		}

		internal static int Serialize_SAFETY_SET_ALLOWED_AREA(this Msg_safety_set_allowed_area msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.p1x, bytes, offset + 0);
			bitconverter.GetBytes(msg.p1y, bytes, offset + 4);
			bitconverter.GetBytes(msg.p1z, bytes, offset + 8);
			bitconverter.GetBytes(msg.p2x, bytes, offset + 12);
			bitconverter.GetBytes(msg.p2y, bytes, offset + 16);
			bitconverter.GetBytes(msg.p2z, bytes, offset + 20);
			bytes[offset + 24] = msg.target_system;
			bytes[offset + 25] = msg.target_component;
			bytes[offset + 26] = msg.frame;
			offset += 27;
			return 54;
		}

		internal static int Serialize_SAFETY_ALLOWED_AREA(this Msg_safety_allowed_area msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.p1x, bytes, offset + 0);
			bitconverter.GetBytes(msg.p1y, bytes, offset + 4);
			bitconverter.GetBytes(msg.p1z, bytes, offset + 8);
			bitconverter.GetBytes(msg.p2x, bytes, offset + 12);
			bitconverter.GetBytes(msg.p2y, bytes, offset + 16);
			bitconverter.GetBytes(msg.p2z, bytes, offset + 20);
			bytes[offset + 24] = msg.frame;
			offset += 25;
			return 55;
		}

		internal static int Serialize_ATTITUDE_QUATERNION_COV(this Msg_attitude_quaternion_cov msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.q, bytes, offset + 8, 4);
			bitconverter.GetBytes(msg.rollspeed, bytes, offset + 24);
			bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 28);
			bitconverter.GetBytes(msg.yawspeed, bytes, offset + 32);
			ByteArrayUtil.ToByteArray(msg.covariance, bytes, offset + 36, 9);
			offset += 72;
			return 61;
		}

		internal static int Serialize_NAV_CONTROLLER_OUTPUT(this Msg_nav_controller_output msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.nav_roll, bytes, offset + 0);
			bitconverter.GetBytes(msg.nav_pitch, bytes, offset + 4);
			bitconverter.GetBytes(msg.alt_error, bytes, offset + 8);
			bitconverter.GetBytes(msg.aspd_error, bytes, offset + 12);
			bitconverter.GetBytes(msg.xtrack_error, bytes, offset + 16);
			bitconverter.GetBytes(msg.nav_bearing, bytes, offset + 20);
			bitconverter.GetBytes(msg.target_bearing, bytes, offset + 22);
			bitconverter.GetBytes(msg.wp_dist, bytes, offset + 24);
			offset += 26;
			return 62;
		}

		internal static int Serialize_GLOBAL_POSITION_INT_COV(this Msg_global_position_int_cov msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 8);
			bitconverter.GetBytes(msg.lon, bytes, offset + 12);
			bitconverter.GetBytes(msg.alt, bytes, offset + 16);
			bitconverter.GetBytes(msg.relative_alt, bytes, offset + 20);
			bitconverter.GetBytes(msg.vx, bytes, offset + 24);
			bitconverter.GetBytes(msg.vy, bytes, offset + 28);
			bitconverter.GetBytes(msg.vz, bytes, offset + 32);
			ByteArrayUtil.ToByteArray(msg.covariance, bytes, offset + 36, 36);
			bytes[offset + 180] = msg.estimator_type;
			offset += 181;
			return 63;
		}

		internal static int Serialize_LOCAL_POSITION_NED_COV(this Msg_local_position_ned_cov msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 8);
			bitconverter.GetBytes(msg.y, bytes, offset + 12);
			bitconverter.GetBytes(msg.z, bytes, offset + 16);
			bitconverter.GetBytes(msg.vx, bytes, offset + 20);
			bitconverter.GetBytes(msg.vy, bytes, offset + 24);
			bitconverter.GetBytes(msg.vz, bytes, offset + 28);
			bitconverter.GetBytes(msg.ax, bytes, offset + 32);
			bitconverter.GetBytes(msg.ay, bytes, offset + 36);
			bitconverter.GetBytes(msg.az, bytes, offset + 40);
			ByteArrayUtil.ToByteArray(msg.covariance, bytes, offset + 44, 45);
			bytes[offset + 224] = msg.estimator_type;
			offset += 225;
			return 64;
		}

		internal static int Serialize_RC_CHANNELS(this Msg_rc_channels msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.chan1_raw, bytes, offset + 4);
			bitconverter.GetBytes(msg.chan2_raw, bytes, offset + 6);
			bitconverter.GetBytes(msg.chan3_raw, bytes, offset + 8);
			bitconverter.GetBytes(msg.chan4_raw, bytes, offset + 10);
			bitconverter.GetBytes(msg.chan5_raw, bytes, offset + 12);
			bitconverter.GetBytes(msg.chan6_raw, bytes, offset + 14);
			bitconverter.GetBytes(msg.chan7_raw, bytes, offset + 16);
			bitconverter.GetBytes(msg.chan8_raw, bytes, offset + 18);
			bitconverter.GetBytes(msg.chan9_raw, bytes, offset + 20);
			bitconverter.GetBytes(msg.chan10_raw, bytes, offset + 22);
			bitconverter.GetBytes(msg.chan11_raw, bytes, offset + 24);
			bitconverter.GetBytes(msg.chan12_raw, bytes, offset + 26);
			bitconverter.GetBytes(msg.chan13_raw, bytes, offset + 28);
			bitconverter.GetBytes(msg.chan14_raw, bytes, offset + 30);
			bitconverter.GetBytes(msg.chan15_raw, bytes, offset + 32);
			bitconverter.GetBytes(msg.chan16_raw, bytes, offset + 34);
			bitconverter.GetBytes(msg.chan17_raw, bytes, offset + 36);
			bitconverter.GetBytes(msg.chan18_raw, bytes, offset + 38);
			bytes[offset + 40] = msg.chancount;
			bytes[offset + 41] = msg.rssi;
			offset += 42;
			return 65;
		}

		internal static int Serialize_REQUEST_DATA_STREAM(this Msg_request_data_stream msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.req_message_rate, bytes, offset + 0);
			bytes[offset + 2] = msg.target_system;
			bytes[offset + 3] = msg.target_component;
			bytes[offset + 4] = msg.req_stream_id;
			bytes[offset + 5] = msg.start_stop;
			offset += 6;
			return 66;
		}

		internal static int Serialize_DATA_STREAM(this Msg_data_stream msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.message_rate, bytes, offset + 0);
			bytes[offset + 2] = msg.stream_id;
			bytes[offset + 3] = msg.on_off;
			offset += 4;
			return 67;
		}

		internal static int Serialize_MANUAL_CONTROL(this Msg_manual_control msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.x, bytes, offset + 0);
			bitconverter.GetBytes(msg.y, bytes, offset + 2);
			bitconverter.GetBytes(msg.z, bytes, offset + 4);
			bitconverter.GetBytes(msg.r, bytes, offset + 6);
			bitconverter.GetBytes(msg.buttons, bytes, offset + 8);
			bytes[offset + 10] = msg.target;
			offset += 11;
			return 69;
		}

		internal static int Serialize_RC_CHANNELS_OVERRIDE(this Msg_rc_channels_override msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.chan1_raw, bytes, offset + 0);
			bitconverter.GetBytes(msg.chan2_raw, bytes, offset + 2);
			bitconverter.GetBytes(msg.chan3_raw, bytes, offset + 4);
			bitconverter.GetBytes(msg.chan4_raw, bytes, offset + 6);
			bitconverter.GetBytes(msg.chan5_raw, bytes, offset + 8);
			bitconverter.GetBytes(msg.chan6_raw, bytes, offset + 10);
			bitconverter.GetBytes(msg.chan7_raw, bytes, offset + 12);
			bitconverter.GetBytes(msg.chan8_raw, bytes, offset + 14);
			bytes[offset + 16] = msg.target_system;
			bytes[offset + 17] = msg.target_component;
			offset += 18;
			return 70;
		}

		internal static int Serialize_MISSION_ITEM_INT(this Msg_mission_item_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param1, bytes, offset + 0);
			bitconverter.GetBytes(msg.param2, bytes, offset + 4);
			bitconverter.GetBytes(msg.param3, bytes, offset + 8);
			bitconverter.GetBytes(msg.param4, bytes, offset + 12);
			bitconverter.GetBytes(msg.x, bytes, offset + 16);
			bitconverter.GetBytes(msg.y, bytes, offset + 20);
			bitconverter.GetBytes(msg.z, bytes, offset + 24);
			bitconverter.GetBytes(msg.seq, bytes, offset + 28);
			bitconverter.GetBytes(msg.command, bytes, offset + 30);
			bytes[offset + 32] = msg.target_system;
			bytes[offset + 33] = msg.target_component;
			bytes[offset + 34] = msg.frame;
			bytes[offset + 35] = msg.current;
			bytes[offset + 36] = msg.autocontinue;
			offset += 37;
			return 73;
		}

		internal static int Serialize_VFR_HUD(this Msg_vfr_hud msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.airspeed, bytes, offset + 0);
			bitconverter.GetBytes(msg.groundspeed, bytes, offset + 4);
			bitconverter.GetBytes(msg.alt, bytes, offset + 8);
			bitconverter.GetBytes(msg.climb, bytes, offset + 12);
			bitconverter.GetBytes(msg.heading, bytes, offset + 16);
			bitconverter.GetBytes(msg.throttle, bytes, offset + 18);
			offset += 20;
			return 74;
		}

		internal static int Serialize_COMMAND_INT(this Msg_command_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param1, bytes, offset + 0);
			bitconverter.GetBytes(msg.param2, bytes, offset + 4);
			bitconverter.GetBytes(msg.param3, bytes, offset + 8);
			bitconverter.GetBytes(msg.param4, bytes, offset + 12);
			bitconverter.GetBytes(msg.x, bytes, offset + 16);
			bitconverter.GetBytes(msg.y, bytes, offset + 20);
			bitconverter.GetBytes(msg.z, bytes, offset + 24);
			bitconverter.GetBytes(msg.command, bytes, offset + 28);
			bytes[offset + 30] = msg.target_system;
			bytes[offset + 31] = msg.target_component;
			bytes[offset + 32] = msg.frame;
			bytes[offset + 33] = msg.current;
			bytes[offset + 34] = msg.autocontinue;
			offset += 35;
			return 75;
		}

		internal static int Serialize_COMMAND_LONG(this Msg_command_long msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param1, bytes, offset + 0);
			bitconverter.GetBytes(msg.param2, bytes, offset + 4);
			bitconverter.GetBytes(msg.param3, bytes, offset + 8);
			bitconverter.GetBytes(msg.param4, bytes, offset + 12);
			bitconverter.GetBytes(msg.param5, bytes, offset + 16);
			bitconverter.GetBytes(msg.param6, bytes, offset + 20);
			bitconverter.GetBytes(msg.param7, bytes, offset + 24);
			bitconverter.GetBytes(msg.command, bytes, offset + 28);
			bytes[offset + 30] = msg.target_system;
			bytes[offset + 31] = msg.target_component;
			bytes[offset + 32] = msg.confirmation;
			offset += 33;
			return 76;
		}

		internal static int Serialize_COMMAND_ACK(this Msg_command_ack msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.command, bytes, offset + 0);
			bytes[offset + 2] = msg.result;
			offset += 3;
			return 77;
		}

		internal static int Serialize_MANUAL_SETPOINT(this Msg_manual_setpoint msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll, bytes, offset + 4);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 12);
			bitconverter.GetBytes(msg.thrust, bytes, offset + 16);
			bytes[offset + 20] = msg.mode_switch;
			bytes[offset + 21] = msg.manual_override_switch;
			offset += 22;
			return 81;
		}

		internal static int Serialize_SET_ATTITUDE_TARGET(this Msg_set_attitude_target msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.q, bytes, offset + 4, 4);
			bitconverter.GetBytes(msg.body_roll_rate, bytes, offset + 20);
			bitconverter.GetBytes(msg.body_pitch_rate, bytes, offset + 24);
			bitconverter.GetBytes(msg.body_yaw_rate, bytes, offset + 28);
			bitconverter.GetBytes(msg.thrust, bytes, offset + 32);
			bytes[offset + 36] = msg.target_system;
			bytes[offset + 37] = msg.target_component;
			bytes[offset + 38] = msg.type_mask;
			offset += 39;
			return 82;
		}

		internal static int Serialize_ATTITUDE_TARGET(this Msg_attitude_target msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.q, bytes, offset + 4, 4);
			bitconverter.GetBytes(msg.body_roll_rate, bytes, offset + 20);
			bitconverter.GetBytes(msg.body_pitch_rate, bytes, offset + 24);
			bitconverter.GetBytes(msg.body_yaw_rate, bytes, offset + 28);
			bitconverter.GetBytes(msg.thrust, bytes, offset + 32);
			bytes[offset + 36] = msg.type_mask;
			offset += 37;
			return 83;
		}

		internal static int Serialize_SET_POSITION_TARGET_LOCAL_NED(this Msg_set_position_target_local_ned msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 4);
			bitconverter.GetBytes(msg.y, bytes, offset + 8);
			bitconverter.GetBytes(msg.z, bytes, offset + 12);
			bitconverter.GetBytes(msg.vx, bytes, offset + 16);
			bitconverter.GetBytes(msg.vy, bytes, offset + 20);
			bitconverter.GetBytes(msg.vz, bytes, offset + 24);
			bitconverter.GetBytes(msg.afx, bytes, offset + 28);
			bitconverter.GetBytes(msg.afy, bytes, offset + 32);
			bitconverter.GetBytes(msg.afz, bytes, offset + 36);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 40);
			bitconverter.GetBytes(msg.yaw_rate, bytes, offset + 44);
			bitconverter.GetBytes(msg.type_mask, bytes, offset + 48);
			bytes[offset + 50] = msg.target_system;
			bytes[offset + 51] = msg.target_component;
			bytes[offset + 52] = msg.coordinate_frame;
			offset += 53;
			return 84;
		}

		internal static int Serialize_POSITION_TARGET_LOCAL_NED(this Msg_position_target_local_ned msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 4);
			bitconverter.GetBytes(msg.y, bytes, offset + 8);
			bitconverter.GetBytes(msg.z, bytes, offset + 12);
			bitconverter.GetBytes(msg.vx, bytes, offset + 16);
			bitconverter.GetBytes(msg.vy, bytes, offset + 20);
			bitconverter.GetBytes(msg.vz, bytes, offset + 24);
			bitconverter.GetBytes(msg.afx, bytes, offset + 28);
			bitconverter.GetBytes(msg.afy, bytes, offset + 32);
			bitconverter.GetBytes(msg.afz, bytes, offset + 36);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 40);
			bitconverter.GetBytes(msg.yaw_rate, bytes, offset + 44);
			bitconverter.GetBytes(msg.type_mask, bytes, offset + 48);
			bytes[offset + 50] = msg.coordinate_frame;
			offset += 51;
			return 85;
		}

		internal static int Serialize_SET_POSITION_TARGET_GLOBAL_INT(this Msg_set_position_target_global_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat_int, bytes, offset + 4);
			bitconverter.GetBytes(msg.lon_int, bytes, offset + 8);
			bitconverter.GetBytes(msg.alt, bytes, offset + 12);
			bitconverter.GetBytes(msg.vx, bytes, offset + 16);
			bitconverter.GetBytes(msg.vy, bytes, offset + 20);
			bitconverter.GetBytes(msg.vz, bytes, offset + 24);
			bitconverter.GetBytes(msg.afx, bytes, offset + 28);
			bitconverter.GetBytes(msg.afy, bytes, offset + 32);
			bitconverter.GetBytes(msg.afz, bytes, offset + 36);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 40);
			bitconverter.GetBytes(msg.yaw_rate, bytes, offset + 44);
			bitconverter.GetBytes(msg.type_mask, bytes, offset + 48);
			bytes[offset + 50] = msg.target_system;
			bytes[offset + 51] = msg.target_component;
			bytes[offset + 52] = msg.coordinate_frame;
			offset += 53;
			return 86;
		}

		internal static int Serialize_POSITION_TARGET_GLOBAL_INT(this Msg_position_target_global_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat_int, bytes, offset + 4);
			bitconverter.GetBytes(msg.lon_int, bytes, offset + 8);
			bitconverter.GetBytes(msg.alt, bytes, offset + 12);
			bitconverter.GetBytes(msg.vx, bytes, offset + 16);
			bitconverter.GetBytes(msg.vy, bytes, offset + 20);
			bitconverter.GetBytes(msg.vz, bytes, offset + 24);
			bitconverter.GetBytes(msg.afx, bytes, offset + 28);
			bitconverter.GetBytes(msg.afy, bytes, offset + 32);
			bitconverter.GetBytes(msg.afz, bytes, offset + 36);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 40);
			bitconverter.GetBytes(msg.yaw_rate, bytes, offset + 44);
			bitconverter.GetBytes(msg.type_mask, bytes, offset + 48);
			bytes[offset + 50] = msg.coordinate_frame;
			offset += 51;
			return 87;
		}

		internal static int Serialize_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(this Msg_local_position_ned_system_global_offset msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 4);
			bitconverter.GetBytes(msg.y, bytes, offset + 8);
			bitconverter.GetBytes(msg.z, bytes, offset + 12);
			bitconverter.GetBytes(msg.roll, bytes, offset + 16);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 20);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 24);
			offset += 28;
			return 89;
		}

		internal static int Serialize_HIL_STATE(this Msg_hil_state msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll, bytes, offset + 8);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 12);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 16);
			bitconverter.GetBytes(msg.rollspeed, bytes, offset + 20);
			bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 24);
			bitconverter.GetBytes(msg.yawspeed, bytes, offset + 28);
			bitconverter.GetBytes(msg.lat, bytes, offset + 32);
			bitconverter.GetBytes(msg.lon, bytes, offset + 36);
			bitconverter.GetBytes(msg.alt, bytes, offset + 40);
			bitconverter.GetBytes(msg.vx, bytes, offset + 44);
			bitconverter.GetBytes(msg.vy, bytes, offset + 46);
			bitconverter.GetBytes(msg.vz, bytes, offset + 48);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 50);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 52);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 54);
			offset += 56;
			return 90;
		}

		internal static int Serialize_HIL_CONTROLS(this Msg_hil_controls msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll_ailerons, bytes, offset + 8);
			bitconverter.GetBytes(msg.pitch_elevator, bytes, offset + 12);
			bitconverter.GetBytes(msg.yaw_rudder, bytes, offset + 16);
			bitconverter.GetBytes(msg.throttle, bytes, offset + 20);
			bitconverter.GetBytes(msg.aux1, bytes, offset + 24);
			bitconverter.GetBytes(msg.aux2, bytes, offset + 28);
			bitconverter.GetBytes(msg.aux3, bytes, offset + 32);
			bitconverter.GetBytes(msg.aux4, bytes, offset + 36);
			bytes[offset + 40] = msg.mode;
			bytes[offset + 41] = msg.nav_mode;
			offset += 42;
			return 91;
		}

		internal static int Serialize_HIL_RC_INPUTS_RAW(this Msg_hil_rc_inputs_raw msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.chan1_raw, bytes, offset + 8);
			bitconverter.GetBytes(msg.chan2_raw, bytes, offset + 10);
			bitconverter.GetBytes(msg.chan3_raw, bytes, offset + 12);
			bitconverter.GetBytes(msg.chan4_raw, bytes, offset + 14);
			bitconverter.GetBytes(msg.chan5_raw, bytes, offset + 16);
			bitconverter.GetBytes(msg.chan6_raw, bytes, offset + 18);
			bitconverter.GetBytes(msg.chan7_raw, bytes, offset + 20);
			bitconverter.GetBytes(msg.chan8_raw, bytes, offset + 22);
			bitconverter.GetBytes(msg.chan9_raw, bytes, offset + 24);
			bitconverter.GetBytes(msg.chan10_raw, bytes, offset + 26);
			bitconverter.GetBytes(msg.chan11_raw, bytes, offset + 28);
			bitconverter.GetBytes(msg.chan12_raw, bytes, offset + 30);
			bytes[offset + 32] = msg.rssi;
			offset += 33;
			return 92;
		}

		internal static int Serialize_HIL_ACTUATOR_CONTROLS(this Msg_hil_actuator_controls msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.flags, bytes, offset + 8);
			ByteArrayUtil.ToByteArray(msg.controls, bytes, offset + 16, 16);
			bytes[offset + 80] = msg.mode;
			offset += 81;
			return 93;
		}

		internal static int Serialize_OPTICAL_FLOW(this Msg_optical_flow msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.flow_comp_m_x, bytes, offset + 8);
			bitconverter.GetBytes(msg.flow_comp_m_y, bytes, offset + 12);
			bitconverter.GetBytes(msg.ground_distance, bytes, offset + 16);
			bitconverter.GetBytes(msg.flow_x, bytes, offset + 20);
			bitconverter.GetBytes(msg.flow_y, bytes, offset + 22);
			bytes[offset + 24] = msg.sensor_id;
			bytes[offset + 25] = msg.quality;
			offset += 26;
			return 100;
		}

		internal static int Serialize_GLOBAL_VISION_POSITION_ESTIMATE(this Msg_global_vision_position_estimate msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 8);
			bitconverter.GetBytes(msg.y, bytes, offset + 12);
			bitconverter.GetBytes(msg.z, bytes, offset + 16);
			bitconverter.GetBytes(msg.roll, bytes, offset + 20);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 24);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 28);
			offset += 32;
			return 101;
		}

		internal static int Serialize_VISION_POSITION_ESTIMATE(this Msg_vision_position_estimate msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 8);
			bitconverter.GetBytes(msg.y, bytes, offset + 12);
			bitconverter.GetBytes(msg.z, bytes, offset + 16);
			bitconverter.GetBytes(msg.roll, bytes, offset + 20);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 24);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 28);
			offset += 32;
			return 102;
		}

		internal static int Serialize_VISION_SPEED_ESTIMATE(this Msg_vision_speed_estimate msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 8);
			bitconverter.GetBytes(msg.y, bytes, offset + 12);
			bitconverter.GetBytes(msg.z, bytes, offset + 16);
			offset += 20;
			return 103;
		}

		internal static int Serialize_VICON_POSITION_ESTIMATE(this Msg_vicon_position_estimate msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 8);
			bitconverter.GetBytes(msg.y, bytes, offset + 12);
			bitconverter.GetBytes(msg.z, bytes, offset + 16);
			bitconverter.GetBytes(msg.roll, bytes, offset + 20);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 24);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 28);
			offset += 32;
			return 104;
		}

		internal static int Serialize_HIGHRES_IMU(this Msg_highres_imu msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 8);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 12);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 16);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 20);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 24);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 28);
			bitconverter.GetBytes(msg.xmag, bytes, offset + 32);
			bitconverter.GetBytes(msg.ymag, bytes, offset + 36);
			bitconverter.GetBytes(msg.zmag, bytes, offset + 40);
			bitconverter.GetBytes(msg.abs_pressure, bytes, offset + 44);
			bitconverter.GetBytes(msg.diff_pressure, bytes, offset + 48);
			bitconverter.GetBytes(msg.pressure_alt, bytes, offset + 52);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 56);
			bitconverter.GetBytes(msg.fields_updated, bytes, offset + 60);
			offset += 62;
			return 105;
		}

		internal static int Serialize_OPTICAL_FLOW_RAD(this Msg_optical_flow_rad msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.integration_time_us, bytes, offset + 8);
			bitconverter.GetBytes(msg.integrated_x, bytes, offset + 12);
			bitconverter.GetBytes(msg.integrated_y, bytes, offset + 16);
			bitconverter.GetBytes(msg.integrated_xgyro, bytes, offset + 20);
			bitconverter.GetBytes(msg.integrated_ygyro, bytes, offset + 24);
			bitconverter.GetBytes(msg.integrated_zgyro, bytes, offset + 28);
			bitconverter.GetBytes(msg.time_delta_distance_us, bytes, offset + 32);
			bitconverter.GetBytes(msg.distance, bytes, offset + 36);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 40);
			bytes[offset + 42] = msg.sensor_id;
			bytes[offset + 43] = msg.quality;
			offset += 44;
			return 106;
		}

		internal static int Serialize_HIL_SENSOR(this Msg_hil_sensor msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 8);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 12);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 16);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 20);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 24);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 28);
			bitconverter.GetBytes(msg.xmag, bytes, offset + 32);
			bitconverter.GetBytes(msg.ymag, bytes, offset + 36);
			bitconverter.GetBytes(msg.zmag, bytes, offset + 40);
			bitconverter.GetBytes(msg.abs_pressure, bytes, offset + 44);
			bitconverter.GetBytes(msg.diff_pressure, bytes, offset + 48);
			bitconverter.GetBytes(msg.pressure_alt, bytes, offset + 52);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 56);
			bitconverter.GetBytes(msg.fields_updated, bytes, offset + 60);
			offset += 64;
			return 107;
		}

		internal static int Serialize_SIM_STATE(this Msg_sim_state msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.q1, bytes, offset + 0);
			bitconverter.GetBytes(msg.q2, bytes, offset + 4);
			bitconverter.GetBytes(msg.q3, bytes, offset + 8);
			bitconverter.GetBytes(msg.q4, bytes, offset + 12);
			bitconverter.GetBytes(msg.roll, bytes, offset + 16);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 20);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 24);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 28);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 32);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 36);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 40);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 44);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 48);
			bitconverter.GetBytes(msg.lat, bytes, offset + 52);
			bitconverter.GetBytes(msg.lon, bytes, offset + 56);
			bitconverter.GetBytes(msg.alt, bytes, offset + 60);
			bitconverter.GetBytes(msg.std_dev_horz, bytes, offset + 64);
			bitconverter.GetBytes(msg.std_dev_vert, bytes, offset + 68);
			bitconverter.GetBytes(msg.vn, bytes, offset + 72);
			bitconverter.GetBytes(msg.ve, bytes, offset + 76);
			bitconverter.GetBytes(msg.vd, bytes, offset + 80);
			offset += 84;
			return 108;
		}

		internal static int Serialize_RADIO_STATUS(this Msg_radio_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.rxerrors, bytes, offset + 0);
			bitconverter.GetBytes(msg.@fixed, bytes, offset + 2);
			bytes[offset + 4] = msg.rssi;
			bytes[offset + 5] = msg.remrssi;
			bytes[offset + 6] = msg.txbuf;
			bytes[offset + 7] = msg.noise;
			bytes[offset + 8] = msg.remnoise;
			offset += 9;
			return 109;
		}

		internal static int Serialize_FILE_TRANSFER_PROTOCOL(this Msg_file_transfer_protocol msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_network;
			bytes[offset + 1] = msg.target_system;
			bytes[offset + 2] = msg.target_component;
			ByteArrayUtil.ToByteArray(msg.payload, bytes, offset + 3, 251);
			offset += 254;
			return 110;
		}

		internal static int Serialize_TIMESYNC(this Msg_timesync msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.tc1, bytes, offset + 0);
			bitconverter.GetBytes(msg.ts1, bytes, offset + 8);
			offset += 16;
			return 111;
		}

		internal static int Serialize_CAMERA_TRIGGER(this Msg_camera_trigger msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.seq, bytes, offset + 8);
			offset += 12;
			return 112;
		}

		internal static int Serialize_HIL_GPS(this Msg_hil_gps msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 8);
			bitconverter.GetBytes(msg.lon, bytes, offset + 12);
			bitconverter.GetBytes(msg.alt, bytes, offset + 16);
			bitconverter.GetBytes(msg.eph, bytes, offset + 20);
			bitconverter.GetBytes(msg.epv, bytes, offset + 22);
			bitconverter.GetBytes(msg.vel, bytes, offset + 24);
			bitconverter.GetBytes(msg.vn, bytes, offset + 26);
			bitconverter.GetBytes(msg.ve, bytes, offset + 28);
			bitconverter.GetBytes(msg.vd, bytes, offset + 30);
			bitconverter.GetBytes(msg.cog, bytes, offset + 32);
			bytes[offset + 34] = msg.fix_type;
			bytes[offset + 35] = msg.satellites_visible;
			offset += 36;
			return 113;
		}

		internal static int Serialize_HIL_OPTICAL_FLOW(this Msg_hil_optical_flow msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.integration_time_us, bytes, offset + 8);
			bitconverter.GetBytes(msg.integrated_x, bytes, offset + 12);
			bitconverter.GetBytes(msg.integrated_y, bytes, offset + 16);
			bitconverter.GetBytes(msg.integrated_xgyro, bytes, offset + 20);
			bitconverter.GetBytes(msg.integrated_ygyro, bytes, offset + 24);
			bitconverter.GetBytes(msg.integrated_zgyro, bytes, offset + 28);
			bitconverter.GetBytes(msg.time_delta_distance_us, bytes, offset + 32);
			bitconverter.GetBytes(msg.distance, bytes, offset + 36);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 40);
			bytes[offset + 42] = msg.sensor_id;
			bytes[offset + 43] = msg.quality;
			offset += 44;
			return 114;
		}

		internal static int Serialize_HIL_STATE_QUATERNION(this Msg_hil_state_quaternion msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.attitude_quaternion, bytes, offset + 8, 4);
			bitconverter.GetBytes(msg.rollspeed, bytes, offset + 24);
			bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 28);
			bitconverter.GetBytes(msg.yawspeed, bytes, offset + 32);
			bitconverter.GetBytes(msg.lat, bytes, offset + 36);
			bitconverter.GetBytes(msg.lon, bytes, offset + 40);
			bitconverter.GetBytes(msg.alt, bytes, offset + 44);
			bitconverter.GetBytes(msg.vx, bytes, offset + 48);
			bitconverter.GetBytes(msg.vy, bytes, offset + 50);
			bitconverter.GetBytes(msg.vz, bytes, offset + 52);
			bitconverter.GetBytes(msg.ind_airspeed, bytes, offset + 54);
			bitconverter.GetBytes(msg.true_airspeed, bytes, offset + 56);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 58);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 60);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 62);
			offset += 64;
			return 115;
		}

		internal static int Serialize_SCALED_IMU2(this Msg_scaled_imu2 msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 4);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 6);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 8);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 10);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 12);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 14);
			bitconverter.GetBytes(msg.xmag, bytes, offset + 16);
			bitconverter.GetBytes(msg.ymag, bytes, offset + 18);
			bitconverter.GetBytes(msg.zmag, bytes, offset + 20);
			offset += 22;
			return 116;
		}

		internal static int Serialize_LOG_REQUEST_LIST(this Msg_log_request_list msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.start, bytes, offset + 0);
			bitconverter.GetBytes(msg.end, bytes, offset + 2);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.target_component;
			offset += 6;
			return 117;
		}

		internal static int Serialize_LOG_ENTRY(this Msg_log_entry msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_utc, bytes, offset + 0);
			bitconverter.GetBytes(msg.size, bytes, offset + 4);
			bitconverter.GetBytes(msg.id, bytes, offset + 8);
			bitconverter.GetBytes(msg.num_logs, bytes, offset + 10);
			bitconverter.GetBytes(msg.last_log_num, bytes, offset + 12);
			offset += 14;
			return 118;
		}

		internal static int Serialize_LOG_REQUEST_DATA(this Msg_log_request_data msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.ofs, bytes, offset + 0);
			bitconverter.GetBytes(msg.count, bytes, offset + 4);
			bitconverter.GetBytes(msg.id, bytes, offset + 8);
			bytes[offset + 10] = msg.target_system;
			bytes[offset + 11] = msg.target_component;
			offset += 12;
			return 119;
		}

		internal static int Serialize_LOG_DATA(this Msg_log_data msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.ofs, bytes, offset + 0);
			bitconverter.GetBytes(msg.id, bytes, offset + 4);
			bytes[offset + 6] = msg.count;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 7, 90);
			offset += 97;
			return 120;
		}

		internal static int Serialize_LOG_ERASE(this Msg_log_erase msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			offset += 2;
			return 121;
		}

		internal static int Serialize_LOG_REQUEST_END(this Msg_log_request_end msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			offset += 2;
			return 122;
		}

		internal static int Serialize_GPS_INJECT_DATA(this Msg_gps_inject_data msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.len;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 3, 110);
			offset += 113;
			return 123;
		}

		internal static int Serialize_GPS2_RAW(this Msg_gps2_raw msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 8);
			bitconverter.GetBytes(msg.lon, bytes, offset + 12);
			bitconverter.GetBytes(msg.alt, bytes, offset + 16);
			bitconverter.GetBytes(msg.dgps_age, bytes, offset + 20);
			bitconverter.GetBytes(msg.eph, bytes, offset + 24);
			bitconverter.GetBytes(msg.epv, bytes, offset + 26);
			bitconverter.GetBytes(msg.vel, bytes, offset + 28);
			bitconverter.GetBytes(msg.cog, bytes, offset + 30);
			bytes[offset + 32] = msg.fix_type;
			bytes[offset + 33] = msg.satellites_visible;
			bytes[offset + 34] = msg.dgps_numch;
			offset += 35;
			return 124;
		}

		internal static int Serialize_POWER_STATUS(this Msg_power_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.Vcc, bytes, offset + 0);
			bitconverter.GetBytes(msg.Vservo, bytes, offset + 2);
			bitconverter.GetBytes(msg.flags, bytes, offset + 4);
			offset += 6;
			return 125;
		}

		internal static int Serialize_SERIAL_CONTROL(this Msg_serial_control msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.baudrate, bytes, offset + 0);
			bitconverter.GetBytes(msg.timeout, bytes, offset + 4);
			bytes[offset + 6] = msg.device;
			bytes[offset + 7] = msg.flags;
			bytes[offset + 8] = msg.count;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 9, 70);
			offset += 79;
			return 126;
		}

		internal static int Serialize_GPS_RTK(this Msg_gps_rtk msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_last_baseline_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.tow, bytes, offset + 4);
			bitconverter.GetBytes(msg.baseline_a_mm, bytes, offset + 8);
			bitconverter.GetBytes(msg.baseline_b_mm, bytes, offset + 12);
			bitconverter.GetBytes(msg.baseline_c_mm, bytes, offset + 16);
			bitconverter.GetBytes(msg.accuracy, bytes, offset + 20);
			bitconverter.GetBytes(msg.iar_num_hypotheses, bytes, offset + 24);
			bitconverter.GetBytes(msg.wn, bytes, offset + 28);
			bytes[offset + 30] = msg.rtk_receiver_id;
			bytes[offset + 31] = msg.rtk_health;
			bytes[offset + 32] = msg.rtk_rate;
			bytes[offset + 33] = msg.nsats;
			bytes[offset + 34] = msg.baseline_coords_type;
			offset += 35;
			return 127;
		}

		internal static int Serialize_GPS2_RTK(this Msg_gps2_rtk msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_last_baseline_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.tow, bytes, offset + 4);
			bitconverter.GetBytes(msg.baseline_a_mm, bytes, offset + 8);
			bitconverter.GetBytes(msg.baseline_b_mm, bytes, offset + 12);
			bitconverter.GetBytes(msg.baseline_c_mm, bytes, offset + 16);
			bitconverter.GetBytes(msg.accuracy, bytes, offset + 20);
			bitconverter.GetBytes(msg.iar_num_hypotheses, bytes, offset + 24);
			bitconverter.GetBytes(msg.wn, bytes, offset + 28);
			bytes[offset + 30] = msg.rtk_receiver_id;
			bytes[offset + 31] = msg.rtk_health;
			bytes[offset + 32] = msg.rtk_rate;
			bytes[offset + 33] = msg.nsats;
			bytes[offset + 34] = msg.baseline_coords_type;
			offset += 35;
			return 128;
		}

		internal static int Serialize_SCALED_IMU3(this Msg_scaled_imu3 msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 4);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 6);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 8);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 10);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 12);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 14);
			bitconverter.GetBytes(msg.xmag, bytes, offset + 16);
			bitconverter.GetBytes(msg.ymag, bytes, offset + 18);
			bitconverter.GetBytes(msg.zmag, bytes, offset + 20);
			offset += 22;
			return 129;
		}

		internal static int Serialize_DATA_TRANSMISSION_HANDSHAKE(this Msg_data_transmission_handshake msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.size, bytes, offset + 0);
			bitconverter.GetBytes(msg.width, bytes, offset + 4);
			bitconverter.GetBytes(msg.height, bytes, offset + 6);
			bitconverter.GetBytes(msg.packets, bytes, offset + 8);
			bytes[offset + 10] = msg.type;
			bytes[offset + 11] = msg.payload;
			bytes[offset + 12] = msg.jpg_quality;
			offset += 13;
			return 130;
		}

		internal static int Serialize_ENCAPSULATED_DATA(this Msg_encapsulated_data msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seqnr, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 2, 253);
			offset += 255;
			return 131;
		}

		internal static int Serialize_DISTANCE_SENSOR(this Msg_distance_sensor msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.min_distance, bytes, offset + 4);
			bitconverter.GetBytes(msg.max_distance, bytes, offset + 6);
			bitconverter.GetBytes(msg.current_distance, bytes, offset + 8);
			bytes[offset + 10] = msg.type;
			bytes[offset + 11] = msg.id;
			bytes[offset + 12] = msg.orientation;
			bytes[offset + 13] = msg.covariance;
			offset += 14;
			return 132;
		}

		internal static int Serialize_TERRAIN_REQUEST(this Msg_terrain_request msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.mask, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 8);
			bitconverter.GetBytes(msg.lon, bytes, offset + 12);
			bitconverter.GetBytes(msg.grid_spacing, bytes, offset + 16);
			offset += 18;
			return 133;
		}

		internal static int Serialize_TERRAIN_DATA(this Msg_terrain_data msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.lat, bytes, offset + 0);
			bitconverter.GetBytes(msg.lon, bytes, offset + 4);
			bitconverter.GetBytes(msg.grid_spacing, bytes, offset + 8);
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 10, 16);
			bytes[offset + 42] = msg.gridbit;
			offset += 43;
			return 134;
		}

		internal static int Serialize_TERRAIN_CHECK(this Msg_terrain_check msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.lat, bytes, offset + 0);
			bitconverter.GetBytes(msg.lon, bytes, offset + 4);
			offset += 8;
			return 135;
		}

		internal static int Serialize_TERRAIN_REPORT(this Msg_terrain_report msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.lat, bytes, offset + 0);
			bitconverter.GetBytes(msg.lon, bytes, offset + 4);
			bitconverter.GetBytes(msg.terrain_height, bytes, offset + 8);
			bitconverter.GetBytes(msg.current_height, bytes, offset + 12);
			bitconverter.GetBytes(msg.spacing, bytes, offset + 16);
			bitconverter.GetBytes(msg.pending, bytes, offset + 18);
			bitconverter.GetBytes(msg.loaded, bytes, offset + 20);
			offset += 22;
			return 136;
		}

		internal static int Serialize_SCALED_PRESSURE2(this Msg_scaled_pressure2 msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.press_abs, bytes, offset + 4);
			bitconverter.GetBytes(msg.press_diff, bytes, offset + 8);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 12);
			offset += 14;
			return 137;
		}

		internal static int Serialize_ATT_POS_MOCAP(this Msg_att_pos_mocap msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.q, bytes, offset + 8, 4);
			bitconverter.GetBytes(msg.x, bytes, offset + 24);
			bitconverter.GetBytes(msg.y, bytes, offset + 28);
			bitconverter.GetBytes(msg.z, bytes, offset + 32);
			offset += 36;
			return 138;
		}

		internal static int Serialize_SET_ACTUATOR_CONTROL_TARGET(this Msg_set_actuator_control_target msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.controls, bytes, offset + 8, 8);
			bytes[offset + 40] = msg.group_mlx;
			bytes[offset + 41] = msg.target_system;
			bytes[offset + 42] = msg.target_component;
			offset += 43;
			return 139;
		}

		internal static int Serialize_ACTUATOR_CONTROL_TARGET(this Msg_actuator_control_target msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.controls, bytes, offset + 8, 8);
			bytes[offset + 40] = msg.group_mlx;
			offset += 41;
			return 140;
		}

		internal static int Serialize_ALTITUDE(this Msg_altitude msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.altitude_monotonic, bytes, offset + 8);
			bitconverter.GetBytes(msg.altitude_amsl, bytes, offset + 12);
			bitconverter.GetBytes(msg.altitude_local, bytes, offset + 16);
			bitconverter.GetBytes(msg.altitude_relative, bytes, offset + 20);
			bitconverter.GetBytes(msg.altitude_terrain, bytes, offset + 24);
			bitconverter.GetBytes(msg.bottom_clearance, bytes, offset + 28);
			offset += 32;
			return 141;
		}

		internal static int Serialize_RESOURCE_REQUEST(this Msg_resource_request msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.request_id;
			bytes[offset + 1] = msg.uri_type;
			ByteArrayUtil.ToByteArray(msg.uri, bytes, offset + 2, 120);
			bytes[offset + 122] = msg.transfer_type;
			ByteArrayUtil.ToByteArray(msg.storage, bytes, offset + 123, 120);
			offset += 243;
			return 142;
		}

		internal static int Serialize_SCALED_PRESSURE3(this Msg_scaled_pressure3 msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.press_abs, bytes, offset + 4);
			bitconverter.GetBytes(msg.press_diff, bytes, offset + 8);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 12);
			offset += 14;
			return 143;
		}

		internal static int Serialize_FOLLOW_TARGET(this Msg_follow_target msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.timestamp, bytes, offset + 0);
			bitconverter.GetBytes(msg.custom_state, bytes, offset + 8);
			bitconverter.GetBytes(msg.lat, bytes, offset + 16);
			bitconverter.GetBytes(msg.lon, bytes, offset + 20);
			bitconverter.GetBytes(msg.alt, bytes, offset + 24);
			ByteArrayUtil.ToByteArray(msg.vel, bytes, offset + 28, 3);
			ByteArrayUtil.ToByteArray(msg.acc, bytes, offset + 40, 3);
			ByteArrayUtil.ToByteArray(msg.attitude_q, bytes, offset + 52, 4);
			ByteArrayUtil.ToByteArray(msg.rates, bytes, offset + 68, 3);
			ByteArrayUtil.ToByteArray(msg.position_cov, bytes, offset + 80, 3);
			bytes[offset + 92] = msg.est_capabilities;
			offset += 93;
			return 144;
		}

		internal static int Serialize_CONTROL_SYSTEM_STATE(this Msg_control_system_state msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x_acc, bytes, offset + 8);
			bitconverter.GetBytes(msg.y_acc, bytes, offset + 12);
			bitconverter.GetBytes(msg.z_acc, bytes, offset + 16);
			bitconverter.GetBytes(msg.x_vel, bytes, offset + 20);
			bitconverter.GetBytes(msg.y_vel, bytes, offset + 24);
			bitconverter.GetBytes(msg.z_vel, bytes, offset + 28);
			bitconverter.GetBytes(msg.x_pos, bytes, offset + 32);
			bitconverter.GetBytes(msg.y_pos, bytes, offset + 36);
			bitconverter.GetBytes(msg.z_pos, bytes, offset + 40);
			bitconverter.GetBytes(msg.airspeed, bytes, offset + 44);
			ByteArrayUtil.ToByteArray(msg.vel_variance, bytes, offset + 48, 3);
			ByteArrayUtil.ToByteArray(msg.pos_variance, bytes, offset + 60, 3);
			ByteArrayUtil.ToByteArray(msg.q, bytes, offset + 72, 4);
			bitconverter.GetBytes(msg.roll_rate, bytes, offset + 88);
			bitconverter.GetBytes(msg.pitch_rate, bytes, offset + 92);
			bitconverter.GetBytes(msg.yaw_rate, bytes, offset + 96);
			offset += 100;
			return 146;
		}

		internal static int Serialize_BATTERY_STATUS(this Msg_battery_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.current_consumed, bytes, offset + 0);
			bitconverter.GetBytes(msg.energy_consumed, bytes, offset + 4);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 8);
			ByteArrayUtil.ToByteArray(msg.voltages, bytes, offset + 10, 10);
			bitconverter.GetBytes(msg.current_battery, bytes, offset + 30);
			bytes[offset + 32] = msg.id;
			bytes[offset + 33] = msg.battery_function;
			bytes[offset + 34] = msg.type;
			bytes[offset + 35] = unchecked((byte)msg.battery_remaining);
			offset += 36;
			return 147;
		}

		internal static int Serialize_AUTOPILOT_VERSION(this Msg_autopilot_version msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.capabilities, bytes, offset + 0);
			bitconverter.GetBytes(msg.uid, bytes, offset + 8);
			bitconverter.GetBytes(msg.flight_sw_version, bytes, offset + 16);
			bitconverter.GetBytes(msg.middleware_sw_version, bytes, offset + 20);
			bitconverter.GetBytes(msg.os_sw_version, bytes, offset + 24);
			bitconverter.GetBytes(msg.board_version, bytes, offset + 28);
			bitconverter.GetBytes(msg.vendor_id, bytes, offset + 32);
			bitconverter.GetBytes(msg.product_id, bytes, offset + 34);
			ByteArrayUtil.ToByteArray(msg.flight_custom_version, bytes, offset + 36, 8);
			ByteArrayUtil.ToByteArray(msg.middleware_custom_version, bytes, offset + 44, 8);
			ByteArrayUtil.ToByteArray(msg.os_custom_version, bytes, offset + 52, 8);
			offset += 60;
			return 148;
		}

		internal static int Serialize_LANDING_TARGET(this Msg_landing_target msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.angle_x, bytes, offset + 8);
			bitconverter.GetBytes(msg.angle_y, bytes, offset + 12);
			bitconverter.GetBytes(msg.distance, bytes, offset + 16);
			bitconverter.GetBytes(msg.size_x, bytes, offset + 20);
			bitconverter.GetBytes(msg.size_y, bytes, offset + 24);
			bytes[offset + 28] = msg.target_num;
			bytes[offset + 29] = msg.frame;
			offset += 30;
			return 149;
		}

		internal static int Serialize_ESTIMATOR_STATUS(this Msg_estimator_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.vel_ratio, bytes, offset + 8);
			bitconverter.GetBytes(msg.pos_horiz_ratio, bytes, offset + 12);
			bitconverter.GetBytes(msg.pos_vert_ratio, bytes, offset + 16);
			bitconverter.GetBytes(msg.mag_ratio, bytes, offset + 20);
			bitconverter.GetBytes(msg.hagl_ratio, bytes, offset + 24);
			bitconverter.GetBytes(msg.tas_ratio, bytes, offset + 28);
			bitconverter.GetBytes(msg.pos_horiz_accuracy, bytes, offset + 32);
			bitconverter.GetBytes(msg.pos_vert_accuracy, bytes, offset + 36);
			bitconverter.GetBytes(msg.flags, bytes, offset + 40);
			offset += 42;
			return 230;
		}

		internal static int Serialize_WIND_COV(this Msg_wind_cov msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.wind_x, bytes, offset + 8);
			bitconverter.GetBytes(msg.wind_y, bytes, offset + 12);
			bitconverter.GetBytes(msg.wind_z, bytes, offset + 16);
			bitconverter.GetBytes(msg.var_horiz, bytes, offset + 20);
			bitconverter.GetBytes(msg.var_vert, bytes, offset + 24);
			bitconverter.GetBytes(msg.wind_alt, bytes, offset + 28);
			bitconverter.GetBytes(msg.horiz_accuracy, bytes, offset + 32);
			bitconverter.GetBytes(msg.vert_accuracy, bytes, offset + 36);
			offset += 40;
			return 231;
		}

		internal static int Serialize_GPS_INPUT(this Msg_gps_input msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.time_week_ms, bytes, offset + 8);
			bitconverter.GetBytes(msg.lat, bytes, offset + 12);
			bitconverter.GetBytes(msg.lon, bytes, offset + 16);
			bitconverter.GetBytes(msg.alt, bytes, offset + 20);
			bitconverter.GetBytes(msg.hdop, bytes, offset + 24);
			bitconverter.GetBytes(msg.vdop, bytes, offset + 28);
			bitconverter.GetBytes(msg.vn, bytes, offset + 32);
			bitconverter.GetBytes(msg.ve, bytes, offset + 36);
			bitconverter.GetBytes(msg.vd, bytes, offset + 40);
			bitconverter.GetBytes(msg.speed_accuracy, bytes, offset + 44);
			bitconverter.GetBytes(msg.horiz_accuracy, bytes, offset + 48);
			bitconverter.GetBytes(msg.vert_accuracy, bytes, offset + 52);
			bitconverter.GetBytes(msg.ignore_flags, bytes, offset + 56);
			bitconverter.GetBytes(msg.time_week, bytes, offset + 58);
			bytes[offset + 60] = msg.gps_id;
			bytes[offset + 61] = msg.fix_type;
			bytes[offset + 62] = msg.satellites_visible;
			offset += 63;
			return 232;
		}

		internal static int Serialize_GPS_RTCM_DATA(this Msg_gps_rtcm_data msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.flags;
			bytes[offset + 1] = msg.len;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 2, 180);
			offset += 182;
			return 233;
		}

		internal static int Serialize_HIGH_LATENCY(this Msg_high_latency msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.custom_mode, bytes, offset + 0);
			bitconverter.GetBytes(msg.latitude, bytes, offset + 4);
			bitconverter.GetBytes(msg.longitude, bytes, offset + 8);
			bitconverter.GetBytes(msg.roll, bytes, offset + 12);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 14);
			bitconverter.GetBytes(msg.heading, bytes, offset + 16);
			bitconverter.GetBytes(msg.heading_sp, bytes, offset + 18);
			bitconverter.GetBytes(msg.altitude_amsl, bytes, offset + 20);
			bitconverter.GetBytes(msg.altitude_sp, bytes, offset + 22);
			bitconverter.GetBytes(msg.wp_distance, bytes, offset + 24);
			bytes[offset + 26] = msg.base_mode;
			bytes[offset + 27] = msg.landed_state;
			bytes[offset + 28] = unchecked((byte)msg.throttle);
			bytes[offset + 29] = msg.airspeed;
			bytes[offset + 30] = msg.airspeed_sp;
			bytes[offset + 31] = msg.groundspeed;
			bytes[offset + 32] = unchecked((byte)msg.climb_rate);
			bytes[offset + 33] = msg.gps_nsat;
			bytes[offset + 34] = msg.gps_fix_type;
			bytes[offset + 35] = msg.battery_remaining;
			bytes[offset + 36] = unchecked((byte)msg.temperature);
			bytes[offset + 37] = unchecked((byte)msg.temperature_air);
			bytes[offset + 38] = msg.failsafe;
			bytes[offset + 39] = msg.wp_num;
			offset += 40;
			return 234;
		}

		internal static int Serialize_VIBRATION(this Msg_vibration msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.vibration_x, bytes, offset + 8);
			bitconverter.GetBytes(msg.vibration_y, bytes, offset + 12);
			bitconverter.GetBytes(msg.vibration_z, bytes, offset + 16);
			bitconverter.GetBytes(msg.clipping_0, bytes, offset + 20);
			bitconverter.GetBytes(msg.clipping_1, bytes, offset + 24);
			bitconverter.GetBytes(msg.clipping_2, bytes, offset + 28);
			offset += 32;
			return 241;
		}

		internal static int Serialize_HOME_POSITION(this Msg_home_position msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.latitude, bytes, offset + 0);
			bitconverter.GetBytes(msg.longitude, bytes, offset + 4);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 8);
			bitconverter.GetBytes(msg.x, bytes, offset + 12);
			bitconverter.GetBytes(msg.y, bytes, offset + 16);
			bitconverter.GetBytes(msg.z, bytes, offset + 20);
			ByteArrayUtil.ToByteArray(msg.q, bytes, offset + 24, 4);
			bitconverter.GetBytes(msg.approach_x, bytes, offset + 40);
			bitconverter.GetBytes(msg.approach_y, bytes, offset + 44);
			bitconverter.GetBytes(msg.approach_z, bytes, offset + 48);
			offset += 52;
			return 242;
		}

		internal static int Serialize_SET_HOME_POSITION(this Msg_set_home_position msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.latitude, bytes, offset + 0);
			bitconverter.GetBytes(msg.longitude, bytes, offset + 4);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 8);
			bitconverter.GetBytes(msg.x, bytes, offset + 12);
			bitconverter.GetBytes(msg.y, bytes, offset + 16);
			bitconverter.GetBytes(msg.z, bytes, offset + 20);
			ByteArrayUtil.ToByteArray(msg.q, bytes, offset + 24, 4);
			bitconverter.GetBytes(msg.approach_x, bytes, offset + 40);
			bitconverter.GetBytes(msg.approach_y, bytes, offset + 44);
			bitconverter.GetBytes(msg.approach_z, bytes, offset + 48);
			bytes[offset + 52] = msg.target_system;
			offset += 53;
			return 243;
		}

		internal static int Serialize_MESSAGE_INTERVAL(this Msg_message_interval msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.interval_us, bytes, offset + 0);
			bitconverter.GetBytes(msg.message_id, bytes, offset + 4);
			offset += 6;
			return 244;
		}

		internal static int Serialize_EXTENDED_SYS_STATE(this Msg_extended_sys_state msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.vtol_state;
			bytes[offset + 1] = msg.landed_state;
			offset += 2;
			return 245;
		}

		internal static int Serialize_ADSB_VEHICLE(this Msg_adsb_vehicle msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.ICAO_address, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 4);
			bitconverter.GetBytes(msg.lon, bytes, offset + 8);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 12);
			bitconverter.GetBytes(msg.heading, bytes, offset + 16);
			bitconverter.GetBytes(msg.hor_velocity, bytes, offset + 18);
			bitconverter.GetBytes(msg.ver_velocity, bytes, offset + 20);
			bitconverter.GetBytes(msg.flags, bytes, offset + 22);
			bitconverter.GetBytes(msg.squawk, bytes, offset + 24);
			bytes[offset + 26] = msg.altitude_type;
			ByteArrayUtil.ToByteArray(msg.callsign, bytes, offset + 27, 9);
			bytes[offset + 36] = msg.emitter_type;
			bytes[offset + 37] = msg.tslc;
			offset += 38;
			return 246;
		}

		internal static int Serialize_COLLISION(this Msg_collision msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.id, bytes, offset + 0);
			bitconverter.GetBytes(msg.time_to_minimum_delta, bytes, offset + 4);
			bitconverter.GetBytes(msg.altitude_minimum_delta, bytes, offset + 8);
			bitconverter.GetBytes(msg.horizontal_minimum_delta, bytes, offset + 12);
			bytes[offset + 16] = msg.src;
			bytes[offset + 17] = msg.action;
			bytes[offset + 18] = msg.threat_level;
			offset += 19;
			return 247;
		}

		internal static int Serialize_V2_EXTENSION(this Msg_v2_extension msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.message_type, bytes, offset + 0);
			bytes[offset + 2] = msg.target_network;
			bytes[offset + 3] = msg.target_system;
			bytes[offset + 4] = msg.target_component;
			ByteArrayUtil.ToByteArray(msg.payload, bytes, offset + 5, 249);
			offset += 254;
			return 248;
		}

		internal static int Serialize_MEMORY_VECT(this Msg_memory_vect msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.address, bytes, offset + 0);
			bytes[offset + 2] = msg.ver;
			bytes[offset + 3] = msg.type;
			ByteArrayUtil.ToByteArray(msg.value, bytes, offset + 4, 32);
			offset += 36;
			return 249;
		}

		internal static int Serialize_DEBUG_VECT(this Msg_debug_vect msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 8);
			bitconverter.GetBytes(msg.y, bytes, offset + 12);
			bitconverter.GetBytes(msg.z, bytes, offset + 16);
			ByteArrayUtil.ToByteArray(msg.name, bytes, offset + 20, 10);
			offset += 30;
			return 250;
		}

		internal static int Serialize_NAMED_VALUE_FLOAT(this Msg_named_value_float msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.value, bytes, offset + 4);
			ByteArrayUtil.ToByteArray(msg.name, bytes, offset + 8, 10);
			offset += 18;
			return 251;
		}

		internal static int Serialize_NAMED_VALUE_INT(this Msg_named_value_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.value, bytes, offset + 4);
			ByteArrayUtil.ToByteArray(msg.name, bytes, offset + 8, 10);
			offset += 18;
			return 252;
		}

		internal static int Serialize_STATUSTEXT(this Msg_statustext msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.severity;
			ByteArrayUtil.ToByteArray(msg.text, bytes, offset + 1, 50);
			offset += 51;
			return 253;
		}

		internal static int Serialize_DEBUG(this Msg_debug msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.value, bytes, offset + 4);
			bytes[offset + 8] = msg.ind;
			offset += 9;
			return 254;
		}
	}

}

