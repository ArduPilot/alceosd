/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Generated from: ardupilotmega.xml,common.xml,uAvionix.xml

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;

    
using System.Reflection;    
    /*
[assembly: AssemblyTitle("Mavlink Classes")]
[assembly: AssemblyDescription("Generated Message Classes for Mavlink. See http://qgroundcontrol.org/mavlink/start")]
[assembly: AssemblyProduct("Mavlink")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
*/
    namespace MavLink
{

	/// <summary>
	/// Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data.
	/// </summary>
	public enum MAV_CMD : uint
	{

		/// <summary>
		/// Navigate to MISSION.
		/// </summary>
		MAV_CMD_NAV_WAYPOINT = 16,

		/// <summary>
		/// Loiter around this MISSION an unlimited amount of time
		/// </summary>
		MAV_CMD_NAV_LOITER_UNLIM = 17,

		/// <summary>
		/// Loiter around this MISSION for X turns
		/// </summary>
		MAV_CMD_NAV_LOITER_TURNS = 18,

		/// <summary>
		/// Loiter around this MISSION for X seconds
		/// </summary>
		MAV_CMD_NAV_LOITER_TIME = 19,

		/// <summary>
		/// Return to launch location
		/// </summary>
		MAV_CMD_NAV_RETURN_TO_LAUNCH = 20,

		/// <summary>
		/// Land at location
		/// </summary>
		MAV_CMD_NAV_LAND = 21,

		/// <summary>
		/// Takeoff from ground / hand
		/// </summary>
		MAV_CMD_NAV_TAKEOFF = 22,

		/// <summary>
		/// Land at local position (local frame only)
		/// </summary>
		MAV_CMD_NAV_LAND_LOCAL = 23,

		/// <summary>
		/// Takeoff from local position (local frame only)
		/// </summary>
		MAV_CMD_NAV_TAKEOFF_LOCAL = 24,

		/// <summary>
		/// Vehicle following, i.e. this waypoint represents the position of a moving vehicle
		/// </summary>
		MAV_CMD_NAV_FOLLOW = 25,

		/// <summary>
		/// Continue on the current course and climb/descend to specified altitude.  When the altitude is reached continue to the next command (i.e., don't proceed to the next command until the desired altitude is reached.
		/// </summary>
		MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT = 30,

		/// <summary>
		/// Begin loiter at the specified Latitude and Longitude.  If Lat=Lon=0, then loiter at the current position.  Don't consider the navigation command complete (don't leave loiter) until the altitude has been reached.  Additionally, if the Heading Required parameter is non-zero the  aircraft will not leave the loiter until heading toward the next waypoint. 
		/// </summary>
		MAV_CMD_NAV_LOITER_TO_ALT = 31,

		/// <summary>
		/// Being following a target
		/// </summary>
		MAV_CMD_DO_FOLLOW = 32,

		/// <summary>
		/// Reposition the MAV after a follow target command has been sent
		/// </summary>
		MAV_CMD_DO_FOLLOW_REPOSITION = 33,

		/// <summary>
		/// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicles control system to control the vehicle attitude and the attitude of various sensors such as cameras.
		/// </summary>
		MAV_CMD_NAV_ROI = 80,

		/// <summary>
		/// Control autonomous path planning on the MAV.
		/// </summary>
		MAV_CMD_NAV_PATHPLANNING = 81,

		/// <summary>
		/// Navigate to MISSION using a spline path.
		/// </summary>
		MAV_CMD_NAV_SPLINE_WAYPOINT = 82,

		/// <summary>
		/// Mission command to wait for an altitude or downwards vertical speed. This is meant for high altitude balloon launches, allowing the aircraft to be idle until either an altitude is reached or a negative vertical speed is reached (indicating early balloon burst). The wiggle time is how often to wiggle the control surfaces to prevent them seizing up.
		/// </summary>
		MAV_CMD_NAV_ALTITUDE_WAIT = 83,

		/// <summary>
		/// Takeoff from ground using VTOL mode
		/// </summary>
		MAV_CMD_NAV_VTOL_TAKEOFF = 84,

		/// <summary>
		/// Land using VTOL mode
		/// </summary>
		MAV_CMD_NAV_VTOL_LAND = 85,

		/// <summary>
		/// hand control over to an external controller
		/// </summary>
		MAV_CMD_NAV_GUIDED_ENABLE = 92,

		/// <summary>
		/// Delay the next navigation command a number of seconds or until a specified time
		/// </summary>
		MAV_CMD_NAV_DELAY = 93,

		/// <summary>
		/// NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration
		/// </summary>
		MAV_CMD_NAV_LAST = 95,

		/// <summary>
		/// Delay mission state machine.
		/// </summary>
		MAV_CMD_CONDITION_DELAY = 112,

		/// <summary>
		/// Ascend/descend at rate.  Delay mission state machine until desired altitude reached.
		/// </summary>
		MAV_CMD_CONDITION_CHANGE_ALT = 113,

		/// <summary>
		/// Delay mission state machine until within desired distance of next NAV point.
		/// </summary>
		MAV_CMD_CONDITION_DISTANCE = 114,

		/// <summary>
		/// Reach a certain target angle.
		/// </summary>
		MAV_CMD_CONDITION_YAW = 115,

		/// <summary>
		/// NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration
		/// </summary>
		MAV_CMD_CONDITION_LAST = 159,

		/// <summary>
		/// Set system mode.
		/// </summary>
		MAV_CMD_DO_SET_MODE = 176,

		/// <summary>
		/// Jump to the desired command in the mission list.  Repeat this action only the specified number of times
		/// </summary>
		MAV_CMD_DO_JUMP = 177,

		/// <summary>
		/// Change speed and/or throttle set points.
		/// </summary>
		MAV_CMD_DO_CHANGE_SPEED = 178,

		/// <summary>
		/// Changes the home location either to the current location or a specified location.
		/// </summary>
		MAV_CMD_DO_SET_HOME = 179,

		/// <summary>
		/// Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.
		/// </summary>
		MAV_CMD_DO_SET_PARAMETER = 180,

		/// <summary>
		/// Set a relay to a condition.
		/// </summary>
		MAV_CMD_DO_SET_RELAY = 181,

		/// <summary>
		/// Cycle a relay on and off for a desired number of cyles with a desired period.
		/// </summary>
		MAV_CMD_DO_REPEAT_RELAY = 182,

		/// <summary>
		/// Set a servo to a desired PWM value.
		/// </summary>
		MAV_CMD_DO_SET_SERVO = 183,

		/// <summary>
		/// Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.
		/// </summary>
		MAV_CMD_DO_REPEAT_SERVO = 184,

		/// <summary>
		/// Terminate flight immediately
		/// </summary>
		MAV_CMD_DO_FLIGHTTERMINATION = 185,

		/// <summary>
		/// Change altitude set point.
		/// </summary>
		MAV_CMD_DO_CHANGE_ALTITUDE = 186,

		/// <summary>
		/// Mission command to perform a landing. This is used as a marker in a mission to tell the autopilot where a sequence of mission items that represents a landing starts. It may also be sent via a COMMAND_LONG to trigger a landing, in which case the nearest (geographically) landing sequence in the mission will be used. The Latitude/Longitude is optional, and may be set to 0/0 if not needed. If specified then it will be used to help find the closest landing sequence.
		/// </summary>
		MAV_CMD_DO_LAND_START = 189,

		/// <summary>
		/// Mission command to perform a landing from a rally point.
		/// </summary>
		MAV_CMD_DO_RALLY_LAND = 190,

		/// <summary>
		/// Mission command to safely abort an autonmous landing.
		/// </summary>
		MAV_CMD_DO_GO_AROUND = 191,

		/// <summary>
		/// Reposition the vehicle to a specific WGS84 global position.
		/// </summary>
		MAV_CMD_DO_REPOSITION = 192,

		/// <summary>
		/// If in a GPS controlled position mode, hold the current position or continue.
		/// </summary>
		MAV_CMD_DO_PAUSE_CONTINUE = 193,

		/// <summary>
		/// Set moving direction to forward or reverse.
		/// </summary>
		MAV_CMD_DO_SET_REVERSE = 194,

		/// <summary>
		/// Control onboard camera system.
		/// </summary>
		MAV_CMD_DO_CONTROL_VIDEO = 200,

		/// <summary>
		/// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicles control system to control the vehicle attitude and the attitude of various sensors such as cameras.
		/// </summary>
		MAV_CMD_DO_SET_ROI = 201,

		/// <summary>
		/// Mission command to configure an on-board camera controller system.
		/// </summary>
		MAV_CMD_DO_DIGICAM_CONFIGURE = 202,

		/// <summary>
		/// Mission command to control an on-board camera controller system.
		/// </summary>
		MAV_CMD_DO_DIGICAM_CONTROL = 203,

		/// <summary>
		/// Mission command to configure a camera or antenna mount
		/// </summary>
		MAV_CMD_DO_MOUNT_CONFIGURE = 204,

		/// <summary>
		/// Mission command to control a camera or antenna mount
		/// </summary>
		MAV_CMD_DO_MOUNT_CONTROL = 205,

		/// <summary>
		/// Mission command to set CAM_TRIGG_DIST for this flight
		/// </summary>
		MAV_CMD_DO_SET_CAM_TRIGG_DIST = 206,

		/// <summary>
		/// Mission command to enable the geofence
		/// </summary>
		MAV_CMD_DO_FENCE_ENABLE = 207,

		/// <summary>
		/// Mission command to trigger a parachute
		/// </summary>
		MAV_CMD_DO_PARACHUTE = 208,

		/// <summary>
		/// Mission command to perform motor test
		/// </summary>
		MAV_CMD_DO_MOTOR_TEST = 209,

		/// <summary>
		/// Change to/from inverted flight
		/// </summary>
		MAV_CMD_DO_INVERTED_FLIGHT = 210,

		/// <summary>
		/// Mission command to operate EPM gripper
		/// </summary>
		MAV_CMD_DO_GRIPPER = 211,

		/// <summary>
		/// Enable/disable autotune
		/// </summary>
		MAV_CMD_DO_AUTOTUNE_ENABLE = 212,

		/// <summary>
		/// Sets a desired vehicle turn angle and thrust change
		/// </summary>
		MAV_CMD_DO_SET_POSITION_YAW_THRUST = 213,

		/// <summary>
		/// Mission command to control a camera or antenna mount, using a quaternion as reference.
		/// </summary>
		MAV_CMD_DO_MOUNT_CONTROL_QUAT = 220,

		/// <summary>
		/// set id of master controller
		/// </summary>
		MAV_CMD_DO_GUIDED_MASTER = 221,

		/// <summary>
		/// set limits for external control
		/// </summary>
		MAV_CMD_DO_GUIDED_LIMITS = 222,

		/// <summary>
		/// Control vehicle engine. This is interpreted by the vehicles engine controller to change the target engine state. It is intended for vehicles with internal combustion engines
		/// </summary>
		MAV_CMD_DO_ENGINE_CONTROL = 223,

		/// <summary>
		/// NOP - This command is only used to mark the upper limit of the DO commands in the enumeration
		/// </summary>
		MAV_CMD_DO_LAST = 240,

		/// <summary>
		/// Trigger calibration. This command will be only accepted if in pre-flight mode.
		/// </summary>
		MAV_CMD_PREFLIGHT_CALIBRATION = 241,

		/// <summary>
		/// Set sensor offsets. This command will be only accepted if in pre-flight mode.
		/// </summary>
		MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242,

		/// <summary>
		/// Trigger UAVCAN config. This command will be only accepted if in pre-flight mode.
		/// </summary>
		MAV_CMD_PREFLIGHT_UAVCAN = 243,

		/// <summary>
		/// Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.
		/// </summary>
		MAV_CMD_PREFLIGHT_STORAGE = 245,

		/// <summary>
		/// Request the reboot or shutdown of system components.
		/// </summary>
		MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246,

		/// <summary>
		/// Hold / continue the current action
		/// </summary>
		MAV_CMD_OVERRIDE_GOTO = 252,

		/// <summary>
		/// start running a mission
		/// </summary>
		MAV_CMD_MISSION_START = 300,

		/// <summary>
		/// Arms / Disarms a component
		/// </summary>
		MAV_CMD_COMPONENT_ARM_DISARM = 400,

		/// <summary>
		/// Request the home position from the vehicle.
		/// </summary>
		MAV_CMD_GET_HOME_POSITION = 410,

		/// <summary>
		/// Starts receiver pairing
		/// </summary>
		MAV_CMD_START_RX_PAIR = 500,

		/// <summary>
		/// Request the interval between messages for a particular MAVLink message ID
		/// </summary>
		MAV_CMD_GET_MESSAGE_INTERVAL = 510,

		/// <summary>
		/// Request the interval between messages for a particular MAVLink message ID. This interface replaces REQUEST_DATA_STREAM
		/// </summary>
		MAV_CMD_SET_MESSAGE_INTERVAL = 511,

		/// <summary>
		/// Request autopilot capabilities
		/// </summary>
		MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES = 520,

		/// <summary>
		/// WIP: Request camera information (CAMERA_INFORMATION)
		/// </summary>
		MAV_CMD_REQUEST_CAMERA_INFORMATION = 521,

		/// <summary>
		/// WIP: Request camera settings (CAMERA_SETTINGS)
		/// </summary>
		MAV_CMD_REQUEST_CAMERA_SETTINGS = 522,

		/// <summary>
		/// WIP: Set the camera settings part 1 (CAMERA_SETTINGS)
		/// </summary>
		MAV_CMD_SET_CAMERA_SETTINGS_1 = 523,

		/// <summary>
		/// WIP: Set the camera settings part 2 (CAMERA_SETTINGS)
		/// </summary>
		MAV_CMD_SET_CAMERA_SETTINGS_2 = 524,

		/// <summary>
		/// WIP: Request storage information (STORAGE_INFORMATION)
		/// </summary>
		MAV_CMD_REQUEST_STORAGE_INFORMATION = 525,

		/// <summary>
		/// WIP: Format a storage medium
		/// </summary>
		MAV_CMD_STORAGE_FORMAT = 526,

		/// <summary>
		/// WIP: Request camera capture status (CAMERA_CAPTURE_STATUS)
		/// </summary>
		MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS = 527,

		/// <summary>
		/// WIP: Request flight information (FLIGHT_INFORMATION)
		/// </summary>
		MAV_CMD_REQUEST_FLIGHT_INFORMATION = 528,

		/// <summary>
		/// Start image capture sequence
		/// </summary>
		MAV_CMD_IMAGE_START_CAPTURE = 2000,

		/// <summary>
		/// Stop image capture sequence
		/// </summary>
		MAV_CMD_IMAGE_STOP_CAPTURE = 2001,

		/// <summary>
		/// Enable or disable on-board camera triggering system.
		/// </summary>
		MAV_CMD_DO_TRIGGER_CONTROL = 2003,

		/// <summary>
		/// Starts video capture
		/// </summary>
		MAV_CMD_VIDEO_START_CAPTURE = 2500,

		/// <summary>
		/// Stop the current video capture
		/// </summary>
		MAV_CMD_VIDEO_STOP_CAPTURE = 2501,

		/// <summary>
		/// Request to start streaming logging data over MAVLink (see also LOGGING_DATA message)
		/// </summary>
		MAV_CMD_LOGGING_START = 2510,

		/// <summary>
		/// Request to stop streaming log data over MAVLink
		/// </summary>
		MAV_CMD_LOGGING_STOP = 2511,
		MAV_CMD_AIRFRAME_CONFIGURATION = 2520,

		/// <summary>
		/// Create a panorama at the current position
		/// </summary>
		MAV_CMD_PANORAMA_CREATE = 2800,

		/// <summary>
		/// Request VTOL transition
		/// </summary>
		MAV_CMD_DO_VTOL_TRANSITION = 3000,

		/// <summary>
		/// This command sets the submode to standard guided when vehicle is in guided mode. The vehicle holds position and altitude and the user can input the desired velocites along all three axes.
		///                  
		/// </summary>
		MAV_CMD_SET_GUIDED_SUBMODE_STANDARD = 4000,

		/// <summary>
		/// This command sets submode circle when vehicle is in guided mode. Vehicle flies along a circle facing the center of the circle. The user can input the velocity along the circle and change the radius. If no input is given the vehicle will hold position.
		///                  
		/// </summary>
		MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE = 4001,

		/// <summary>
		/// Deploy payload on a Lat / Lon / Alt position. This includes the navigation to reach the required release position and velocity.
		/// </summary>
		MAV_CMD_PAYLOAD_PREPARE_DEPLOY = 30001,

		/// <summary>
		/// Control the payload deployment.
		/// </summary>
		MAV_CMD_PAYLOAD_CONTROL_DEPLOY = 30002,

		/// <summary>
		/// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
		/// </summary>
		MAV_CMD_WAYPOINT_USER_1 = 31000,

		/// <summary>
		/// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
		/// </summary>
		MAV_CMD_WAYPOINT_USER_2 = 31001,

		/// <summary>
		/// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
		/// </summary>
		MAV_CMD_WAYPOINT_USER_3 = 31002,

		/// <summary>
		/// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
		/// </summary>
		MAV_CMD_WAYPOINT_USER_4 = 31003,

		/// <summary>
		/// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
		/// </summary>
		MAV_CMD_WAYPOINT_USER_5 = 31004,

		/// <summary>
		/// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
		/// </summary>
		MAV_CMD_SPATIAL_USER_1 = 31005,

		/// <summary>
		/// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
		/// </summary>
		MAV_CMD_SPATIAL_USER_2 = 31006,

		/// <summary>
		/// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
		/// </summary>
		MAV_CMD_SPATIAL_USER_3 = 31007,

		/// <summary>
		/// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
		/// </summary>
		MAV_CMD_SPATIAL_USER_4 = 31008,

		/// <summary>
		/// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
		/// </summary>
		MAV_CMD_SPATIAL_USER_5 = 31009,

		/// <summary>
		/// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
		/// </summary>
		MAV_CMD_USER_1 = 31010,

		/// <summary>
		/// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
		/// </summary>
		MAV_CMD_USER_2 = 31011,

		/// <summary>
		/// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
		/// </summary>
		MAV_CMD_USER_3 = 31012,

		/// <summary>
		/// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
		/// </summary>
		MAV_CMD_USER_4 = 31013,

		/// <summary>
		/// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
		/// </summary>
		MAV_CMD_USER_5 = 31014,

		/// <summary>
		/// A system wide power-off event has been initiated.
		/// </summary>
		MAV_CMD_POWER_OFF_INITIATED = 42000,

		/// <summary>
		/// FLY button has been clicked.
		/// </summary>
		MAV_CMD_SOLO_BTN_FLY_CLICK = 42001,

		/// <summary>
		/// FLY button has been held for 1.5 seconds.
		/// </summary>
		MAV_CMD_SOLO_BTN_FLY_HOLD = 42002,

		/// <summary>
		/// PAUSE button has been clicked.
		/// </summary>
		MAV_CMD_SOLO_BTN_PAUSE_CLICK = 42003,

		/// <summary>
		/// Initiate a magnetometer calibration
		/// </summary>
		MAV_CMD_DO_START_MAG_CAL = 42424,

		/// <summary>
		/// Initiate a magnetometer calibration
		/// </summary>
		MAV_CMD_DO_ACCEPT_MAG_CAL = 42425,

		/// <summary>
		/// Cancel a running magnetometer calibration
		/// </summary>
		MAV_CMD_DO_CANCEL_MAG_CAL = 42426,

		/// <summary>
		/// Command autopilot to get into factory test/diagnostic mode
		/// </summary>
		MAV_CMD_SET_FACTORY_TEST_MODE = 42427,

		/// <summary>
		/// Reply with the version banner
		/// </summary>
		MAV_CMD_DO_SEND_BANNER = 42428,

		/// <summary>
		/// Causes the gimbal to reset and boot as if it was just powered on
		/// </summary>
		MAV_CMD_GIMBAL_RESET = 42501,

		/// <summary>
		/// Reports progress and success or failure of gimbal axis calibration procedure
		/// </summary>
		MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS = 42502,

		/// <summary>
		/// Starts commutation calibration on the gimbal
		/// </summary>
		MAV_CMD_GIMBAL_REQUEST_AXIS_CALIBRATION = 42503,

		/// <summary>
		/// Erases gimbal application and parameters
		/// </summary>
		MAV_CMD_GIMBAL_FULL_RESET = 42505,
		MAV_CMD_ENUM_END = 42506,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum LIMITS_STATE : uint
	{

		/// <summary>
		/// pre-initialization
		/// </summary>
		LIMITS_INIT = 0,

		/// <summary>
		/// disabled
		/// </summary>
		LIMITS_DISABLED = 1,

		/// <summary>
		/// checking limits
		/// </summary>
		LIMITS_ENABLED = 2,

		/// <summary>
		/// a limit has been breached
		/// </summary>
		LIMITS_TRIGGERED = 3,

		/// <summary>
		/// taking action eg. RTL
		/// </summary>
		LIMITS_RECOVERING = 4,

		/// <summary>
		/// we're no longer in breach of a limit
		/// </summary>
		LIMITS_RECOVERED = 5,
		LIMITS_STATE_ENUM_END = 6,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum LIMIT_MODULE : uint
	{

		/// <summary>
		/// pre-initialization
		/// </summary>
		LIMIT_GPSLOCK = 1,

		/// <summary>
		/// disabled
		/// </summary>
		LIMIT_GEOFENCE = 2,

		/// <summary>
		/// checking limits
		/// </summary>
		LIMIT_ALTITUDE = 4,
		LIMIT_MODULE_ENUM_END = 5,

	}


	/// <summary>
	/// Flags in RALLY_POINT message
	/// </summary>
	public enum RALLY_FLAGS : uint
	{

		/// <summary>
		/// Flag set when requiring favorable winds for landing.
		/// </summary>
		FAVORABLE_WIND = 1,

		/// <summary>
		/// Flag set when plane is to immediately descend to break altitude and land without GCS intervention. Flag not set when plane is to loiter at Rally point until commanded to land.
		/// </summary>
		LAND_IMMEDIATELY = 2,
		RALLY_FLAGS_ENUM_END = 3,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum PARACHUTE_ACTION : uint
	{

		/// <summary>
		/// Disable parachute release
		/// </summary>
		PARACHUTE_DISABLE = 0,

		/// <summary>
		/// Enable parachute release
		/// </summary>
		PARACHUTE_ENABLE = 1,

		/// <summary>
		/// Release parachute
		/// </summary>
		PARACHUTE_RELEASE = 2,
		PARACHUTE_ACTION_ENUM_END = 3,

	}


	/// <summary>
	/// Gripper actions.
	/// </summary>
	public enum GRIPPER_ACTIONS : uint
	{

		/// <summary>
		/// gripper release of cargo
		/// </summary>
		GRIPPER_ACTION_RELEASE = 0,

		/// <summary>
		/// gripper grabs onto cargo
		/// </summary>
		GRIPPER_ACTION_GRAB = 1,
		GRIPPER_ACTIONS_ENUM_END = 2,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum CAMERA_STATUS_TYPES : uint
	{

		/// <summary>
		/// Camera heartbeat, announce camera component ID at 1hz
		/// </summary>
		CAMERA_STATUS_TYPE_HEARTBEAT = 0,

		/// <summary>
		/// Camera image triggered
		/// </summary>
		CAMERA_STATUS_TYPE_TRIGGER = 1,

		/// <summary>
		/// Camera connection lost
		/// </summary>
		CAMERA_STATUS_TYPE_DISCONNECT = 2,

		/// <summary>
		/// Camera unknown error
		/// </summary>
		CAMERA_STATUS_TYPE_ERROR = 3,

		/// <summary>
		/// Camera battery low. Parameter p1 shows reported voltage
		/// </summary>
		CAMERA_STATUS_TYPE_LOWBATT = 4,

		/// <summary>
		/// Camera storage low. Parameter p1 shows reported shots remaining
		/// </summary>
		CAMERA_STATUS_TYPE_LOWSTORE = 5,

		/// <summary>
		/// Camera storage low. Parameter p1 shows reported video minutes remaining
		/// </summary>
		CAMERA_STATUS_TYPE_LOWSTOREV = 6,
		CAMERA_STATUS_TYPES_ENUM_END = 7,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum CAMERA_FEEDBACK_FLAGS : uint
	{

		/// <summary>
		/// Shooting photos, not video
		/// </summary>
		CAMERA_FEEDBACK_PHOTO = 0,

		/// <summary>
		/// Shooting video, not stills
		/// </summary>
		CAMERA_FEEDBACK_VIDEO = 1,

		/// <summary>
		/// Unable to achieve requested exposure (e.g. shutter speed too low)
		/// </summary>
		CAMERA_FEEDBACK_BADEXPOSURE = 2,

		/// <summary>
		/// Closed loop feedback from camera, we know for sure it has successfully taken a picture
		/// </summary>
		CAMERA_FEEDBACK_CLOSEDLOOP = 3,

		/// <summary>
		/// Open loop camera, an image trigger has been requested but we can't know for sure it has successfully taken a picture
		/// </summary>
		CAMERA_FEEDBACK_OPENLOOP = 4,
		CAMERA_FEEDBACK_FLAGS_ENUM_END = 5,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAV_MODE_GIMBAL : uint
	{

		/// <summary>
		/// Gimbal is powered on but has not started initializing yet
		/// </summary>
		MAV_MODE_GIMBAL_UNINITIALIZED = 0,

		/// <summary>
		/// Gimbal is currently running calibration on the pitch axis
		/// </summary>
		MAV_MODE_GIMBAL_CALIBRATING_PITCH = 1,

		/// <summary>
		/// Gimbal is currently running calibration on the roll axis
		/// </summary>
		MAV_MODE_GIMBAL_CALIBRATING_ROLL = 2,

		/// <summary>
		/// Gimbal is currently running calibration on the yaw axis
		/// </summary>
		MAV_MODE_GIMBAL_CALIBRATING_YAW = 3,

		/// <summary>
		/// Gimbal has finished calibrating and initializing, but is relaxed pending reception of first rate command from copter
		/// </summary>
		MAV_MODE_GIMBAL_INITIALIZED = 4,

		/// <summary>
		/// Gimbal is actively stabilizing
		/// </summary>
		MAV_MODE_GIMBAL_ACTIVE = 5,

		/// <summary>
		/// Gimbal is relaxed because it missed more than 10 expected rate command messages in a row. Gimbal will move back to active mode when it receives a new rate command
		/// </summary>
		MAV_MODE_GIMBAL_RATE_CMD_TIMEOUT = 6,
		MAV_MODE_GIMBAL_ENUM_END = 7,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GIMBAL_AXIS : uint
	{

		/// <summary>
		/// Gimbal yaw axis
		/// </summary>
		GIMBAL_AXIS_YAW = 0,

		/// <summary>
		/// Gimbal pitch axis
		/// </summary>
		GIMBAL_AXIS_PITCH = 1,

		/// <summary>
		/// Gimbal roll axis
		/// </summary>
		GIMBAL_AXIS_ROLL = 2,
		GIMBAL_AXIS_ENUM_END = 3,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GIMBAL_AXIS_CALIBRATION_STATUS : uint
	{

		/// <summary>
		/// Axis calibration is in progress
		/// </summary>
		GIMBAL_AXIS_CALIBRATION_STATUS_IN_PROGRESS = 0,

		/// <summary>
		/// Axis calibration succeeded
		/// </summary>
		GIMBAL_AXIS_CALIBRATION_STATUS_SUCCEEDED = 1,

		/// <summary>
		/// Axis calibration failed
		/// </summary>
		GIMBAL_AXIS_CALIBRATION_STATUS_FAILED = 2,
		GIMBAL_AXIS_CALIBRATION_STATUS_ENUM_END = 3,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GIMBAL_AXIS_CALIBRATION_REQUIRED : uint
	{

		/// <summary>
		/// Whether or not this axis requires calibration is unknown at this time
		/// </summary>
		GIMBAL_AXIS_CALIBRATION_REQUIRED_UNKNOWN = 0,

		/// <summary>
		/// This axis requires calibration
		/// </summary>
		GIMBAL_AXIS_CALIBRATION_REQUIRED_TRUE = 1,

		/// <summary>
		/// This axis does not require calibration
		/// </summary>
		GIMBAL_AXIS_CALIBRATION_REQUIRED_FALSE = 2,
		GIMBAL_AXIS_CALIBRATION_REQUIRED_ENUM_END = 3,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_HEARTBEAT_STATUS : uint
	{

		/// <summary>
		/// No GoPro connected
		/// </summary>
		GOPRO_HEARTBEAT_STATUS_DISCONNECTED = 0,

		/// <summary>
		/// The detected GoPro is not HeroBus compatible
		/// </summary>
		GOPRO_HEARTBEAT_STATUS_INCOMPATIBLE = 1,

		/// <summary>
		/// A HeroBus compatible GoPro is connected
		/// </summary>
		GOPRO_HEARTBEAT_STATUS_CONNECTED = 2,

		/// <summary>
		/// An unrecoverable error was encountered with the connected GoPro, it may require a power cycle
		/// </summary>
		GOPRO_HEARTBEAT_STATUS_ERROR = 3,
		GOPRO_HEARTBEAT_STATUS_ENUM_END = 4,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_HEARTBEAT_FLAGS : uint
	{

		/// <summary>
		/// GoPro is currently recording
		/// </summary>
		GOPRO_FLAG_RECORDING = 1,
		GOPRO_HEARTBEAT_FLAGS_ENUM_END = 2,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_REQUEST_STATUS : uint
	{

		/// <summary>
		/// The write message with ID indicated succeeded
		/// </summary>
		GOPRO_REQUEST_SUCCESS = 0,

		/// <summary>
		/// The write message with ID indicated failed
		/// </summary>
		GOPRO_REQUEST_FAILED = 1,
		GOPRO_REQUEST_STATUS_ENUM_END = 2,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_COMMAND : uint
	{

		/// <summary>
		/// (Get/Set)
		/// </summary>
		GOPRO_COMMAND_POWER = 0,

		/// <summary>
		/// (Get/Set)
		/// </summary>
		GOPRO_COMMAND_CAPTURE_MODE = 1,

		/// <summary>
		/// (___/Set)
		/// </summary>
		GOPRO_COMMAND_SHUTTER = 2,

		/// <summary>
		/// (Get/___)
		/// </summary>
		GOPRO_COMMAND_BATTERY = 3,

		/// <summary>
		/// (Get/___)
		/// </summary>
		GOPRO_COMMAND_MODEL = 4,

		/// <summary>
		/// (Get/Set)
		/// </summary>
		GOPRO_COMMAND_VIDEO_SETTINGS = 5,

		/// <summary>
		/// (Get/Set)
		/// </summary>
		GOPRO_COMMAND_LOW_LIGHT = 6,

		/// <summary>
		/// (Get/Set)
		/// </summary>
		GOPRO_COMMAND_PHOTO_RESOLUTION = 7,

		/// <summary>
		/// (Get/Set)
		/// </summary>
		GOPRO_COMMAND_PHOTO_BURST_RATE = 8,

		/// <summary>
		/// (Get/Set)
		/// </summary>
		GOPRO_COMMAND_PROTUNE = 9,

		/// <summary>
		/// (Get/Set) Hero 3+ Only
		/// </summary>
		GOPRO_COMMAND_PROTUNE_WHITE_BALANCE = 10,

		/// <summary>
		/// (Get/Set) Hero 3+ Only
		/// </summary>
		GOPRO_COMMAND_PROTUNE_COLOUR = 11,

		/// <summary>
		/// (Get/Set) Hero 3+ Only
		/// </summary>
		GOPRO_COMMAND_PROTUNE_GAIN = 12,

		/// <summary>
		/// (Get/Set) Hero 3+ Only
		/// </summary>
		GOPRO_COMMAND_PROTUNE_SHARPNESS = 13,

		/// <summary>
		/// (Get/Set) Hero 3+ Only
		/// </summary>
		GOPRO_COMMAND_PROTUNE_EXPOSURE = 14,

		/// <summary>
		/// (Get/Set)
		/// </summary>
		GOPRO_COMMAND_TIME = 15,

		/// <summary>
		/// (Get/Set)
		/// </summary>
		GOPRO_COMMAND_CHARGING = 16,
		GOPRO_COMMAND_ENUM_END = 17,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_CAPTURE_MODE : uint
	{

		/// <summary>
		/// Video mode
		/// </summary>
		GOPRO_CAPTURE_MODE_VIDEO = 0,

		/// <summary>
		/// Photo mode
		/// </summary>
		GOPRO_CAPTURE_MODE_PHOTO = 1,

		/// <summary>
		/// Burst mode, hero 3+ only
		/// </summary>
		GOPRO_CAPTURE_MODE_BURST = 2,

		/// <summary>
		/// Time lapse mode, hero 3+ only
		/// </summary>
		GOPRO_CAPTURE_MODE_TIME_LAPSE = 3,

		/// <summary>
		/// Multi shot mode, hero 4 only
		/// </summary>
		GOPRO_CAPTURE_MODE_MULTI_SHOT = 4,

		/// <summary>
		/// Playback mode, hero 4 only, silver only except when LCD or HDMI is connected to black
		/// </summary>
		GOPRO_CAPTURE_MODE_PLAYBACK = 5,

		/// <summary>
		/// Playback mode, hero 4 only
		/// </summary>
		GOPRO_CAPTURE_MODE_SETUP = 6,

		/// <summary>
		/// Mode not yet known
		/// </summary>
		GOPRO_CAPTURE_MODE_UNKNOWN = 255,
		GOPRO_CAPTURE_MODE_ENUM_END = 256,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_RESOLUTION : uint
	{

		/// <summary>
		/// 848 x 480 (480p)
		/// </summary>
		GOPRO_RESOLUTION_480p = 0,

		/// <summary>
		/// 1280 x 720 (720p)
		/// </summary>
		GOPRO_RESOLUTION_720p = 1,

		/// <summary>
		/// 1280 x 960 (960p)
		/// </summary>
		GOPRO_RESOLUTION_960p = 2,

		/// <summary>
		/// 1920 x 1080 (1080p)
		/// </summary>
		GOPRO_RESOLUTION_1080p = 3,

		/// <summary>
		/// 1920 x 1440 (1440p)
		/// </summary>
		GOPRO_RESOLUTION_1440p = 4,

		/// <summary>
		/// 2704 x 1440 (2.7k-17:9)
		/// </summary>
		GOPRO_RESOLUTION_2_7k_17_9 = 5,

		/// <summary>
		/// 2704 x 1524 (2.7k-16:9)
		/// </summary>
		GOPRO_RESOLUTION_2_7k_16_9 = 6,

		/// <summary>
		/// 2704 x 2028 (2.7k-4:3)
		/// </summary>
		GOPRO_RESOLUTION_2_7k_4_3 = 7,

		/// <summary>
		/// 3840 x 2160 (4k-16:9)
		/// </summary>
		GOPRO_RESOLUTION_4k_16_9 = 8,

		/// <summary>
		/// 4096 x 2160 (4k-17:9)
		/// </summary>
		GOPRO_RESOLUTION_4k_17_9 = 9,

		/// <summary>
		/// 1280 x 720 (720p-SuperView)
		/// </summary>
		GOPRO_RESOLUTION_720p_SUPERVIEW = 10,

		/// <summary>
		/// 1920 x 1080 (1080p-SuperView)
		/// </summary>
		GOPRO_RESOLUTION_1080p_SUPERVIEW = 11,

		/// <summary>
		/// 2704 x 1520 (2.7k-SuperView)
		/// </summary>
		GOPRO_RESOLUTION_2_7k_SUPERVIEW = 12,

		/// <summary>
		/// 3840 x 2160 (4k-SuperView)
		/// </summary>
		GOPRO_RESOLUTION_4k_SUPERVIEW = 13,
		GOPRO_RESOLUTION_ENUM_END = 14,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_FRAME_RATE : uint
	{

		/// <summary>
		/// 12 FPS
		/// </summary>
		GOPRO_FRAME_RATE_12 = 0,

		/// <summary>
		/// 15 FPS
		/// </summary>
		GOPRO_FRAME_RATE_15 = 1,

		/// <summary>
		/// 24 FPS
		/// </summary>
		GOPRO_FRAME_RATE_24 = 2,

		/// <summary>
		/// 25 FPS
		/// </summary>
		GOPRO_FRAME_RATE_25 = 3,

		/// <summary>
		/// 30 FPS
		/// </summary>
		GOPRO_FRAME_RATE_30 = 4,

		/// <summary>
		/// 48 FPS
		/// </summary>
		GOPRO_FRAME_RATE_48 = 5,

		/// <summary>
		/// 50 FPS
		/// </summary>
		GOPRO_FRAME_RATE_50 = 6,

		/// <summary>
		/// 60 FPS
		/// </summary>
		GOPRO_FRAME_RATE_60 = 7,

		/// <summary>
		/// 80 FPS
		/// </summary>
		GOPRO_FRAME_RATE_80 = 8,

		/// <summary>
		/// 90 FPS
		/// </summary>
		GOPRO_FRAME_RATE_90 = 9,

		/// <summary>
		/// 100 FPS
		/// </summary>
		GOPRO_FRAME_RATE_100 = 10,

		/// <summary>
		/// 120 FPS
		/// </summary>
		GOPRO_FRAME_RATE_120 = 11,

		/// <summary>
		/// 240 FPS
		/// </summary>
		GOPRO_FRAME_RATE_240 = 12,

		/// <summary>
		/// 12.5 FPS
		/// </summary>
		GOPRO_FRAME_RATE_12_5 = 13,
		GOPRO_FRAME_RATE_ENUM_END = 14,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_FIELD_OF_VIEW : uint
	{

		/// <summary>
		/// 0x00: Wide
		/// </summary>
		GOPRO_FIELD_OF_VIEW_WIDE = 0,

		/// <summary>
		/// 0x01: Medium
		/// </summary>
		GOPRO_FIELD_OF_VIEW_MEDIUM = 1,

		/// <summary>
		/// 0x02: Narrow
		/// </summary>
		GOPRO_FIELD_OF_VIEW_NARROW = 2,
		GOPRO_FIELD_OF_VIEW_ENUM_END = 3,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_VIDEO_SETTINGS_FLAGS : uint
	{

		/// <summary>
		/// 0=NTSC, 1=PAL
		/// </summary>
		GOPRO_VIDEO_SETTINGS_TV_MODE = 1,
		GOPRO_VIDEO_SETTINGS_FLAGS_ENUM_END = 2,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_PHOTO_RESOLUTION : uint
	{

		/// <summary>
		/// 5MP Medium
		/// </summary>
		GOPRO_PHOTO_RESOLUTION_5MP_MEDIUM = 0,

		/// <summary>
		/// 7MP Medium
		/// </summary>
		GOPRO_PHOTO_RESOLUTION_7MP_MEDIUM = 1,

		/// <summary>
		/// 7MP Wide
		/// </summary>
		GOPRO_PHOTO_RESOLUTION_7MP_WIDE = 2,

		/// <summary>
		/// 10MP Wide
		/// </summary>
		GOPRO_PHOTO_RESOLUTION_10MP_WIDE = 3,

		/// <summary>
		/// 12MP Wide
		/// </summary>
		GOPRO_PHOTO_RESOLUTION_12MP_WIDE = 4,
		GOPRO_PHOTO_RESOLUTION_ENUM_END = 5,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_PROTUNE_WHITE_BALANCE : uint
	{

		/// <summary>
		/// Auto
		/// </summary>
		GOPRO_PROTUNE_WHITE_BALANCE_AUTO = 0,

		/// <summary>
		/// 3000K
		/// </summary>
		GOPRO_PROTUNE_WHITE_BALANCE_3000K = 1,

		/// <summary>
		/// 5500K
		/// </summary>
		GOPRO_PROTUNE_WHITE_BALANCE_5500K = 2,

		/// <summary>
		/// 6500K
		/// </summary>
		GOPRO_PROTUNE_WHITE_BALANCE_6500K = 3,

		/// <summary>
		/// Camera Raw
		/// </summary>
		GOPRO_PROTUNE_WHITE_BALANCE_RAW = 4,
		GOPRO_PROTUNE_WHITE_BALANCE_ENUM_END = 5,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_PROTUNE_COLOUR : uint
	{

		/// <summary>
		/// Auto
		/// </summary>
		GOPRO_PROTUNE_COLOUR_STANDARD = 0,

		/// <summary>
		/// Neutral
		/// </summary>
		GOPRO_PROTUNE_COLOUR_NEUTRAL = 1,
		GOPRO_PROTUNE_COLOUR_ENUM_END = 2,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_PROTUNE_GAIN : uint
	{

		/// <summary>
		/// ISO 400
		/// </summary>
		GOPRO_PROTUNE_GAIN_400 = 0,

		/// <summary>
		/// ISO 800 (Only Hero 4)
		/// </summary>
		GOPRO_PROTUNE_GAIN_800 = 1,

		/// <summary>
		/// ISO 1600
		/// </summary>
		GOPRO_PROTUNE_GAIN_1600 = 2,

		/// <summary>
		/// ISO 3200 (Only Hero 4)
		/// </summary>
		GOPRO_PROTUNE_GAIN_3200 = 3,

		/// <summary>
		/// ISO 6400
		/// </summary>
		GOPRO_PROTUNE_GAIN_6400 = 4,
		GOPRO_PROTUNE_GAIN_ENUM_END = 5,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_PROTUNE_SHARPNESS : uint
	{

		/// <summary>
		/// Low Sharpness
		/// </summary>
		GOPRO_PROTUNE_SHARPNESS_LOW = 0,

		/// <summary>
		/// Medium Sharpness
		/// </summary>
		GOPRO_PROTUNE_SHARPNESS_MEDIUM = 1,

		/// <summary>
		/// High Sharpness
		/// </summary>
		GOPRO_PROTUNE_SHARPNESS_HIGH = 2,
		GOPRO_PROTUNE_SHARPNESS_ENUM_END = 3,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_PROTUNE_EXPOSURE : uint
	{

		/// <summary>
		/// -5.0 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_NEG_5_0 = 0,

		/// <summary>
		/// -4.5 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_NEG_4_5 = 1,

		/// <summary>
		/// -4.0 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_NEG_4_0 = 2,

		/// <summary>
		/// -3.5 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_NEG_3_5 = 3,

		/// <summary>
		/// -3.0 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_NEG_3_0 = 4,

		/// <summary>
		/// -2.5 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_NEG_2_5 = 5,

		/// <summary>
		/// -2.0 EV
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_NEG_2_0 = 6,

		/// <summary>
		/// -1.5 EV
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_NEG_1_5 = 7,

		/// <summary>
		/// -1.0 EV
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_NEG_1_0 = 8,

		/// <summary>
		/// -0.5 EV
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_NEG_0_5 = 9,

		/// <summary>
		/// 0.0 EV
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_ZERO = 10,

		/// <summary>
		/// +0.5 EV
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_POS_0_5 = 11,

		/// <summary>
		/// +1.0 EV
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_POS_1_0 = 12,

		/// <summary>
		/// +1.5 EV
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_POS_1_5 = 13,

		/// <summary>
		/// +2.0 EV
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_POS_2_0 = 14,

		/// <summary>
		/// +2.5 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_POS_2_5 = 15,

		/// <summary>
		/// +3.0 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_POS_3_0 = 16,

		/// <summary>
		/// +3.5 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_POS_3_5 = 17,

		/// <summary>
		/// +4.0 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_POS_4_0 = 18,

		/// <summary>
		/// +4.5 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_POS_4_5 = 19,

		/// <summary>
		/// +5.0 EV (Hero 3+ Only)
		/// </summary>
		GOPRO_PROTUNE_EXPOSURE_POS_5_0 = 20,
		GOPRO_PROTUNE_EXPOSURE_ENUM_END = 21,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_CHARGING : uint
	{

		/// <summary>
		/// Charging disabled
		/// </summary>
		GOPRO_CHARGING_DISABLED = 0,

		/// <summary>
		/// Charging enabled
		/// </summary>
		GOPRO_CHARGING_ENABLED = 1,
		GOPRO_CHARGING_ENUM_END = 2,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_MODEL : uint
	{

		/// <summary>
		/// Unknown gopro model
		/// </summary>
		GOPRO_MODEL_UNKNOWN = 0,

		/// <summary>
		/// Hero 3+ Silver (HeroBus not supported by GoPro)
		/// </summary>
		GOPRO_MODEL_HERO_3_PLUS_SILVER = 1,

		/// <summary>
		/// Hero 3+ Black
		/// </summary>
		GOPRO_MODEL_HERO_3_PLUS_BLACK = 2,

		/// <summary>
		/// Hero 4 Silver
		/// </summary>
		GOPRO_MODEL_HERO_4_SILVER = 3,

		/// <summary>
		/// Hero 4 Black
		/// </summary>
		GOPRO_MODEL_HERO_4_BLACK = 4,
		GOPRO_MODEL_ENUM_END = 5,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GOPRO_BURST_RATE : uint
	{

		/// <summary>
		/// 3 Shots / 1 Second
		/// </summary>
		GOPRO_BURST_RATE_3_IN_1_SECOND = 0,

		/// <summary>
		/// 5 Shots / 1 Second
		/// </summary>
		GOPRO_BURST_RATE_5_IN_1_SECOND = 1,

		/// <summary>
		/// 10 Shots / 1 Second
		/// </summary>
		GOPRO_BURST_RATE_10_IN_1_SECOND = 2,

		/// <summary>
		/// 10 Shots / 2 Second
		/// </summary>
		GOPRO_BURST_RATE_10_IN_2_SECOND = 3,

		/// <summary>
		/// 10 Shots / 3 Second (Hero 4 Only)
		/// </summary>
		GOPRO_BURST_RATE_10_IN_3_SECOND = 4,

		/// <summary>
		/// 30 Shots / 1 Second
		/// </summary>
		GOPRO_BURST_RATE_30_IN_1_SECOND = 5,

		/// <summary>
		/// 30 Shots / 2 Second
		/// </summary>
		GOPRO_BURST_RATE_30_IN_2_SECOND = 6,

		/// <summary>
		/// 30 Shots / 3 Second
		/// </summary>
		GOPRO_BURST_RATE_30_IN_3_SECOND = 7,

		/// <summary>
		/// 30 Shots / 6 Second
		/// </summary>
		GOPRO_BURST_RATE_30_IN_6_SECOND = 8,
		GOPRO_BURST_RATE_ENUM_END = 9,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum LED_CONTROL_PATTERN : uint
	{

		/// <summary>
		/// LED patterns off (return control to regular vehicle control)
		/// </summary>
		LED_CONTROL_PATTERN_OFF = 0,

		/// <summary>
		/// LEDs show pattern during firmware update
		/// </summary>
		LED_CONTROL_PATTERN_FIRMWAREUPDATE = 1,

		/// <summary>
		/// Custom Pattern using custom bytes fields
		/// </summary>
		LED_CONTROL_PATTERN_CUSTOM = 255,
		LED_CONTROL_PATTERN_ENUM_END = 256,

	}


	/// <summary>
	/// Flags in EKF_STATUS message
	/// </summary>
	public enum EKF_STATUS_FLAGS : uint
	{

		/// <summary>
		/// set if EKF's attitude estimate is good
		/// </summary>
		EKF_ATTITUDE = 1,

		/// <summary>
		/// set if EKF's horizontal velocity estimate is good
		/// </summary>
		EKF_VELOCITY_HORIZ = 2,

		/// <summary>
		/// set if EKF's vertical velocity estimate is good
		/// </summary>
		EKF_VELOCITY_VERT = 4,

		/// <summary>
		/// set if EKF's horizontal position (relative) estimate is good
		/// </summary>
		EKF_POS_HORIZ_REL = 8,

		/// <summary>
		/// set if EKF's horizontal position (absolute) estimate is good
		/// </summary>
		EKF_POS_HORIZ_ABS = 16,

		/// <summary>
		/// set if EKF's vertical position (absolute) estimate is good
		/// </summary>
		EKF_POS_VERT_ABS = 32,

		/// <summary>
		/// set if EKF's vertical position (above ground) estimate is good
		/// </summary>
		EKF_POS_VERT_AGL = 64,

		/// <summary>
		/// EKF is in constant position mode and does not know it's absolute or relative position
		/// </summary>
		EKF_CONST_POS_MODE = 128,

		/// <summary>
		/// set if EKF's predicted horizontal position (relative) estimate is good
		/// </summary>
		EKF_PRED_POS_HORIZ_REL = 256,

		/// <summary>
		/// set if EKF's predicted horizontal position (absolute) estimate is good
		/// </summary>
		EKF_PRED_POS_HORIZ_ABS = 512,
		EKF_STATUS_FLAGS_ENUM_END = 513,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum PID_TUNING_AXIS : uint
	{
		PID_TUNING_ROLL = 1,
		PID_TUNING_PITCH = 2,
		PID_TUNING_YAW = 3,
		PID_TUNING_ACCZ = 4,
		PID_TUNING_STEER = 5,
		PID_TUNING_AXIS_ENUM_END = 6,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAG_CAL_STATUS : uint
	{
		MAG_CAL_NOT_STARTED = 0,
		MAG_CAL_WAITING_TO_START = 1,
		MAG_CAL_RUNNING_STEP_ONE = 2,
		MAG_CAL_RUNNING_STEP_TWO = 3,
		MAG_CAL_SUCCESS = 4,
		MAG_CAL_FAILED = 5,
		MAG_CAL_STATUS_ENUM_END = 6,

	}


	/// <summary>
	/// Special ACK block numbers control activation of dataflash log streaming
	/// </summary>
	public enum MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS : uint
	{

		/// <summary>
		/// UAV to stop sending DataFlash blocks
		/// </summary>
		MAV_REMOTE_LOG_DATA_BLOCK_STOP = 2147483645,

		/// <summary>
		/// UAV to start sending DataFlash blocks
		/// </summary>
		MAV_REMOTE_LOG_DATA_BLOCK_START = 2147483646,
		MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS_ENUM_END = 2147483647,

	}


	/// <summary>
	/// Possible remote log data block statuses
	/// </summary>
	public enum MAV_REMOTE_LOG_DATA_BLOCK_STATUSES : uint
	{

		/// <summary>
		/// This block has NOT been received
		/// </summary>
		MAV_REMOTE_LOG_DATA_BLOCK_NACK = 0,

		/// <summary>
		/// This block has been received
		/// </summary>
		MAV_REMOTE_LOG_DATA_BLOCK_ACK = 1,
		MAV_REMOTE_LOG_DATA_BLOCK_STATUSES_ENUM_END = 2,

	}


	/// <summary>
	/// Micro air vehicle / autopilot classes. This identifies the individual model.
	/// </summary>
	public enum MAV_AUTOPILOT : uint
	{

		/// <summary>
		/// Generic autopilot, full support for everything
		/// </summary>
		MAV_AUTOPILOT_GENERIC = 0,

		/// <summary>
		/// Reserved for future use.
		/// </summary>
		MAV_AUTOPILOT_RESERVED = 1,

		/// <summary>
		/// SLUGS autopilot, http://slugsuav.soe.ucsc.edu
		/// </summary>
		MAV_AUTOPILOT_SLUGS = 2,

		/// <summary>
		/// ArduPilotMega / ArduCopter, http://diydrones.com
		/// </summary>
		MAV_AUTOPILOT_ARDUPILOTMEGA = 3,

		/// <summary>
		/// OpenPilot, http://openpilot.org
		/// </summary>
		MAV_AUTOPILOT_OPENPILOT = 4,

		/// <summary>
		/// Generic autopilot only supporting simple waypoints
		/// </summary>
		MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY = 5,

		/// <summary>
		/// Generic autopilot supporting waypoints and other simple navigation commands
		/// </summary>
		MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = 6,

		/// <summary>
		/// Generic autopilot supporting the full mission command set
		/// </summary>
		MAV_AUTOPILOT_GENERIC_MISSION_FULL = 7,

		/// <summary>
		/// No valid autopilot, e.g. a GCS or other MAVLink component
		/// </summary>
		MAV_AUTOPILOT_INVALID = 8,

		/// <summary>
		/// PPZ UAV - http://nongnu.org/paparazzi
		/// </summary>
		MAV_AUTOPILOT_PPZ = 9,

		/// <summary>
		/// UAV Dev Board
		/// </summary>
		MAV_AUTOPILOT_UDB = 10,

		/// <summary>
		/// FlexiPilot
		/// </summary>
		MAV_AUTOPILOT_FP = 11,

		/// <summary>
		/// PX4 Autopilot - http://pixhawk.ethz.ch/px4/
		/// </summary>
		MAV_AUTOPILOT_PX4 = 12,

		/// <summary>
		/// SMACCMPilot - http://smaccmpilot.org
		/// </summary>
		MAV_AUTOPILOT_SMACCMPILOT = 13,

		/// <summary>
		/// AutoQuad -- http://autoquad.org
		/// </summary>
		MAV_AUTOPILOT_AUTOQUAD = 14,

		/// <summary>
		/// Armazila -- http://armazila.com
		/// </summary>
		MAV_AUTOPILOT_ARMAZILA = 15,

		/// <summary>
		/// Aerob -- http://aerob.ru
		/// </summary>
		MAV_AUTOPILOT_AEROB = 16,

		/// <summary>
		/// ASLUAV autopilot -- http://www.asl.ethz.ch
		/// </summary>
		MAV_AUTOPILOT_ASLUAV = 17,
		MAV_AUTOPILOT_ENUM_END = 18,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAV_TYPE : uint
	{

		/// <summary>
		/// Generic micro air vehicle.
		/// </summary>
		MAV_TYPE_GENERIC = 0,

		/// <summary>
		/// Fixed wing aircraft.
		/// </summary>
		MAV_TYPE_FIXED_WING = 1,

		/// <summary>
		/// Quadrotor
		/// </summary>
		MAV_TYPE_QUADROTOR = 2,

		/// <summary>
		/// Coaxial helicopter
		/// </summary>
		MAV_TYPE_COAXIAL = 3,

		/// <summary>
		/// Normal helicopter with tail rotor.
		/// </summary>
		MAV_TYPE_HELICOPTER = 4,

		/// <summary>
		/// Ground installation
		/// </summary>
		MAV_TYPE_ANTENNA_TRACKER = 5,

		/// <summary>
		/// Operator control unit / ground control station
		/// </summary>
		MAV_TYPE_GCS = 6,

		/// <summary>
		/// Airship, controlled
		/// </summary>
		MAV_TYPE_AIRSHIP = 7,

		/// <summary>
		/// Free balloon, uncontrolled
		/// </summary>
		MAV_TYPE_FREE_BALLOON = 8,

		/// <summary>
		/// Rocket
		/// </summary>
		MAV_TYPE_ROCKET = 9,

		/// <summary>
		/// Ground rover
		/// </summary>
		MAV_TYPE_GROUND_ROVER = 10,

		/// <summary>
		/// Surface vessel, boat, ship
		/// </summary>
		MAV_TYPE_SURFACE_BOAT = 11,

		/// <summary>
		/// Submarine
		/// </summary>
		MAV_TYPE_SUBMARINE = 12,

		/// <summary>
		/// Hexarotor
		/// </summary>
		MAV_TYPE_HEXAROTOR = 13,

		/// <summary>
		/// Octorotor
		/// </summary>
		MAV_TYPE_OCTOROTOR = 14,

		/// <summary>
		/// Tricopter
		/// </summary>
		MAV_TYPE_TRICOPTER = 15,

		/// <summary>
		/// Flapping wing
		/// </summary>
		MAV_TYPE_FLAPPING_WING = 16,

		/// <summary>
		/// Kite
		/// </summary>
		MAV_TYPE_KITE = 17,

		/// <summary>
		/// Onboard companion controller
		/// </summary>
		MAV_TYPE_ONBOARD_CONTROLLER = 18,

		/// <summary>
		/// Two-rotor VTOL using control surfaces in vertical operation in addition. Tailsitter.
		/// </summary>
		MAV_TYPE_VTOL_DUOROTOR = 19,

		/// <summary>
		/// Quad-rotor VTOL using a V-shaped quad config in vertical operation. Tailsitter.
		/// </summary>
		MAV_TYPE_VTOL_QUADROTOR = 20,

		/// <summary>
		/// Tiltrotor VTOL
		/// </summary>
		MAV_TYPE_VTOL_TILTROTOR = 21,

		/// <summary>
		/// VTOL reserved 2
		/// </summary>
		MAV_TYPE_VTOL_RESERVED2 = 22,

		/// <summary>
		/// VTOL reserved 3
		/// </summary>
		MAV_TYPE_VTOL_RESERVED3 = 23,

		/// <summary>
		/// VTOL reserved 4
		/// </summary>
		MAV_TYPE_VTOL_RESERVED4 = 24,

		/// <summary>
		/// VTOL reserved 5
		/// </summary>
		MAV_TYPE_VTOL_RESERVED5 = 25,

		/// <summary>
		/// Onboard gimbal
		/// </summary>
		MAV_TYPE_GIMBAL = 26,

		/// <summary>
		/// Onboard ADSB peripheral
		/// </summary>
		MAV_TYPE_ADSB = 27,
		MAV_TYPE_ENUM_END = 28,

	}


	/// <summary>
	/// These values define the type of firmware release.  These values indicate the first version or release of this type.  For example the first alpha release would be 64, the second would be 65.
	/// </summary>
	public enum FIRMWARE_VERSION_TYPE : uint
	{

		/// <summary>
		/// development release
		/// </summary>
		FIRMWARE_VERSION_TYPE_DEV = 0,

		/// <summary>
		/// alpha release
		/// </summary>
		FIRMWARE_VERSION_TYPE_ALPHA = 64,

		/// <summary>
		/// beta release
		/// </summary>
		FIRMWARE_VERSION_TYPE_BETA = 128,

		/// <summary>
		/// release candidate
		/// </summary>
		FIRMWARE_VERSION_TYPE_RC = 192,

		/// <summary>
		/// official stable release
		/// </summary>
		FIRMWARE_VERSION_TYPE_OFFICIAL = 255,
		FIRMWARE_VERSION_TYPE_ENUM_END = 256,

	}


	/// <summary>
	/// These flags encode the MAV mode.
	/// </summary>
	public enum MAV_MODE_FLAG : uint
	{

		/// <summary>
		/// 0b00000001 Reserved for future use.
		/// </summary>
		MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1,

		/// <summary>
		/// 0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations.
		/// </summary>
		MAV_MODE_FLAG_TEST_ENABLED = 2,

		/// <summary>
		/// 0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation.
		/// </summary>
		MAV_MODE_FLAG_AUTO_ENABLED = 4,

		/// <summary>
		/// 0b00001000 guided mode enabled, system flies MISSIONs / mission items.
		/// </summary>
		MAV_MODE_FLAG_GUIDED_ENABLED = 8,

		/// <summary>
		/// 0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around.
		/// </summary>
		MAV_MODE_FLAG_STABILIZE_ENABLED = 16,

		/// <summary>
		/// 0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational.
		/// </summary>
		MAV_MODE_FLAG_HIL_ENABLED = 32,

		/// <summary>
		/// 0b01000000 remote control input is enabled.
		/// </summary>
		MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64,

		/// <summary>
		/// 0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state.
		/// </summary>
		MAV_MODE_FLAG_SAFETY_ARMED = 128,
		MAV_MODE_FLAG_ENUM_END = 129,

	}


	/// <summary>
	/// These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not.
	/// </summary>
	public enum MAV_MODE_FLAG_DECODE_POSITION : uint
	{

		/// <summary>
		/// Eighth bit: 00000001
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE = 1,

		/// <summary>
		/// Seventh bit: 00000010
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_TEST = 2,

		/// <summary>
		/// Sixt bit:   00000100
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_AUTO = 4,

		/// <summary>
		/// Fifth bit:  00001000
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_GUIDED = 8,

		/// <summary>
		/// Fourth bit: 00010000
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_STABILIZE = 16,

		/// <summary>
		/// Third bit:  00100000
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_HIL = 32,

		/// <summary>
		/// Second bit: 01000000
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_MANUAL = 64,

		/// <summary>
		/// First bit:  10000000
		/// </summary>
		MAV_MODE_FLAG_DECODE_POSITION_SAFETY = 128,
		MAV_MODE_FLAG_DECODE_POSITION_ENUM_END = 129,

	}


	/// <summary>
	/// Override command, pauses current mission execution and moves immediately to a position
	/// </summary>
	public enum MAV_GOTO : uint
	{

		/// <summary>
		/// Hold at the current position.
		/// </summary>
		MAV_GOTO_DO_HOLD = 0,

		/// <summary>
		/// Continue with the next item in mission execution.
		/// </summary>
		MAV_GOTO_DO_CONTINUE = 1,

		/// <summary>
		/// Hold at the current position of the system
		/// </summary>
		MAV_GOTO_HOLD_AT_CURRENT_POSITION = 2,

		/// <summary>
		/// Hold at the position specified in the parameters of the DO_HOLD action
		/// </summary>
		MAV_GOTO_HOLD_AT_SPECIFIED_POSITION = 3,
		MAV_GOTO_ENUM_END = 4,

	}


	/// <summary>
	/// These defines are predefined OR-combined mode flags. There is no need to use values from this enum, but it
	///               simplifies the use of the mode flags. Note that manual input is enabled in all modes as a safety override.
	/// </summary>
	public enum MAV_MODE : uint
	{

		/// <summary>
		/// System is not ready to fly, booting, calibrating, etc. No flag is set.
		/// </summary>
		MAV_MODE_PREFLIGHT = 0,

		/// <summary>
		/// System is allowed to be active, under manual (RC) control, no stabilization
		/// </summary>
		MAV_MODE_MANUAL_DISARMED = 64,

		/// <summary>
		/// UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
		/// </summary>
		MAV_MODE_TEST_DISARMED = 66,

		/// <summary>
		/// System is allowed to be active, under assisted RC control.
		/// </summary>
		MAV_MODE_STABILIZE_DISARMED = 80,

		/// <summary>
		/// System is allowed to be active, under autonomous control, manual setpoint
		/// </summary>
		MAV_MODE_GUIDED_DISARMED = 88,

		/// <summary>
		/// System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by MISSIONs)
		/// </summary>
		MAV_MODE_AUTO_DISARMED = 92,

		/// <summary>
		/// System is allowed to be active, under manual (RC) control, no stabilization
		/// </summary>
		MAV_MODE_MANUAL_ARMED = 192,

		/// <summary>
		/// UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
		/// </summary>
		MAV_MODE_TEST_ARMED = 194,

		/// <summary>
		/// System is allowed to be active, under assisted RC control.
		/// </summary>
		MAV_MODE_STABILIZE_ARMED = 208,

		/// <summary>
		/// System is allowed to be active, under autonomous control, manual setpoint
		/// </summary>
		MAV_MODE_GUIDED_ARMED = 216,

		/// <summary>
		/// System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by MISSIONs)
		/// </summary>
		MAV_MODE_AUTO_ARMED = 220,
		MAV_MODE_ENUM_END = 221,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAV_STATE : uint
	{

		/// <summary>
		/// Uninitialized system, state is unknown.
		/// </summary>
		MAV_STATE_UNINIT = 0,

		/// <summary>
		/// System is booting up.
		/// </summary>
		MAV_STATE_BOOT = 1,

		/// <summary>
		/// System is calibrating and not flight-ready.
		/// </summary>
		MAV_STATE_CALIBRATING = 2,

		/// <summary>
		/// System is grounded and on standby. It can be launched any time.
		/// </summary>
		MAV_STATE_STANDBY = 3,

		/// <summary>
		/// System is active and might be already airborne. Motors are engaged.
		/// </summary>
		MAV_STATE_ACTIVE = 4,

		/// <summary>
		/// System is in a non-normal flight mode. It can however still navigate.
		/// </summary>
		MAV_STATE_CRITICAL = 5,

		/// <summary>
		/// System is in a non-normal flight mode. It lost control over parts or over the whole airframe. It is in mayday and going down.
		/// </summary>
		MAV_STATE_EMERGENCY = 6,

		/// <summary>
		/// System just initialized its power-down sequence, will shut down now.
		/// </summary>
		MAV_STATE_POWEROFF = 7,
		MAV_STATE_ENUM_END = 8,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAV_COMPONENT : uint
	{
		MAV_COMP_ID_ALL = 0,
		MAV_COMP_ID_CAMERA = 100,
		MAV_COMP_ID_SERVO1 = 140,
		MAV_COMP_ID_SERVO2 = 141,
		MAV_COMP_ID_SERVO3 = 142,
		MAV_COMP_ID_SERVO4 = 143,
		MAV_COMP_ID_SERVO5 = 144,
		MAV_COMP_ID_SERVO6 = 145,
		MAV_COMP_ID_SERVO7 = 146,
		MAV_COMP_ID_SERVO8 = 147,
		MAV_COMP_ID_SERVO9 = 148,
		MAV_COMP_ID_SERVO10 = 149,
		MAV_COMP_ID_SERVO11 = 150,
		MAV_COMP_ID_SERVO12 = 151,
		MAV_COMP_ID_SERVO13 = 152,
		MAV_COMP_ID_SERVO14 = 153,
		MAV_COMP_ID_GIMBAL = 154,
		MAV_COMP_ID_LOG = 155,
		MAV_COMP_ID_ADSB = 156,

		/// <summary>
		/// On Screen Display (OSD) devices for video links
		/// </summary>
		MAV_COMP_ID_OSD = 157,

		/// <summary>
		/// Generic autopilot peripheral component ID. Meant for devices that do not implement the parameter sub-protocol
		/// </summary>
		MAV_COMP_ID_PERIPHERAL = 158,
		MAV_COMP_ID_QX1_GIMBAL = 159,
		MAV_COMP_ID_MAPPER = 180,
		MAV_COMP_ID_MISSIONPLANNER = 190,
		MAV_COMP_ID_PATHPLANNER = 195,
		MAV_COMP_ID_IMU = 200,
		MAV_COMP_ID_IMU_2 = 201,
		MAV_COMP_ID_IMU_3 = 202,
		MAV_COMP_ID_GPS = 220,
		MAV_COMP_ID_UDP_BRIDGE = 240,
		MAV_COMP_ID_UART_BRIDGE = 241,
		MAV_COMP_ID_SYSTEM_CONTROL = 250,
		MAV_COMPONENT_ENUM_END = 251,

	}


	/// <summary>
	/// These encode the sensors whose status is sent as part of the SYS_STATUS message.
	/// </summary>
	public enum MAV_SYS_STATUS_SENSOR : uint
	{

		/// <summary>
		/// 0x01 3D gyro
		/// </summary>
		MAV_SYS_STATUS_SENSOR_3D_GYRO = 1,

		/// <summary>
		/// 0x02 3D accelerometer
		/// </summary>
		MAV_SYS_STATUS_SENSOR_3D_ACCEL = 2,

		/// <summary>
		/// 0x04 3D magnetometer
		/// </summary>
		MAV_SYS_STATUS_SENSOR_3D_MAG = 4,

		/// <summary>
		/// 0x08 absolute pressure
		/// </summary>
		MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = 8,

		/// <summary>
		/// 0x10 differential pressure
		/// </summary>
		MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = 16,

		/// <summary>
		/// 0x20 GPS
		/// </summary>
		MAV_SYS_STATUS_SENSOR_GPS = 32,

		/// <summary>
		/// 0x40 optical flow
		/// </summary>
		MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = 64,

		/// <summary>
		/// 0x80 computer vision position
		/// </summary>
		MAV_SYS_STATUS_SENSOR_VISION_POSITION = 128,

		/// <summary>
		/// 0x100 laser based position
		/// </summary>
		MAV_SYS_STATUS_SENSOR_LASER_POSITION = 256,

		/// <summary>
		/// 0x200 external ground truth (Vicon or Leica)
		/// </summary>
		MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = 512,

		/// <summary>
		/// 0x400 3D angular rate control
		/// </summary>
		MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = 1024,

		/// <summary>
		/// 0x800 attitude stabilization
		/// </summary>
		MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = 2048,

		/// <summary>
		/// 0x1000 yaw position
		/// </summary>
		MAV_SYS_STATUS_SENSOR_YAW_POSITION = 4096,

		/// <summary>
		/// 0x2000 z/altitude control
		/// </summary>
		MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = 8192,

		/// <summary>
		/// 0x4000 x/y position control
		/// </summary>
		MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = 16384,

		/// <summary>
		/// 0x8000 motor outputs / control
		/// </summary>
		MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = 32768,

		/// <summary>
		/// 0x10000 rc receiver
		/// </summary>
		MAV_SYS_STATUS_SENSOR_RC_RECEIVER = 65536,

		/// <summary>
		/// 0x20000 2nd 3D gyro
		/// </summary>
		MAV_SYS_STATUS_SENSOR_3D_GYRO2 = 131072,

		/// <summary>
		/// 0x40000 2nd 3D accelerometer
		/// </summary>
		MAV_SYS_STATUS_SENSOR_3D_ACCEL2 = 262144,

		/// <summary>
		/// 0x80000 2nd 3D magnetometer
		/// </summary>
		MAV_SYS_STATUS_SENSOR_3D_MAG2 = 524288,

		/// <summary>
		/// 0x100000 geofence
		/// </summary>
		MAV_SYS_STATUS_GEOFENCE = 1048576,

		/// <summary>
		/// 0x200000 AHRS subsystem health
		/// </summary>
		MAV_SYS_STATUS_AHRS = 2097152,

		/// <summary>
		/// 0x400000 Terrain subsystem health
		/// </summary>
		MAV_SYS_STATUS_TERRAIN = 4194304,

		/// <summary>
		/// 0x800000 Motors are reversed
		/// </summary>
		MAV_SYS_STATUS_REVERSE_MOTOR = 8388608,

		/// <summary>
		/// 0x1000000 Logging
		/// </summary>
		MAV_SYS_STATUS_LOGGING = 16777216,
		MAV_SYS_STATUS_SENSOR_ENUM_END = 16777217,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAV_FRAME : uint
	{

		/// <summary>
		/// Global coordinate frame, WGS84 coordinate system. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL)
		/// </summary>
		MAV_FRAME_GLOBAL = 0,

		/// <summary>
		/// Local coordinate frame, Z-up (x: north, y: east, z: down).
		/// </summary>
		MAV_FRAME_LOCAL_NED = 1,

		/// <summary>
		/// NOT a coordinate frame, indicates a mission command.
		/// </summary>
		MAV_FRAME_MISSION = 2,

		/// <summary>
		/// Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location.
		/// </summary>
		MAV_FRAME_GLOBAL_RELATIVE_ALT = 3,

		/// <summary>
		/// Local coordinate frame, Z-down (x: east, y: north, z: up)
		/// </summary>
		MAV_FRAME_LOCAL_ENU = 4,

		/// <summary>
		/// Global coordinate frame, WGS84 coordinate system. First value / x: latitude in degrees*1.0e-7, second value / y: longitude in degrees*1.0e-7, third value / z: positive altitude over mean sea level (MSL)
		/// </summary>
		MAV_FRAME_GLOBAL_INT = 5,

		/// <summary>
		/// Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude with 0 being at the altitude of the home location.
		/// </summary>
		MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6,

		/// <summary>
		/// Offset to the current local frame. Anything expressed in this frame should be added to the current local frame position.
		/// </summary>
		MAV_FRAME_LOCAL_OFFSET_NED = 7,

		/// <summary>
		/// Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.
		/// </summary>
		MAV_FRAME_BODY_NED = 8,

		/// <summary>
		/// Offset in body NED frame. This makes sense if adding setpoints to the current flight path, to avoid an obstacle - e.g. useful to command 2 m/s^2 acceleration to the east.
		/// </summary>
		MAV_FRAME_BODY_OFFSET_NED = 9,

		/// <summary>
		/// Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
		/// </summary>
		MAV_FRAME_GLOBAL_TERRAIN_ALT = 10,

		/// <summary>
		/// Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
		/// </summary>
		MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11,
		MAV_FRAME_ENUM_END = 12,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MAVLINK_DATA_STREAM_TYPE : uint
	{
		MAVLINK_DATA_STREAM_IMG_JPEG = 1,
		MAVLINK_DATA_STREAM_IMG_BMP = 2,
		MAVLINK_DATA_STREAM_IMG_RAW8U = 3,
		MAVLINK_DATA_STREAM_IMG_RAW32U = 4,
		MAVLINK_DATA_STREAM_IMG_PGM = 5,
		MAVLINK_DATA_STREAM_IMG_PNG = 6,
		MAVLINK_DATA_STREAM_TYPE_ENUM_END = 7,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum FENCE_ACTION : uint
	{

		/// <summary>
		/// Disable fenced mode
		/// </summary>
		FENCE_ACTION_NONE = 0,

		/// <summary>
		/// Switched to guided mode to return point (fence point 0)
		/// </summary>
		FENCE_ACTION_GUIDED = 1,

		/// <summary>
		/// Report fence breach, but don't take action
		/// </summary>
		FENCE_ACTION_REPORT = 2,

		/// <summary>
		/// Switched to guided mode to return point (fence point 0) with manual throttle control
		/// </summary>
		FENCE_ACTION_GUIDED_THR_PASS = 3,

		/// <summary>
		/// Switch to RTL (return to launch) mode and head for the return point.
		/// </summary>
		FENCE_ACTION_RTL = 4,
		FENCE_ACTION_ENUM_END = 5,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum FENCE_BREACH : uint
	{

		/// <summary>
		/// No last fence breach
		/// </summary>
		FENCE_BREACH_NONE = 0,

		/// <summary>
		/// Breached minimum altitude
		/// </summary>
		FENCE_BREACH_MINALT = 1,

		/// <summary>
		/// Breached maximum altitude
		/// </summary>
		FENCE_BREACH_MAXALT = 2,

		/// <summary>
		/// Breached fence boundary
		/// </summary>
		FENCE_BREACH_BOUNDARY = 3,
		FENCE_BREACH_ENUM_END = 4,

	}


	/// <summary>
	/// Enumeration of possible mount operation modes
	/// </summary>
	public enum MAV_MOUNT_MODE : uint
	{

		/// <summary>
		/// Load and keep safe position (Roll,Pitch,Yaw) from permant memory and stop stabilization
		/// </summary>
		MAV_MOUNT_MODE_RETRACT = 0,

		/// <summary>
		/// Load and keep neutral position (Roll,Pitch,Yaw) from permanent memory.
		/// </summary>
		MAV_MOUNT_MODE_NEUTRAL = 1,

		/// <summary>
		/// Load neutral position and start MAVLink Roll,Pitch,Yaw control with stabilization
		/// </summary>
		MAV_MOUNT_MODE_MAVLINK_TARGETING = 2,

		/// <summary>
		/// Load neutral position and start RC Roll,Pitch,Yaw control with stabilization
		/// </summary>
		MAV_MOUNT_MODE_RC_TARGETING = 3,

		/// <summary>
		/// Load neutral position and start to point to Lat,Lon,Alt
		/// </summary>
		MAV_MOUNT_MODE_GPS_POINT = 4,
		MAV_MOUNT_MODE_ENUM_END = 5,

	}


	/// <summary>
	/// THIS INTERFACE IS DEPRECATED AS OF JULY 2015. Please use MESSAGE_INTERVAL instead. A data stream is not a fixed set of messages, but rather a
	///     recommendation to the autopilot software. Individual autopilots may or may not obey
	///     the recommended messages.
	/// </summary>
	public enum MAV_DATA_STREAM : uint
	{

		/// <summary>
		/// Enable all data streams
		/// </summary>
		MAV_DATA_STREAM_ALL = 0,

		/// <summary>
		/// Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.
		/// </summary>
		MAV_DATA_STREAM_RAW_SENSORS = 1,

		/// <summary>
		/// Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS
		/// </summary>
		MAV_DATA_STREAM_EXTENDED_STATUS = 2,

		/// <summary>
		/// Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW
		/// </summary>
		MAV_DATA_STREAM_RC_CHANNELS = 3,

		/// <summary>
		/// Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT, NAV_CONTROLLER_OUTPUT.
		/// </summary>
		MAV_DATA_STREAM_RAW_CONTROLLER = 4,

		/// <summary>
		/// Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages.
		/// </summary>
		MAV_DATA_STREAM_POSITION = 6,

		/// <summary>
		/// Dependent on the autopilot
		/// </summary>
		MAV_DATA_STREAM_EXTRA1 = 10,

		/// <summary>
		/// Dependent on the autopilot
		/// </summary>
		MAV_DATA_STREAM_EXTRA2 = 11,

		/// <summary>
		/// Dependent on the autopilot
		/// </summary>
		MAV_DATA_STREAM_EXTRA3 = 12,
		MAV_DATA_STREAM_ENUM_END = 13,

	}


	/// <summary>
	///  The ROI (region of interest) for the vehicle. This can be
	///                be used by the vehicle for camera/vehicle attitude alignment (see
	///                MAV_CMD_NAV_ROI).
	/// </summary>
	public enum MAV_ROI : uint
	{

		/// <summary>
		/// No region of interest.
		/// </summary>
		MAV_ROI_NONE = 0,

		/// <summary>
		/// Point toward next MISSION.
		/// </summary>
		MAV_ROI_WPNEXT = 1,

		/// <summary>
		/// Point toward given MISSION.
		/// </summary>
		MAV_ROI_WPINDEX = 2,

		/// <summary>
		/// Point toward fixed location.
		/// </summary>
		MAV_ROI_LOCATION = 3,

		/// <summary>
		/// Point toward of given id.
		/// </summary>
		MAV_ROI_TARGET = 4,
		MAV_ROI_ENUM_END = 5,

	}


	/// <summary>
	/// ACK / NACK / ERROR values as a result of MAV_CMDs and for mission item transmission.
	/// </summary>
	public enum MAV_CMD_ACK : uint
	{

		/// <summary>
		/// Command / mission item is ok.
		/// </summary>
		MAV_CMD_ACK_OK = 1,

		/// <summary>
		/// Generic error message if none of the other reasons fails or if no detailed error reporting is implemented.
		/// </summary>
		MAV_CMD_ACK_ERR_FAIL = 2,

		/// <summary>
		/// The system is refusing to accept this command from this source / communication partner.
		/// </summary>
		MAV_CMD_ACK_ERR_ACCESS_DENIED = 3,

		/// <summary>
		/// Command or mission item is not supported, other commands would be accepted.
		/// </summary>
		MAV_CMD_ACK_ERR_NOT_SUPPORTED = 4,

		/// <summary>
		/// The coordinate frame of this command / mission item is not supported.
		/// </summary>
		MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED = 5,

		/// <summary>
		/// The coordinate frame of this command is ok, but he coordinate values exceed the safety limits of this system. This is a generic error, please use the more specific error messages below if possible.
		/// </summary>
		MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE = 6,

		/// <summary>
		/// The X or latitude value is out of range.
		/// </summary>
		MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE = 7,

		/// <summary>
		/// The Y or longitude value is out of range.
		/// </summary>
		MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE = 8,

		/// <summary>
		/// The Z or altitude value is out of range.
		/// </summary>
		MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE = 9,
		MAV_CMD_ACK_ENUM_END = 10,

	}


	/// <summary>
	/// Specifies the datatype of a MAVLink parameter.
	/// </summary>
	public enum MAV_PARAM_TYPE : uint
	{

		/// <summary>
		/// 8-bit unsigned integer
		/// </summary>
		MAV_PARAM_TYPE_UINT8 = 1,

		/// <summary>
		/// 8-bit signed integer
		/// </summary>
		MAV_PARAM_TYPE_INT8 = 2,

		/// <summary>
		/// 16-bit unsigned integer
		/// </summary>
		MAV_PARAM_TYPE_UINT16 = 3,

		/// <summary>
		/// 16-bit signed integer
		/// </summary>
		MAV_PARAM_TYPE_INT16 = 4,

		/// <summary>
		/// 32-bit unsigned integer
		/// </summary>
		MAV_PARAM_TYPE_UINT32 = 5,

		/// <summary>
		/// 32-bit signed integer
		/// </summary>
		MAV_PARAM_TYPE_INT32 = 6,

		/// <summary>
		/// 64-bit unsigned integer
		/// </summary>
		MAV_PARAM_TYPE_UINT64 = 7,

		/// <summary>
		/// 64-bit signed integer
		/// </summary>
		MAV_PARAM_TYPE_INT64 = 8,

		/// <summary>
		/// 32-bit floating-point
		/// </summary>
		MAV_PARAM_TYPE_REAL32 = 9,

		/// <summary>
		/// 64-bit floating-point
		/// </summary>
		MAV_PARAM_TYPE_REAL64 = 10,
		MAV_PARAM_TYPE_ENUM_END = 11,

	}


	/// <summary>
	/// result from a mavlink command
	/// </summary>
	public enum MAV_RESULT : uint
	{

		/// <summary>
		/// Command ACCEPTED and EXECUTED
		/// </summary>
		MAV_RESULT_ACCEPTED = 0,

		/// <summary>
		/// Command TEMPORARY REJECTED/DENIED
		/// </summary>
		MAV_RESULT_TEMPORARILY_REJECTED = 1,

		/// <summary>
		/// Command PERMANENTLY DENIED
		/// </summary>
		MAV_RESULT_DENIED = 2,

		/// <summary>
		/// Command UNKNOWN/UNSUPPORTED
		/// </summary>
		MAV_RESULT_UNSUPPORTED = 3,

		/// <summary>
		/// Command executed, but failed
		/// </summary>
		MAV_RESULT_FAILED = 4,
		MAV_RESULT_ENUM_END = 5,

	}


	/// <summary>
	/// result in a mavlink mission ack
	/// </summary>
	public enum MAV_MISSION_RESULT : uint
	{

		/// <summary>
		/// mission accepted OK
		/// </summary>
		MAV_MISSION_ACCEPTED = 0,

		/// <summary>
		/// generic error / not accepting mission commands at all right now
		/// </summary>
		MAV_MISSION_ERROR = 1,

		/// <summary>
		/// coordinate frame is not supported
		/// </summary>
		MAV_MISSION_UNSUPPORTED_FRAME = 2,

		/// <summary>
		/// command is not supported
		/// </summary>
		MAV_MISSION_UNSUPPORTED = 3,

		/// <summary>
		/// mission item exceeds storage space
		/// </summary>
		MAV_MISSION_NO_SPACE = 4,

		/// <summary>
		/// one of the parameters has an invalid value
		/// </summary>
		MAV_MISSION_INVALID = 5,

		/// <summary>
		/// param1 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM1 = 6,

		/// <summary>
		/// param2 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM2 = 7,

		/// <summary>
		/// param3 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM3 = 8,

		/// <summary>
		/// param4 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM4 = 9,

		/// <summary>
		/// x/param5 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM5_X = 10,

		/// <summary>
		/// y/param6 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM6_Y = 11,

		/// <summary>
		/// param7 has an invalid value
		/// </summary>
		MAV_MISSION_INVALID_PARAM7 = 12,

		/// <summary>
		/// received waypoint out of sequence
		/// </summary>
		MAV_MISSION_INVALID_SEQUENCE = 13,

		/// <summary>
		/// not accepting any mission commands from this communication partner
		/// </summary>
		MAV_MISSION_DENIED = 14,
		MAV_MISSION_RESULT_ENUM_END = 15,

	}


	/// <summary>
	/// Indicates the severity level, generally used for status messages to indicate their relative urgency. Based on RFC-5424 using expanded definitions at: http://www.kiwisyslog.com/kb/info:-syslog-message-levels/.
	/// </summary>
	public enum MAV_SEVERITY : uint
	{

		/// <summary>
		/// System is unusable. This is a "panic" condition.
		/// </summary>
		MAV_SEVERITY_EMERGENCY = 0,

		/// <summary>
		/// Action should be taken immediately. Indicates error in non-critical systems.
		/// </summary>
		MAV_SEVERITY_ALERT = 1,

		/// <summary>
		/// Action must be taken immediately. Indicates failure in a primary system.
		/// </summary>
		MAV_SEVERITY_CRITICAL = 2,

		/// <summary>
		/// Indicates an error in secondary/redundant systems.
		/// </summary>
		MAV_SEVERITY_ERROR = 3,

		/// <summary>
		/// Indicates about a possible future error if this is not resolved within a given timeframe. Example would be a low battery warning.
		/// </summary>
		MAV_SEVERITY_WARNING = 4,

		/// <summary>
		/// An unusual event has occured, though not an error condition. This should be investigated for the root cause.
		/// </summary>
		MAV_SEVERITY_NOTICE = 5,

		/// <summary>
		/// Normal operational messages. Useful for logging. No action is required for these messages.
		/// </summary>
		MAV_SEVERITY_INFO = 6,

		/// <summary>
		/// Useful non-operational messages that can assist in debugging. These should not occur during normal operation.
		/// </summary>
		MAV_SEVERITY_DEBUG = 7,
		MAV_SEVERITY_ENUM_END = 8,

	}


	/// <summary>
	/// Power supply status flags (bitmask)
	/// </summary>
	public enum MAV_POWER_STATUS : uint
	{

		/// <summary>
		/// main brick power supply valid
		/// </summary>
		MAV_POWER_STATUS_BRICK_VALID = 1,

		/// <summary>
		/// main servo power supply valid for FMU
		/// </summary>
		MAV_POWER_STATUS_SERVO_VALID = 2,

		/// <summary>
		/// USB power is connected
		/// </summary>
		MAV_POWER_STATUS_USB_CONNECTED = 4,

		/// <summary>
		/// peripheral supply is in over-current state
		/// </summary>
		MAV_POWER_STATUS_PERIPH_OVERCURRENT = 8,

		/// <summary>
		/// hi-power peripheral supply is in over-current state
		/// </summary>
		MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT = 16,

		/// <summary>
		/// Power status has changed since boot
		/// </summary>
		MAV_POWER_STATUS_CHANGED = 32,
		MAV_POWER_STATUS_ENUM_END = 33,

	}


	/// <summary>
	/// SERIAL_CONTROL device types
	/// </summary>
	public enum SERIAL_CONTROL_DEV : uint
	{

		/// <summary>
		/// First telemetry port
		/// </summary>
		SERIAL_CONTROL_DEV_TELEM1 = 0,

		/// <summary>
		/// Second telemetry port
		/// </summary>
		SERIAL_CONTROL_DEV_TELEM2 = 1,

		/// <summary>
		/// First GPS port
		/// </summary>
		SERIAL_CONTROL_DEV_GPS1 = 2,

		/// <summary>
		/// Second GPS port
		/// </summary>
		SERIAL_CONTROL_DEV_GPS2 = 3,

		/// <summary>
		/// system shell
		/// </summary>
		SERIAL_CONTROL_DEV_SHELL = 10,
		SERIAL_CONTROL_DEV_ENUM_END = 11,

	}


	/// <summary>
	/// SERIAL_CONTROL flags (bitmask)
	/// </summary>
	public enum SERIAL_CONTROL_FLAG : uint
	{

		/// <summary>
		/// Set if this is a reply
		/// </summary>
		SERIAL_CONTROL_FLAG_REPLY = 1,

		/// <summary>
		/// Set if the sender wants the receiver to send a response as another SERIAL_CONTROL message
		/// </summary>
		SERIAL_CONTROL_FLAG_RESPOND = 2,

		/// <summary>
		/// Set if access to the serial port should be removed from whatever driver is currently using it, giving exclusive access to the SERIAL_CONTROL protocol. The port can be handed back by sending a request without this flag set
		/// </summary>
		SERIAL_CONTROL_FLAG_EXCLUSIVE = 4,

		/// <summary>
		/// Block on writes to the serial port
		/// </summary>
		SERIAL_CONTROL_FLAG_BLOCKING = 8,

		/// <summary>
		/// Send multiple replies until port is drained
		/// </summary>
		SERIAL_CONTROL_FLAG_MULTI = 16,
		SERIAL_CONTROL_FLAG_ENUM_END = 17,

	}


	/// <summary>
	/// Enumeration of distance sensor types
	/// </summary>
	public enum MAV_DISTANCE_SENSOR : uint
	{

		/// <summary>
		/// Laser rangefinder, e.g. LightWare SF02/F or PulsedLight units
		/// </summary>
		MAV_DISTANCE_SENSOR_LASER = 0,

		/// <summary>
		/// Ultrasound rangefinder, e.g. MaxBotix units
		/// </summary>
		MAV_DISTANCE_SENSOR_ULTRASOUND = 1,

		/// <summary>
		/// Infrared rangefinder, e.g. Sharp units
		/// </summary>
		MAV_DISTANCE_SENSOR_INFRARED = 2,
		MAV_DISTANCE_SENSOR_ENUM_END = 3,

	}


	/// <summary>
	/// Enumeration of sensor orientation, according to its rotations
	/// </summary>
	public enum MAV_SENSOR_ORIENTATION : uint
	{

		/// <summary>
		/// Roll: 0, Pitch: 0, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_NONE = 0,

		/// <summary>
		/// Roll: 0, Pitch: 0, Yaw: 45
		/// </summary>
		MAV_SENSOR_ROTATION_YAW_45 = 1,

		/// <summary>
		/// Roll: 0, Pitch: 0, Yaw: 90
		/// </summary>
		MAV_SENSOR_ROTATION_YAW_90 = 2,

		/// <summary>
		/// Roll: 0, Pitch: 0, Yaw: 135
		/// </summary>
		MAV_SENSOR_ROTATION_YAW_135 = 3,

		/// <summary>
		/// Roll: 0, Pitch: 0, Yaw: 180
		/// </summary>
		MAV_SENSOR_ROTATION_YAW_180 = 4,

		/// <summary>
		/// Roll: 0, Pitch: 0, Yaw: 225
		/// </summary>
		MAV_SENSOR_ROTATION_YAW_225 = 5,

		/// <summary>
		/// Roll: 0, Pitch: 0, Yaw: 270
		/// </summary>
		MAV_SENSOR_ROTATION_YAW_270 = 6,

		/// <summary>
		/// Roll: 0, Pitch: 0, Yaw: 315
		/// </summary>
		MAV_SENSOR_ROTATION_YAW_315 = 7,

		/// <summary>
		/// Roll: 180, Pitch: 0, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_180 = 8,

		/// <summary>
		/// Roll: 180, Pitch: 0, Yaw: 45
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_180_YAW_45 = 9,

		/// <summary>
		/// Roll: 180, Pitch: 0, Yaw: 90
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_180_YAW_90 = 10,

		/// <summary>
		/// Roll: 180, Pitch: 0, Yaw: 135
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_180_YAW_135 = 11,

		/// <summary>
		/// Roll: 0, Pitch: 180, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_PITCH_180 = 12,

		/// <summary>
		/// Roll: 180, Pitch: 0, Yaw: 225
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_180_YAW_225 = 13,

		/// <summary>
		/// Roll: 180, Pitch: 0, Yaw: 270
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_180_YAW_270 = 14,

		/// <summary>
		/// Roll: 180, Pitch: 0, Yaw: 315
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_180_YAW_315 = 15,

		/// <summary>
		/// Roll: 90, Pitch: 0, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_90 = 16,

		/// <summary>
		/// Roll: 90, Pitch: 0, Yaw: 45
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_90_YAW_45 = 17,

		/// <summary>
		/// Roll: 90, Pitch: 0, Yaw: 90
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_90_YAW_90 = 18,

		/// <summary>
		/// Roll: 90, Pitch: 0, Yaw: 135
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_90_YAW_135 = 19,

		/// <summary>
		/// Roll: 270, Pitch: 0, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_270 = 20,

		/// <summary>
		/// Roll: 270, Pitch: 0, Yaw: 45
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_270_YAW_45 = 21,

		/// <summary>
		/// Roll: 270, Pitch: 0, Yaw: 90
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_270_YAW_90 = 22,

		/// <summary>
		/// Roll: 270, Pitch: 0, Yaw: 135
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_270_YAW_135 = 23,

		/// <summary>
		/// Roll: 0, Pitch: 90, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_PITCH_90 = 24,

		/// <summary>
		/// Roll: 0, Pitch: 270, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_PITCH_270 = 25,

		/// <summary>
		/// Roll: 0, Pitch: 180, Yaw: 90
		/// </summary>
		MAV_SENSOR_ROTATION_PITCH_180_YAW_90 = 26,

		/// <summary>
		/// Roll: 0, Pitch: 180, Yaw: 270
		/// </summary>
		MAV_SENSOR_ROTATION_PITCH_180_YAW_270 = 27,

		/// <summary>
		/// Roll: 90, Pitch: 90, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_90_PITCH_90 = 28,

		/// <summary>
		/// Roll: 180, Pitch: 90, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_180_PITCH_90 = 29,

		/// <summary>
		/// Roll: 270, Pitch: 90, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_270_PITCH_90 = 30,

		/// <summary>
		/// Roll: 90, Pitch: 180, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_90_PITCH_180 = 31,

		/// <summary>
		/// Roll: 270, Pitch: 180, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_270_PITCH_180 = 32,

		/// <summary>
		/// Roll: 90, Pitch: 270, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_90_PITCH_270 = 33,

		/// <summary>
		/// Roll: 180, Pitch: 270, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_180_PITCH_270 = 34,

		/// <summary>
		/// Roll: 270, Pitch: 270, Yaw: 0
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_270_PITCH_270 = 35,

		/// <summary>
		/// Roll: 90, Pitch: 180, Yaw: 90
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90 = 36,

		/// <summary>
		/// Roll: 90, Pitch: 0, Yaw: 270
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_90_YAW_270 = 37,

		/// <summary>
		/// Roll: 315, Pitch: 315, Yaw: 315
		/// </summary>
		MAV_SENSOR_ROTATION_ROLL_315_PITCH_315_YAW_315 = 38,
		MAV_SENSOR_ORIENTATION_ENUM_END = 39,

	}


	/// <summary>
	/// Bitmask of (optional) autopilot capabilities (64 bit). If a bit is set, the autopilot supports this capability.
	/// </summary>
	public enum MAV_PROTOCOL_CAPABILITY : uint
	{

		/// <summary>
		/// Autopilot supports MISSION float message type.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT = 1,

		/// <summary>
		/// Autopilot supports the new param float message type.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT = 2,

		/// <summary>
		/// Autopilot supports MISSION_INT scaled integer message type.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_MISSION_INT = 4,

		/// <summary>
		/// Autopilot supports COMMAND_INT scaled integer message type.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_COMMAND_INT = 8,

		/// <summary>
		/// Autopilot supports the new param union message type.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_PARAM_UNION = 16,

		/// <summary>
		/// Autopilot supports the new FILE_TRANSFER_PROTOCOL message type.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_FTP = 32,

		/// <summary>
		/// Autopilot supports commanding attitude offboard.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET = 64,

		/// <summary>
		/// Autopilot supports commanding position and velocity targets in local NED frame.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED = 128,

		/// <summary>
		/// Autopilot supports commanding position and velocity targets in global scaled integers.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT = 256,

		/// <summary>
		/// Autopilot supports terrain protocol / data handling.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_TERRAIN = 512,

		/// <summary>
		/// Autopilot supports direct actuator control.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET = 1024,

		/// <summary>
		/// Autopilot supports the flight termination command.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION = 2048,

		/// <summary>
		/// Autopilot supports onboard compass calibration.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION = 4096,

		/// <summary>
		/// Autopilot supports mavlink version 2.
		/// </summary>
		MAV_PROTOCOL_CAPABILITY_MAVLINK2 = 8192,
		MAV_PROTOCOL_CAPABILITY_ENUM_END = 8193,

	}


	/// <summary>
	/// Enumeration of estimator types
	/// </summary>
	public enum MAV_ESTIMATOR_TYPE : uint
	{

		/// <summary>
		/// This is a naive estimator without any real covariance feedback.
		/// </summary>
		MAV_ESTIMATOR_TYPE_NAIVE = 1,

		/// <summary>
		/// Computer vision based estimate. Might be up to scale.
		/// </summary>
		MAV_ESTIMATOR_TYPE_VISION = 2,

		/// <summary>
		/// Visual-inertial estimate.
		/// </summary>
		MAV_ESTIMATOR_TYPE_VIO = 3,

		/// <summary>
		/// Plain GPS estimate.
		/// </summary>
		MAV_ESTIMATOR_TYPE_GPS = 4,

		/// <summary>
		/// Estimator integrating GPS and inertial sensing.
		/// </summary>
		MAV_ESTIMATOR_TYPE_GPS_INS = 5,
		MAV_ESTIMATOR_TYPE_ENUM_END = 6,

	}


	/// <summary>
	/// Enumeration of battery types
	/// </summary>
	public enum MAV_BATTERY_TYPE : uint
	{

		/// <summary>
		/// Not specified.
		/// </summary>
		MAV_BATTERY_TYPE_UNKNOWN = 0,

		/// <summary>
		/// Lithium polymer battery
		/// </summary>
		MAV_BATTERY_TYPE_LIPO = 1,

		/// <summary>
		/// Lithium-iron-phosphate battery
		/// </summary>
		MAV_BATTERY_TYPE_LIFE = 2,

		/// <summary>
		/// Lithium-ION battery
		/// </summary>
		MAV_BATTERY_TYPE_LION = 3,

		/// <summary>
		/// Nickel metal hydride battery
		/// </summary>
		MAV_BATTERY_TYPE_NIMH = 4,
		MAV_BATTERY_TYPE_ENUM_END = 5,

	}


	/// <summary>
	/// Enumeration of battery functions
	/// </summary>
	public enum MAV_BATTERY_FUNCTION : uint
	{

		/// <summary>
		/// Battery function is unknown
		/// </summary>
		MAV_BATTERY_FUNCTION_UNKNOWN = 0,

		/// <summary>
		/// Battery supports all flight systems
		/// </summary>
		MAV_BATTERY_FUNCTION_ALL = 1,

		/// <summary>
		/// Battery for the propulsion system
		/// </summary>
		MAV_BATTERY_FUNCTION_PROPULSION = 2,

		/// <summary>
		/// Avionics battery
		/// </summary>
		MAV_BATTERY_FUNCTION_AVIONICS = 3,

		/// <summary>
		/// Payload battery
		/// </summary>
		MAV_BATTERY_TYPE_PAYLOAD = 4,
		MAV_BATTERY_FUNCTION_ENUM_END = 5,

	}


	/// <summary>
	/// Enumeration of VTOL states
	/// </summary>
	public enum MAV_VTOL_STATE : uint
	{

		/// <summary>
		/// MAV is not configured as VTOL
		/// </summary>
		MAV_VTOL_STATE_UNDEFINED = 0,

		/// <summary>
		/// VTOL is in transition from multicopter to fixed-wing
		/// </summary>
		MAV_VTOL_STATE_TRANSITION_TO_FW = 1,

		/// <summary>
		/// VTOL is in transition from fixed-wing to multicopter
		/// </summary>
		MAV_VTOL_STATE_TRANSITION_TO_MC = 2,

		/// <summary>
		/// VTOL is in multicopter state
		/// </summary>
		MAV_VTOL_STATE_MC = 3,

		/// <summary>
		/// VTOL is in fixed-wing state
		/// </summary>
		MAV_VTOL_STATE_FW = 4,
		MAV_VTOL_STATE_ENUM_END = 5,

	}


	/// <summary>
	/// Enumeration of landed detector states
	/// </summary>
	public enum MAV_LANDED_STATE : uint
	{

		/// <summary>
		/// MAV landed state is unknown
		/// </summary>
		MAV_LANDED_STATE_UNDEFINED = 0,

		/// <summary>
		/// MAV is landed (on ground)
		/// </summary>
		MAV_LANDED_STATE_ON_GROUND = 1,

		/// <summary>
		/// MAV is in air
		/// </summary>
		MAV_LANDED_STATE_IN_AIR = 2,
		MAV_LANDED_STATE_ENUM_END = 3,

	}


	/// <summary>
	/// Enumeration of the ADSB altimeter types
	/// </summary>
	public enum ADSB_ALTITUDE_TYPE : uint
	{

		/// <summary>
		/// Altitude reported from a Baro source using QNH reference
		/// </summary>
		ADSB_ALTITUDE_TYPE_PRESSURE_QNH = 0,

		/// <summary>
		/// Altitude reported from a GNSS source
		/// </summary>
		ADSB_ALTITUDE_TYPE_GEOMETRIC = 1,
		ADSB_ALTITUDE_TYPE_ENUM_END = 2,

	}


	/// <summary>
	/// ADSB classification for the type of vehicle emitting the transponder signal
	/// </summary>
	public enum ADSB_EMITTER_TYPE : uint
	{
		ADSB_EMITTER_TYPE_NO_INFO = 0,
		ADSB_EMITTER_TYPE_LIGHT = 1,
		ADSB_EMITTER_TYPE_SMALL = 2,
		ADSB_EMITTER_TYPE_LARGE = 3,
		ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE = 4,
		ADSB_EMITTER_TYPE_HEAVY = 5,
		ADSB_EMITTER_TYPE_HIGHLY_MANUV = 6,
		ADSB_EMITTER_TYPE_ROTOCRAFT = 7,
		ADSB_EMITTER_TYPE_UNASSIGNED = 8,
		ADSB_EMITTER_TYPE_GLIDER = 9,
		ADSB_EMITTER_TYPE_LIGHTER_AIR = 10,
		ADSB_EMITTER_TYPE_PARACHUTE = 11,
		ADSB_EMITTER_TYPE_ULTRA_LIGHT = 12,
		ADSB_EMITTER_TYPE_UNASSIGNED2 = 13,
		ADSB_EMITTER_TYPE_UAV = 14,
		ADSB_EMITTER_TYPE_SPACE = 15,
		ADSB_EMITTER_TYPE_UNASSGINED3 = 16,
		ADSB_EMITTER_TYPE_EMERGENCY_SURFACE = 17,
		ADSB_EMITTER_TYPE_SERVICE_SURFACE = 18,
		ADSB_EMITTER_TYPE_POINT_OBSTACLE = 19,
		ADSB_EMITTER_TYPE_ENUM_END = 20,

	}


	/// <summary>
	/// These flags indicate status such as data validity of each data source. Set = data valid
	/// </summary>
	public enum ADSB_FLAGS : uint
	{
		ADSB_FLAGS_VALID_COORDS = 1,
		ADSB_FLAGS_VALID_ALTITUDE = 2,
		ADSB_FLAGS_VALID_HEADING = 4,
		ADSB_FLAGS_VALID_VELOCITY = 8,
		ADSB_FLAGS_VALID_CALLSIGN = 16,
		ADSB_FLAGS_VALID_SQUAWK = 32,
		ADSB_FLAGS_SIMULATED = 64,
		ADSB_FLAGS_ENUM_END = 65,

	}


	/// <summary>
	/// Bitmask of options for the MAV_CMD_DO_REPOSITION
	/// </summary>
	public enum MAV_DO_REPOSITION_FLAGS : uint
	{

		/// <summary>
		/// The aircraft should immediately transition into guided. This should not be set for follow me applications
		/// </summary>
		MAV_DO_REPOSITION_FLAGS_CHANGE_MODE = 1,
		MAV_DO_REPOSITION_FLAGS_ENUM_END = 2,

	}


	/// <summary>
	/// Flags in EKF_STATUS message
	/// </summary>
	public enum ESTIMATOR_STATUS_FLAGS : uint
	{

		/// <summary>
		/// True if the attitude estimate is good
		/// </summary>
		ESTIMATOR_ATTITUDE = 1,

		/// <summary>
		/// True if the horizontal velocity estimate is good
		/// </summary>
		ESTIMATOR_VELOCITY_HORIZ = 2,

		/// <summary>
		/// True if the  vertical velocity estimate is good
		/// </summary>
		ESTIMATOR_VELOCITY_VERT = 4,

		/// <summary>
		/// True if the horizontal position (relative) estimate is good
		/// </summary>
		ESTIMATOR_POS_HORIZ_REL = 8,

		/// <summary>
		/// True if the horizontal position (absolute) estimate is good
		/// </summary>
		ESTIMATOR_POS_HORIZ_ABS = 16,

		/// <summary>
		/// True if the vertical position (absolute) estimate is good
		/// </summary>
		ESTIMATOR_POS_VERT_ABS = 32,

		/// <summary>
		/// True if the vertical position (above ground) estimate is good
		/// </summary>
		ESTIMATOR_POS_VERT_AGL = 64,

		/// <summary>
		/// True if the EKF is in a constant position mode and is not using external measurements (eg GPS or optical flow)
		/// </summary>
		ESTIMATOR_CONST_POS_MODE = 128,

		/// <summary>
		/// True if the EKF has sufficient data to enter a mode that will provide a (relative) position estimate
		/// </summary>
		ESTIMATOR_PRED_POS_HORIZ_REL = 256,

		/// <summary>
		/// True if the EKF has sufficient data to enter a mode that will provide a (absolute) position estimate
		/// </summary>
		ESTIMATOR_PRED_POS_HORIZ_ABS = 512,

		/// <summary>
		/// True if the EKF has detected a GPS glitch
		/// </summary>
		ESTIMATOR_GPS_GLITCH = 1024,
		ESTIMATOR_STATUS_FLAGS_ENUM_END = 1025,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum MOTOR_TEST_THROTTLE_TYPE : uint
	{

		/// <summary>
		/// throttle as a percentage from 0 ~ 100
		/// </summary>
		MOTOR_TEST_THROTTLE_PERCENT = 0,

		/// <summary>
		/// throttle as an absolute PWM value (normally in range of 1000~2000)
		/// </summary>
		MOTOR_TEST_THROTTLE_PWM = 1,

		/// <summary>
		/// throttle pass-through from pilot's transmitter
		/// </summary>
		MOTOR_TEST_THROTTLE_PILOT = 2,
		MOTOR_TEST_THROTTLE_TYPE_ENUM_END = 3,

	}


	/// <summary>
	/// 
	/// </summary>
	public enum GPS_INPUT_IGNORE_FLAGS : uint
	{

		/// <summary>
		/// ignore altitude field
		/// </summary>
		GPS_INPUT_IGNORE_FLAG_ALT = 1,

		/// <summary>
		/// ignore hdop field
		/// </summary>
		GPS_INPUT_IGNORE_FLAG_HDOP = 2,

		/// <summary>
		/// ignore vdop field
		/// </summary>
		GPS_INPUT_IGNORE_FLAG_VDOP = 4,

		/// <summary>
		/// ignore horizontal velocity field (vn and ve)
		/// </summary>
		GPS_INPUT_IGNORE_FLAG_VEL_HORIZ = 8,

		/// <summary>
		/// ignore vertical velocity field (vd)
		/// </summary>
		GPS_INPUT_IGNORE_FLAG_VEL_VERT = 16,

		/// <summary>
		/// ignore speed accuracy field
		/// </summary>
		GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY = 32,

		/// <summary>
		/// ignore horizontal accuracy field
		/// </summary>
		GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY = 64,

		/// <summary>
		/// ignore vertical accuracy field
		/// </summary>
		GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY = 128,
		GPS_INPUT_IGNORE_FLAGS_ENUM_END = 129,

	}


	/// <summary>
	/// Possible actions an aircraft can take to avoid a collision.
	/// </summary>
	public enum MAV_COLLISION_ACTION : uint
	{

		/// <summary>
		/// Ignore any potential collisions
		/// </summary>
		MAV_COLLISION_ACTION_NONE = 0,

		/// <summary>
		/// Report potential collision
		/// </summary>
		MAV_COLLISION_ACTION_REPORT = 1,

		/// <summary>
		/// Ascend or Descend to avoid threat
		/// </summary>
		MAV_COLLISION_ACTION_ASCEND_OR_DESCEND = 2,

		/// <summary>
		/// Move horizontally to avoid threat
		/// </summary>
		MAV_COLLISION_ACTION_MOVE_HORIZONTALLY = 3,

		/// <summary>
		/// Aircraft to move perpendicular to the collision's velocity vector
		/// </summary>
		MAV_COLLISION_ACTION_MOVE_PERPENDICULAR = 4,

		/// <summary>
		/// Aircraft to fly directly back to its launch point
		/// </summary>
		MAV_COLLISION_ACTION_RTL = 5,

		/// <summary>
		/// Aircraft to stop in place
		/// </summary>
		MAV_COLLISION_ACTION_HOVER = 6,
		MAV_COLLISION_ACTION_ENUM_END = 7,

	}


	/// <summary>
	/// Aircraft-rated danger from this threat.
	/// </summary>
	public enum MAV_COLLISION_THREAT_LEVEL : uint
	{

		/// <summary>
		/// Not a threat
		/// </summary>
		MAV_COLLISION_THREAT_LEVEL_NONE = 0,

		/// <summary>
		/// Craft is mildly concerned about this threat
		/// </summary>
		MAV_COLLISION_THREAT_LEVEL_LOW = 1,

		/// <summary>
		/// Craft is panicing, and may take actions to avoid threat
		/// </summary>
		MAV_COLLISION_THREAT_LEVEL_HIGH = 2,
		MAV_COLLISION_THREAT_LEVEL_ENUM_END = 3,

	}


	/// <summary>
	/// Source of information about this collision.
	/// </summary>
	public enum MAV_COLLISION_SRC : uint
	{

		/// <summary>
		/// ID field references ADSB_VEHICLE packets
		/// </summary>
		MAV_COLLISION_SRC_ADSB = 0,

		/// <summary>
		/// ID field references MAVLink SRC ID
		/// </summary>
		MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT = 1,
		MAV_COLLISION_SRC_ENUM_END = 2,

	}


	/// <summary>
	/// Type of GPS fix
	/// </summary>
	public enum GPS_FIX_TYPE : uint
	{

		/// <summary>
		/// No GPS connected
		/// </summary>
		GPS_FIX_TYPE_NO_GPS = 0,

		/// <summary>
		/// No position information, GPS is connected
		/// </summary>
		GPS_FIX_TYPE_NO_FIX = 1,

		/// <summary>
		/// 2D position
		/// </summary>
		GPS_FIX_TYPE_2D_FIX = 2,

		/// <summary>
		/// 3D position
		/// </summary>
		GPS_FIX_TYPE_3D_FIX = 3,

		/// <summary>
		/// DGPS/SBAS aided 3D position
		/// </summary>
		GPS_FIX_TYPE_DGPS = 4,

		/// <summary>
		/// RTK float, 3D position
		/// </summary>
		GPS_FIX_TYPE_RTK_FLOAT = 5,

		/// <summary>
		/// RTK Fixed, 3D position
		/// </summary>
		GPS_FIX_TYPE_RTK_FIXED = 6,

		/// <summary>
		/// Static fixed, typically used for base stations
		/// </summary>
		GPS_FIX_TYPE_STATIC = 7,
		GPS_FIX_TYPE_ENUM_END = 8,

	}


	/// <summary>
	/// State flags for ADS-B transponder dynamic report
	/// </summary>
	public enum UAVIONIX_ADSB_OUT_DYNAMIC_STATE : uint
	{
		UAVIONIX_ADSB_OUT_DYNAMIC_STATE_INTENT_CHANGE = 1,
		UAVIONIX_ADSB_OUT_DYNAMIC_STATE_AUTOPILOT_ENABLED = 2,
		UAVIONIX_ADSB_OUT_DYNAMIC_STATE_NICBARO_CROSSCHECKED = 4,
		UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND = 8,
		UAVIONIX_ADSB_OUT_DYNAMIC_STATE_IDENT = 16,
		UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ENUM_END = 17,

	}


	/// <summary>
	/// Transceiver RF control flags for ADS-B transponder dynamic reports
	/// </summary>
	public enum UAVIONIX_ADSB_OUT_RF_SELECT : uint
	{
		UAVIONIX_ADSB_OUT_RF_SELECT_STANDBY = 0,
		UAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED = 1,
		UAVIONIX_ADSB_OUT_RF_SELECT_TX_ENABLED = 2,
		UAVIONIX_ADSB_OUT_RF_SELECT_ENUM_END = 3,

	}


	/// <summary>
	/// Status for ADS-B transponder dynamic input
	/// </summary>
	public enum UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX : uint
	{
		UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_0 = 0,
		UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_1 = 1,
		UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_2D = 2,
		UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_3D = 3,
		UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_DGPS = 4,
		UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_RTK = 5,
		UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_ENUM_END = 6,

	}


	/// <summary>
	/// Status flags for ADS-B transponder dynamic output
	/// </summary>
	public enum UAVIONIX_ADSB_RF_HEALTH : uint
	{
		UAVIONIX_ADSB_RF_HEALTH_INITIALIZING = 0,
		UAVIONIX_ADSB_RF_HEALTH_OK = 1,
		UAVIONIX_ADSB_RF_HEALTH_FAIL_TX = 2,
		UAVIONIX_ADSB_RF_HEALTH_FAIL_RX = 16,
		UAVIONIX_ADSB_RF_HEALTH_ENUM_END = 17,

	}


	/// <summary>
	/// Definitions for aircraft size
	/// </summary>
	public enum UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE : uint
	{
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_NO_DATA = 0,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L15M_W23M = 1,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25M_W28P5M = 2,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25_34M = 3,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_33M = 4,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_38M = 5,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_39P5M = 6,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_45M = 7,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_45M = 8,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_52M = 9,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_59P5M = 10,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_67M = 11,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W72P5M = 12,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W80M = 13,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W80M = 14,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W90M = 15,
		UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_ENUM_END = 16,

	}


	/// <summary>
	/// GPS lataral offset encoding
	/// </summary>
	public enum UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT : uint
	{
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA = 0,
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M = 1,
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M = 2,
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M = 3,
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M = 4,
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M = 5,
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M = 6,
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M = 7,
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_ENUM_END = 8,

	}


	/// <summary>
	/// GPS longitudinal offset encoding
	/// </summary>
	public enum UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON : uint
	{
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_NO_DATA = 0,
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_APPLIED_BY_SENSOR = 1,
		UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_ENUM_END = 2,

	}


	/// <summary>
	/// Emergency status encoding
	/// </summary>
	public enum UAVIONIX_ADSB_EMERGENCY_STATUS : uint
	{
		UAVIONIX_ADSB_OUT_NO_EMERGENCY = 0,
		UAVIONIX_ADSB_OUT_GENERAL_EMERGENCY = 1,
		UAVIONIX_ADSB_OUT_LIFEGUARD_EMERGENCY = 2,
		UAVIONIX_ADSB_OUT_MINIMUM_FUEL_EMERGENCY = 3,
		UAVIONIX_ADSB_OUT_NO_COMM_EMERGENCY = 4,
		UAVIONIX_ADSB_OUT_UNLAWFUL_INTERFERANCE_EMERGENCY = 5,
		UAVIONIX_ADSB_OUT_DOWNED_AIRCRAFT_EMERGENCY = 6,
		UAVIONIX_ADSB_OUT_RESERVED = 7,
		UAVIONIX_ADSB_EMERGENCY_STATUS_ENUM_END = 8,

	}


}

    
   
namespace MavLink
{

    public abstract class MavlinkMessage
    {
        public abstract int Serialize(byte[] bytes, ref int offset);
    }

	/// <summary>
	/// Offsets and calibrations values for hardware sensors. This makes it easier to debug the calibration process.
	/// </summary>
	public class Msg_sensor_offsets : MavlinkMessage
    {

		/// <summary>
		/// magnetometer X offset
		/// </summary>
		public Int16 mag_ofs_x;

		/// <summary>
		/// magnetometer Y offset
		/// </summary>
		public Int16 mag_ofs_y;

		/// <summary>
		/// magnetometer Z offset
		/// </summary>
		public Int16 mag_ofs_z;

		/// <summary>
		/// magnetic declination (radians)
		/// </summary>
		public float mag_declination;

		/// <summary>
		/// raw pressure from barometer
		/// </summary>
		public Int32 raw_press;

		/// <summary>
		/// raw temperature from barometer
		/// </summary>
		public Int32 raw_temp;

		/// <summary>
		/// gyro X calibration
		/// </summary>
		public float gyro_cal_x;

		/// <summary>
		/// gyro Y calibration
		/// </summary>
		public float gyro_cal_y;

		/// <summary>
		/// gyro Z calibration
		/// </summary>
		public float gyro_cal_z;

		/// <summary>
		/// accel X calibration
		/// </summary>
		public float accel_cal_x;

		/// <summary>
		/// accel Y calibration
		/// </summary>
		public float accel_cal_y;

		/// <summary>
		/// accel Z calibration
		/// </summary>
		public float accel_cal_z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SENSOR_OFFSETS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Deprecated. Use MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS instead. Set the magnetometer offsets
	/// </summary>
	public class Msg_set_mag_offsets : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// magnetometer X offset
		/// </summary>
		public Int16 mag_ofs_x;

		/// <summary>
		/// magnetometer Y offset
		/// </summary>
		public Int16 mag_ofs_y;

		/// <summary>
		/// magnetometer Z offset
		/// </summary>
		public Int16 mag_ofs_z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_MAG_OFFSETS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// state of APM memory
	/// </summary>
	public class Msg_meminfo : MavlinkMessage
    {

		/// <summary>
		/// heap top
		/// </summary>
		public UInt16 brkval;

		/// <summary>
		/// free memory
		/// </summary>
		public UInt16 freemem;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MEMINFO(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// raw ADC output
	/// </summary>
	public class Msg_ap_adc : MavlinkMessage
    {

		/// <summary>
		/// ADC output 1
		/// </summary>
		public UInt16 adc1;

		/// <summary>
		/// ADC output 2
		/// </summary>
		public UInt16 adc2;

		/// <summary>
		/// ADC output 3
		/// </summary>
		public UInt16 adc3;

		/// <summary>
		/// ADC output 4
		/// </summary>
		public UInt16 adc4;

		/// <summary>
		/// ADC output 5
		/// </summary>
		public UInt16 adc5;

		/// <summary>
		/// ADC output 6
		/// </summary>
		public UInt16 adc6;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_AP_ADC(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Configure on-board Camera Control System.
	/// </summary>
	public class Msg_digicam_configure : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Mode enumeration from 1 to N //P, TV, AV, M, Etc (0 means ignore)
		/// </summary>
		public byte mode;

		/// <summary>
		/// Divisor number //e.g. 1000 means 1/1000 (0 means ignore)
		/// </summary>
		public UInt16 shutter_speed;

		/// <summary>
		/// F stop number x 10 //e.g. 28 means 2.8 (0 means ignore)
		/// </summary>
		public byte aperture;

		/// <summary>
		/// ISO enumeration from 1 to N //e.g. 80, 100, 200, Etc (0 means ignore)
		/// </summary>
		public byte iso;

		/// <summary>
		/// Exposure type enumeration from 1 to N (0 means ignore)
		/// </summary>
		public byte exposure_type;

		/// <summary>
		/// Command Identity (incremental loop: 0 to 255)//A command sent multiple times will be executed or pooled just once
		/// </summary>
		public byte command_id;

		/// <summary>
		/// Main engine cut-off time before camera trigger in seconds/10 (0 means no cut-off)
		/// </summary>
		public byte engine_cut_off;

		/// <summary>
		/// Extra parameters enumeration (0 means ignore)
		/// </summary>
		public byte extra_param;

		/// <summary>
		/// Correspondent value to given extra_param
		/// </summary>
		public float extra_value;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DIGICAM_CONFIGURE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Control on-board Camera Control System to take shots.
	/// </summary>
	public class Msg_digicam_control : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// 0: stop, 1: start or keep it up //Session control e.g. show/hide lens
		/// </summary>
		public byte session;

		/// <summary>
		/// 1 to N //Zoom's absolute position (0 means ignore)
		/// </summary>
		public byte zoom_pos;

		/// <summary>
		/// -100 to 100 //Zooming step value to offset zoom from the current position
		/// </summary>
		public sbyte zoom_step;

		/// <summary>
		/// 0: unlock focus or keep unlocked, 1: lock focus or keep locked, 3: re-lock focus
		/// </summary>
		public byte focus_lock;

		/// <summary>
		/// 0: ignore, 1: shot or start filming
		/// </summary>
		public byte shot;

		/// <summary>
		/// Command Identity (incremental loop: 0 to 255)//A command sent multiple times will be executed or pooled just once
		/// </summary>
		public byte command_id;

		/// <summary>
		/// Extra parameters enumeration (0 means ignore)
		/// </summary>
		public byte extra_param;

		/// <summary>
		/// Correspondent value to given extra_param
		/// </summary>
		public float extra_value;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DIGICAM_CONTROL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Message to configure a camera mount, directional antenna, etc.
	/// </summary>
	public class Msg_mount_configure : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// mount operating mode (see MAV_MOUNT_MODE enum)
		/// </summary>
		public byte mount_mode;

		/// <summary>
		/// (1 = yes, 0 = no)
		/// </summary>
		public byte stab_roll;

		/// <summary>
		/// (1 = yes, 0 = no)
		/// </summary>
		public byte stab_pitch;

		/// <summary>
		/// (1 = yes, 0 = no)
		/// </summary>
		public byte stab_yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MOUNT_CONFIGURE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Message to control a camera mount, directional antenna, etc.
	/// </summary>
	public class Msg_mount_control : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// pitch(deg*100) or lat, depending on mount mode
		/// </summary>
		public Int32 input_a;

		/// <summary>
		/// roll(deg*100) or lon depending on mount mode
		/// </summary>
		public Int32 input_b;

		/// <summary>
		/// yaw(deg*100) or alt (in cm) depending on mount mode
		/// </summary>
		public Int32 input_c;

		/// <summary>
		/// if "1" it will save current trimmed position on EEPROM (just valid for NEUTRAL and LANDING)
		/// </summary>
		public byte save_position;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MOUNT_CONTROL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Message with some status from APM to GCS about camera or antenna mount
	/// </summary>
	public class Msg_mount_status : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// pitch(deg*100)
		/// </summary>
		public Int32 pointing_a;

		/// <summary>
		/// roll(deg*100)
		/// </summary>
		public Int32 pointing_b;

		/// <summary>
		/// yaw(deg*100)
		/// </summary>
		public Int32 pointing_c;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MOUNT_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// A fence point. Used to set a point when from GCS -> MAV. Also used to return a point from MAV -> GCS
	/// </summary>
	public class Msg_fence_point : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// point index (first point is 1, 0 is for return point)
		/// </summary>
		public byte idx;

		/// <summary>
		/// total number of points (for sanity checking)
		/// </summary>
		public byte count;

		/// <summary>
		/// Latitude of point
		/// </summary>
		public float lat;

		/// <summary>
		/// Longitude of point
		/// </summary>
		public float lng;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_FENCE_POINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request a current fence point from MAV
	/// </summary>
	public class Msg_fence_fetch_point : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// point index (first point is 1, 0 is for return point)
		/// </summary>
		public byte idx;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_FENCE_FETCH_POINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status of geo-fencing. Sent in extended status stream when fencing enabled
	/// </summary>
	public class Msg_fence_status : MavlinkMessage
    {

		/// <summary>
		/// 0 if currently inside fence, 1 if outside
		/// </summary>
		public byte breach_status;

		/// <summary>
		/// number of fence breaches
		/// </summary>
		public UInt16 breach_count;

		/// <summary>
		/// last breach type (see FENCE_BREACH_* enum)
		/// </summary>
		public byte breach_type;

		/// <summary>
		/// time of last breach in milliseconds since boot
		/// </summary>
		public UInt32 breach_time;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_FENCE_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status of DCM attitude estimator
	/// </summary>
	public class Msg_ahrs : MavlinkMessage
    {

		/// <summary>
		/// X gyro drift estimate rad/s
		/// </summary>
		public float omegaIx;

		/// <summary>
		/// Y gyro drift estimate rad/s
		/// </summary>
		public float omegaIy;

		/// <summary>
		/// Z gyro drift estimate rad/s
		/// </summary>
		public float omegaIz;

		/// <summary>
		/// average accel_weight
		/// </summary>
		public float accel_weight;

		/// <summary>
		/// average renormalisation value
		/// </summary>
		public float renorm_val;

		/// <summary>
		/// average error_roll_pitch value
		/// </summary>
		public float error_rp;

		/// <summary>
		/// average error_yaw value
		/// </summary>
		public float error_yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_AHRS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status of simulation environment, if used
	/// </summary>
	public class Msg_simstate : MavlinkMessage
    {

		/// <summary>
		/// Roll angle (rad)
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle (rad)
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle (rad)
		/// </summary>
		public float yaw;

		/// <summary>
		/// X acceleration m/s/s
		/// </summary>
		public float xacc;

		/// <summary>
		/// Y acceleration m/s/s
		/// </summary>
		public float yacc;

		/// <summary>
		/// Z acceleration m/s/s
		/// </summary>
		public float zacc;

		/// <summary>
		/// Angular speed around X axis rad/s
		/// </summary>
		public float xgyro;

		/// <summary>
		/// Angular speed around Y axis rad/s
		/// </summary>
		public float ygyro;

		/// <summary>
		/// Angular speed around Z axis rad/s
		/// </summary>
		public float zgyro;

		/// <summary>
		/// Latitude in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude in degrees * 1E7
		/// </summary>
		public Int32 lng;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SIMSTATE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status of key hardware
	/// </summary>
	public class Msg_hwstatus : MavlinkMessage
    {

		/// <summary>
		/// board voltage (mV)
		/// </summary>
		public UInt16 Vcc;

		/// <summary>
		/// I2C error count
		/// </summary>
		public byte I2Cerr;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HWSTATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status generated by radio
	/// </summary>
	public class Msg_radio : MavlinkMessage
    {

		/// <summary>
		/// local signal strength
		/// </summary>
		public byte rssi;

		/// <summary>
		/// remote signal strength
		/// </summary>
		public byte remrssi;

		/// <summary>
		/// how full the tx buffer is as a percentage
		/// </summary>
		public byte txbuf;

		/// <summary>
		/// background noise level
		/// </summary>
		public byte noise;

		/// <summary>
		/// remote background noise level
		/// </summary>
		public byte remnoise;

		/// <summary>
		/// receive errors
		/// </summary>
		public UInt16 rxerrors;

		/// <summary>
		/// count of error corrected packets
		/// </summary>
		public UInt16 @fixed;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RADIO(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status of AP_Limits. Sent in extended status stream when AP_Limits is enabled
	/// </summary>
	public class Msg_limits_status : MavlinkMessage
    {

		/// <summary>
		/// state of AP_Limits, (see enum LimitState, LIMITS_STATE)
		/// </summary>
		public byte limits_state;

		/// <summary>
		/// time of last breach in milliseconds since boot
		/// </summary>
		public UInt32 last_trigger;

		/// <summary>
		/// time of last recovery action in milliseconds since boot
		/// </summary>
		public UInt32 last_action;

		/// <summary>
		/// time of last successful recovery in milliseconds since boot
		/// </summary>
		public UInt32 last_recovery;

		/// <summary>
		/// time of last all-clear in milliseconds since boot
		/// </summary>
		public UInt32 last_clear;

		/// <summary>
		/// number of fence breaches
		/// </summary>
		public UInt16 breach_count;

		/// <summary>
		/// AP_Limit_Module bitfield of enabled modules, (see enum moduleid or LIMIT_MODULE)
		/// </summary>
		public byte mods_enabled;

		/// <summary>
		/// AP_Limit_Module bitfield of required modules, (see enum moduleid or LIMIT_MODULE)
		/// </summary>
		public byte mods_required;

		/// <summary>
		/// AP_Limit_Module bitfield of triggered modules, (see enum moduleid or LIMIT_MODULE)
		/// </summary>
		public byte mods_triggered;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LIMITS_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Wind estimation
	/// </summary>
	public class Msg_wind : MavlinkMessage
    {

		/// <summary>
		/// wind direction that wind is coming from (degrees)
		/// </summary>
		public float direction;

		/// <summary>
		/// wind speed in ground plane (m/s)
		/// </summary>
		public float speed;

		/// <summary>
		/// vertical wind speed (m/s)
		/// </summary>
		public float speed_z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_WIND(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Data packet, size 16
	/// </summary>
	public class Msg_data16 : MavlinkMessage
    {

		/// <summary>
		/// data type
		/// </summary>
		public byte type;

		/// <summary>
		/// data length
		/// </summary>
		public byte len;

		/// <summary>
		/// raw data
		/// </summary>
		public byte[] data; // Array size 16

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DATA16(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Data packet, size 32
	/// </summary>
	public class Msg_data32 : MavlinkMessage
    {

		/// <summary>
		/// data type
		/// </summary>
		public byte type;

		/// <summary>
		/// data length
		/// </summary>
		public byte len;

		/// <summary>
		/// raw data
		/// </summary>
		public byte[] data; // Array size 32

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DATA32(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Data packet, size 64
	/// </summary>
	public class Msg_data64 : MavlinkMessage
    {

		/// <summary>
		/// data type
		/// </summary>
		public byte type;

		/// <summary>
		/// data length
		/// </summary>
		public byte len;

		/// <summary>
		/// raw data
		/// </summary>
		public byte[] data; // Array size 64

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DATA64(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Data packet, size 96
	/// </summary>
	public class Msg_data96 : MavlinkMessage
    {

		/// <summary>
		/// data type
		/// </summary>
		public byte type;

		/// <summary>
		/// data length
		/// </summary>
		public byte len;

		/// <summary>
		/// raw data
		/// </summary>
		public byte[] data; // Array size 96

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DATA96(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Rangefinder reporting
	/// </summary>
	public class Msg_rangefinder : MavlinkMessage
    {

		/// <summary>
		/// distance in meters
		/// </summary>
		public float distance;

		/// <summary>
		/// raw voltage if available, zero otherwise
		/// </summary>
		public float voltage;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RANGEFINDER(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Airspeed auto-calibration
	/// </summary>
	public class Msg_airspeed_autocal : MavlinkMessage
    {

		/// <summary>
		/// GPS velocity north m/s
		/// </summary>
		public float vx;

		/// <summary>
		/// GPS velocity east m/s
		/// </summary>
		public float vy;

		/// <summary>
		/// GPS velocity down m/s
		/// </summary>
		public float vz;

		/// <summary>
		/// Differential pressure pascals
		/// </summary>
		public float diff_pressure;

		/// <summary>
		/// Estimated to true airspeed ratio
		/// </summary>
		public float EAS2TAS;

		/// <summary>
		/// Airspeed ratio
		/// </summary>
		public float ratio;

		/// <summary>
		/// EKF state x
		/// </summary>
		public float state_x;

		/// <summary>
		/// EKF state y
		/// </summary>
		public float state_y;

		/// <summary>
		/// EKF state z
		/// </summary>
		public float state_z;

		/// <summary>
		/// EKF Pax
		/// </summary>
		public float Pax;

		/// <summary>
		/// EKF Pby
		/// </summary>
		public float Pby;

		/// <summary>
		/// EKF Pcz
		/// </summary>
		public float Pcz;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_AIRSPEED_AUTOCAL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// A rally point. Used to set a point when from GCS -> MAV. Also used to return a point from MAV -> GCS
	/// </summary>
	public class Msg_rally_point : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// point index (first point is 0)
		/// </summary>
		public byte idx;

		/// <summary>
		/// total number of points (for sanity checking)
		/// </summary>
		public byte count;

		/// <summary>
		/// Latitude of point in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude of point in degrees * 1E7
		/// </summary>
		public Int32 lng;

		/// <summary>
		/// Transit / loiter altitude in meters relative to home
		/// </summary>
		public Int16 alt;

		/// <summary>
		/// Break altitude in meters relative to home
		/// </summary>
		public Int16 break_alt;

		/// <summary>
		/// Heading to aim for when landing. In centi-degrees.
		/// </summary>
		public UInt16 land_dir;

		/// <summary>
		/// See RALLY_FLAGS enum for definition of the bitmask.
		/// </summary>
		public byte flags;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RALLY_POINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request a current rally point from MAV. MAV should respond with a RALLY_POINT message. MAV should not respond if the request is invalid.
	/// </summary>
	public class Msg_rally_fetch_point : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// point index (first point is 0)
		/// </summary>
		public byte idx;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RALLY_FETCH_POINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status of compassmot calibration
	/// </summary>
	public class Msg_compassmot_status : MavlinkMessage
    {

		/// <summary>
		/// throttle (percent*10)
		/// </summary>
		public UInt16 throttle;

		/// <summary>
		/// current (amps)
		/// </summary>
		public float current;

		/// <summary>
		/// interference (percent)
		/// </summary>
		public UInt16 interference;

		/// <summary>
		/// Motor Compensation X
		/// </summary>
		public float CompensationX;

		/// <summary>
		/// Motor Compensation Y
		/// </summary>
		public float CompensationY;

		/// <summary>
		/// Motor Compensation Z
		/// </summary>
		public float CompensationZ;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_COMPASSMOT_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status of secondary AHRS filter if available
	/// </summary>
	public class Msg_ahrs2 : MavlinkMessage
    {

		/// <summary>
		/// Roll angle (rad)
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle (rad)
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle (rad)
		/// </summary>
		public float yaw;

		/// <summary>
		/// Altitude (MSL)
		/// </summary>
		public float altitude;

		/// <summary>
		/// Latitude in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude in degrees * 1E7
		/// </summary>
		public Int32 lng;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_AHRS2(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Camera Event
	/// </summary>
	public class Msg_camera_status : MavlinkMessage
    {

		/// <summary>
		/// Image timestamp (microseconds since UNIX epoch, according to camera clock)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Camera ID
		/// </summary>
		public byte cam_idx;

		/// <summary>
		/// Image index
		/// </summary>
		public UInt16 img_idx;

		/// <summary>
		/// See CAMERA_STATUS_TYPES enum for definition of the bitmask
		/// </summary>
		public byte event_id;

		/// <summary>
		/// Parameter 1 (meaning depends on event, see CAMERA_STATUS_TYPES enum)
		/// </summary>
		public float p1;

		/// <summary>
		/// Parameter 2 (meaning depends on event, see CAMERA_STATUS_TYPES enum)
		/// </summary>
		public float p2;

		/// <summary>
		/// Parameter 3 (meaning depends on event, see CAMERA_STATUS_TYPES enum)
		/// </summary>
		public float p3;

		/// <summary>
		/// Parameter 4 (meaning depends on event, see CAMERA_STATUS_TYPES enum)
		/// </summary>
		public float p4;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_CAMERA_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Camera Capture Feedback
	/// </summary>
	public class Msg_camera_feedback : MavlinkMessage
    {

		/// <summary>
		/// Image timestamp (microseconds since UNIX epoch), as passed in by CAMERA_STATUS message (or autopilot if no CCB)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Camera ID
		/// </summary>
		public byte cam_idx;

		/// <summary>
		/// Image index
		/// </summary>
		public UInt16 img_idx;

		/// <summary>
		/// Latitude in (deg * 1E7)
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude in (deg * 1E7)
		/// </summary>
		public Int32 lng;

		/// <summary>
		/// Altitude Absolute (meters AMSL)
		/// </summary>
		public float alt_msl;

		/// <summary>
		/// Altitude Relative (meters above HOME location)
		/// </summary>
		public float alt_rel;

		/// <summary>
		/// Camera Roll angle (earth frame, degrees, +-180)
		/// </summary>
		public float roll;

		/// <summary>
		/// Camera Pitch angle (earth frame, degrees, +-180)
		/// </summary>
		public float pitch;

		/// <summary>
		/// Camera Yaw (earth frame, degrees, 0-360, true)
		/// </summary>
		public float yaw;

		/// <summary>
		/// Focal Length (mm)
		/// </summary>
		public float foc_len;

		/// <summary>
		/// See CAMERA_FEEDBACK_FLAGS enum for definition of the bitmask
		/// </summary>
		public byte flags;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_CAMERA_FEEDBACK(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// 2nd Battery status
	/// </summary>
	public class Msg_battery2 : MavlinkMessage
    {

		/// <summary>
		/// voltage in millivolts
		/// </summary>
		public UInt16 voltage;

		/// <summary>
		/// Battery current, in 10*milliamperes (1 = 10 milliampere), -1: autopilot does not measure the current
		/// </summary>
		public Int16 current_battery;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_BATTERY2(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status of third AHRS filter if available. This is for ANU research group (Ali and Sean)
	/// </summary>
	public class Msg_ahrs3 : MavlinkMessage
    {

		/// <summary>
		/// Roll angle (rad)
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle (rad)
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle (rad)
		/// </summary>
		public float yaw;

		/// <summary>
		/// Altitude (MSL)
		/// </summary>
		public float altitude;

		/// <summary>
		/// Latitude in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude in degrees * 1E7
		/// </summary>
		public Int32 lng;

		/// <summary>
		/// test variable1
		/// </summary>
		public float v1;

		/// <summary>
		/// test variable2
		/// </summary>
		public float v2;

		/// <summary>
		/// test variable3
		/// </summary>
		public float v3;

		/// <summary>
		/// test variable4
		/// </summary>
		public float v4;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_AHRS3(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request the autopilot version from the system/component.
	/// </summary>
	public class Msg_autopilot_version_request : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_AUTOPILOT_VERSION_REQUEST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send a block of log data to remote location
	/// </summary>
	public class Msg_remote_log_data_block : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// log data block sequence number
		/// </summary>
		public UInt32 seqno;

		/// <summary>
		/// log data block
		/// </summary>
		public byte[] data; // Array size 200

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_REMOTE_LOG_DATA_BLOCK(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send Status of each log block that autopilot board might have sent
	/// </summary>
	public class Msg_remote_log_block_status : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// log data block sequence number
		/// </summary>
		public UInt32 seqno;

		/// <summary>
		/// log data block status
		/// </summary>
		public byte status;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_REMOTE_LOG_BLOCK_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Control vehicle LEDs
	/// </summary>
	public class Msg_led_control : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Instance (LED instance to control or 255 for all LEDs)
		/// </summary>
		public byte instance;

		/// <summary>
		/// Pattern (see LED_PATTERN_ENUM)
		/// </summary>
		public byte pattern;

		/// <summary>
		/// Custom Byte Length
		/// </summary>
		public byte custom_len;

		/// <summary>
		/// Custom Bytes
		/// </summary>
		public byte[] custom_bytes; // Array size 24

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LED_CONTROL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Reports progress of compass calibration.
	/// </summary>
	public class Msg_mag_cal_progress : MavlinkMessage
    {

		/// <summary>
		/// Compass being calibrated
		/// </summary>
		public byte compass_id;

		/// <summary>
		/// Bitmask of compasses being calibrated
		/// </summary>
		public byte cal_mask;

		/// <summary>
		/// Status (see MAG_CAL_STATUS enum)
		/// </summary>
		public byte cal_status;

		/// <summary>
		/// Attempt number
		/// </summary>
		public byte attempt;

		/// <summary>
		/// Completion percentage
		/// </summary>
		public byte completion_pct;

		/// <summary>
		/// Bitmask of sphere sections (see http://en.wikipedia.org/wiki/Geodesic_grid)
		/// </summary>
		public byte[] completion_mask; // Array size 10

		/// <summary>
		/// Body frame direction vector for display
		/// </summary>
		public float direction_x;

		/// <summary>
		/// Body frame direction vector for display
		/// </summary>
		public float direction_y;

		/// <summary>
		/// Body frame direction vector for display
		/// </summary>
		public float direction_z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MAG_CAL_PROGRESS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Reports results of completed compass calibration. Sent until MAG_CAL_ACK received.
	/// </summary>
	public class Msg_mag_cal_report : MavlinkMessage
    {

		/// <summary>
		/// Compass being calibrated
		/// </summary>
		public byte compass_id;

		/// <summary>
		/// Bitmask of compasses being calibrated
		/// </summary>
		public byte cal_mask;

		/// <summary>
		/// Status (see MAG_CAL_STATUS enum)
		/// </summary>
		public byte cal_status;

		/// <summary>
		/// 0=requires a MAV_CMD_DO_ACCEPT_MAG_CAL, 1=saved to parameters
		/// </summary>
		public byte autosaved;

		/// <summary>
		/// RMS milligauss residuals
		/// </summary>
		public float fitness;

		/// <summary>
		/// X offset
		/// </summary>
		public float ofs_x;

		/// <summary>
		/// Y offset
		/// </summary>
		public float ofs_y;

		/// <summary>
		/// Z offset
		/// </summary>
		public float ofs_z;

		/// <summary>
		/// X diagonal (matrix 11)
		/// </summary>
		public float diag_x;

		/// <summary>
		/// Y diagonal (matrix 22)
		/// </summary>
		public float diag_y;

		/// <summary>
		/// Z diagonal (matrix 33)
		/// </summary>
		public float diag_z;

		/// <summary>
		/// X off-diagonal (matrix 12 and 21)
		/// </summary>
		public float offdiag_x;

		/// <summary>
		/// Y off-diagonal (matrix 13 and 31)
		/// </summary>
		public float offdiag_y;

		/// <summary>
		/// Z off-diagonal (matrix 32 and 23)
		/// </summary>
		public float offdiag_z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MAG_CAL_REPORT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// EKF Status message including flags and variances
	/// </summary>
	public class Msg_ekf_status_report : MavlinkMessage
    {
		public UInt16 flags;

		/// <summary>
		/// Velocity variance
		/// </summary>
		public float velocity_variance;

		/// <summary>
		/// Horizontal Position variance
		/// </summary>
		public float pos_horiz_variance;

		/// <summary>
		/// Vertical Position variance
		/// </summary>
		public float pos_vert_variance;

		/// <summary>
		/// Compass variance
		/// </summary>
		public float compass_variance;

		/// <summary>
		/// Terrain Altitude variance
		/// </summary>
		public float terrain_alt_variance;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_EKF_STATUS_REPORT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// PID tuning information
	/// </summary>
	public class Msg_pid_tuning : MavlinkMessage
    {
		public byte axis;

		/// <summary>
		/// desired rate (degrees/s)
		/// </summary>
		public float desired;

		/// <summary>
		/// achieved rate (degrees/s)
		/// </summary>
		public float achieved;

		/// <summary>
		/// FF component
		/// </summary>
		public float FF;

		/// <summary>
		/// P component
		/// </summary>
		public float P;

		/// <summary>
		/// I component
		/// </summary>
		public float I;

		/// <summary>
		/// D component
		/// </summary>
		public float D;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PID_TUNING(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// 3 axis gimbal mesuraments
	/// </summary>
	public class Msg_gimbal_report : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Time since last update (seconds)
		/// </summary>
		public float delta_time;

		/// <summary>
		/// Delta angle X (radians)
		/// </summary>
		public float delta_angle_x;

		/// <summary>
		/// Delta angle Y (radians)
		/// </summary>
		public float delta_angle_y;

		/// <summary>
		/// Delta angle X (radians)
		/// </summary>
		public float delta_angle_z;

		/// <summary>
		/// Delta velocity X (m/s)
		/// </summary>
		public float delta_velocity_x;

		/// <summary>
		/// Delta velocity Y (m/s)
		/// </summary>
		public float delta_velocity_y;

		/// <summary>
		/// Delta velocity Z (m/s)
		/// </summary>
		public float delta_velocity_z;

		/// <summary>
		/// Joint ROLL (radians)
		/// </summary>
		public float joint_roll;

		/// <summary>
		/// Joint EL (radians)
		/// </summary>
		public float joint_el;

		/// <summary>
		/// Joint AZ (radians)
		/// </summary>
		public float joint_az;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GIMBAL_REPORT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Control message for rate gimbal
	/// </summary>
	public class Msg_gimbal_control : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Demanded angular rate X (rad/s)
		/// </summary>
		public float demanded_rate_x;

		/// <summary>
		/// Demanded angular rate Y (rad/s)
		/// </summary>
		public float demanded_rate_y;

		/// <summary>
		/// Demanded angular rate Z (rad/s)
		/// </summary>
		public float demanded_rate_z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GIMBAL_CONTROL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// 100 Hz gimbal torque command telemetry
	/// </summary>
	public class Msg_gimbal_torque_cmd_report : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Roll Torque Command
		/// </summary>
		public Int16 rl_torque_cmd;

		/// <summary>
		/// Elevation Torque Command
		/// </summary>
		public Int16 el_torque_cmd;

		/// <summary>
		/// Azimuth Torque Command
		/// </summary>
		public Int16 az_torque_cmd;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GIMBAL_TORQUE_CMD_REPORT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Heartbeat from a HeroBus attached GoPro
	/// </summary>
	public class Msg_gopro_heartbeat : MavlinkMessage
    {
		public byte status;

		/// <summary>
		/// Current capture mode
		/// </summary>
		public byte capture_mode;

		/// <summary>
		/// additional status bits
		/// </summary>
		public byte flags;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GOPRO_HEARTBEAT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request a GOPRO_COMMAND response from the GoPro
	/// </summary>
	public class Msg_gopro_get_request : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Command ID
		/// </summary>
		public byte cmd_id;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GOPRO_GET_REQUEST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Response from a GOPRO_COMMAND get request
	/// </summary>
	public class Msg_gopro_get_response : MavlinkMessage
    {

		/// <summary>
		/// Command ID
		/// </summary>
		public byte cmd_id;
		public byte status;
		public byte[] value; // Array size 4

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GOPRO_GET_RESPONSE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request to set a GOPRO_COMMAND with a desired
	/// </summary>
	public class Msg_gopro_set_request : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Command ID
		/// </summary>
		public byte cmd_id;
		public byte[] value; // Array size 4

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GOPRO_SET_REQUEST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Response from a GOPRO_COMMAND set request
	/// </summary>
	public class Msg_gopro_set_response : MavlinkMessage
    {

		/// <summary>
		/// Command ID
		/// </summary>
		public byte cmd_id;
		public byte status;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GOPRO_SET_RESPONSE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// RPM sensor output
	/// </summary>
	public class Msg_rpm : MavlinkMessage
    {

		/// <summary>
		/// RPM Sensor1
		/// </summary>
		public float rpm1;

		/// <summary>
		/// RPM Sensor2
		/// </summary>
		public float rpm2;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RPM(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The heartbeat message shows that a system is present and responding. The type of the MAV and Autopilot hardware allow the receiving system to treat further messages from this system appropriate (e.g. by laying out the user interface based on the autopilot).
	/// </summary>
	public class Msg_heartbeat : MavlinkMessage
    {

		/// <summary>
		/// Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE ENUM)
		/// </summary>
		public byte type;

		/// <summary>
		/// Autopilot type / class. defined in MAV_AUTOPILOT ENUM
		/// </summary>
		public byte autopilot;

		/// <summary>
		/// System mode bitfield, see MAV_MODE_FLAG ENUM in mavlink/include/mavlink_types.h
		/// </summary>
		public byte base_mode;

		/// <summary>
		/// A bitfield for use for autopilot-specific flags.
		/// </summary>
		public UInt32 custom_mode;

		/// <summary>
		/// System status flag, see MAV_STATE ENUM
		/// </summary>
		public byte system_status;

		/// <summary>
		/// MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version
		/// </summary>
		public byte mavlink_version;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HEARTBEAT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows wether the system is currently active or not and if an emergency occured. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occured it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.
	/// </summary>
	public class Msg_sys_status : MavlinkMessage
    {

		/// <summary>
		/// Bitmask showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present. Indices defined by ENUM MAV_SYS_STATUS_SENSOR
		/// </summary>
		public UInt32 onboard_control_sensors_present;

		/// <summary>
		/// Bitmask showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled. Indices defined by ENUM MAV_SYS_STATUS_SENSOR
		/// </summary>
		public UInt32 onboard_control_sensors_enabled;

		/// <summary>
		/// Bitmask showing which onboard controllers and sensors are operational or have an error:  Value of 0: not enabled. Value of 1: enabled. Indices defined by ENUM MAV_SYS_STATUS_SENSOR
		/// </summary>
		public UInt32 onboard_control_sensors_health;

		/// <summary>
		/// Maximum usage in percent of the mainloop time, (0%: 0, 100%: 1000) should be always below 1000
		/// </summary>
		public UInt16 load;

		/// <summary>
		/// Battery voltage, in millivolts (1 = 1 millivolt)
		/// </summary>
		public UInt16 voltage_battery;

		/// <summary>
		/// Battery current, in 10*milliamperes (1 = 10 milliampere), -1: autopilot does not measure the current
		/// </summary>
		public Int16 current_battery;

		/// <summary>
		/// Remaining battery energy: (0%: 0, 100%: 100), -1: autopilot estimate the remaining battery
		/// </summary>
		public sbyte battery_remaining;

		/// <summary>
		/// Communication drops in percent, (0%: 0, 100%: 10'000), (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
		/// </summary>
		public UInt16 drop_rate_comm;

		/// <summary>
		/// Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
		/// </summary>
		public UInt16 errors_comm;

		/// <summary>
		/// Autopilot-specific errors
		/// </summary>
		public UInt16 errors_count1;

		/// <summary>
		/// Autopilot-specific errors
		/// </summary>
		public UInt16 errors_count2;

		/// <summary>
		/// Autopilot-specific errors
		/// </summary>
		public UInt16 errors_count3;

		/// <summary>
		/// Autopilot-specific errors
		/// </summary>
		public UInt16 errors_count4;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SYS_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The system time is the time of the master clock, typically the computer clock of the main onboard computer.
	/// </summary>
	public class Msg_system_time : MavlinkMessage
    {

		/// <summary>
		/// Timestamp of the master clock in microseconds since UNIX epoch.
		/// </summary>
		public UInt64 time_unix_usec;

		/// <summary>
		/// Timestamp of the component clock since boot time in milliseconds.
		/// </summary>
		public UInt32 time_boot_ms;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SYSTEM_TIME(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// A ping message either requesting or responding to a ping. This allows to measure the system latencies, including serial port, radio modem and UDP connections.
	/// </summary>
	public class Msg_ping : MavlinkMessage
    {

		/// <summary>
		/// Unix timestamp in microseconds or since system boot if smaller than MAVLink epoch (1.1.2009)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// PING sequence
		/// </summary>
		public UInt32 seq;

		/// <summary>
		/// 0: request ping from all receiving systems, if greater than 0: message is a ping response and number is the system id of the requesting system
		/// </summary>
		public byte target_system;

		/// <summary>
		/// 0: request ping from all receiving components, if greater than 0: message is a ping response and number is the system id of the requesting system
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PING(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request to control this MAV
	/// </summary>
	public class Msg_change_operator_control : MavlinkMessage
    {

		/// <summary>
		/// System the GCS requests control for
		/// </summary>
		public byte target_system;

		/// <summary>
		/// 0: request control of this MAV, 1: Release control of this MAV
		/// </summary>
		public byte control_request;

		/// <summary>
		/// 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch.
		/// </summary>
		public byte version;

		/// <summary>
		/// Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-"
		/// </summary>
		public byte[] passkey; // Array size 25

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_CHANGE_OPERATOR_CONTROL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Accept / deny control of this MAV
	/// </summary>
	public class Msg_change_operator_control_ack : MavlinkMessage
    {

		/// <summary>
		/// ID of the GCS this message 
		/// </summary>
		public byte gcs_system_id;

		/// <summary>
		/// 0: request control of this MAV, 1: Release control of this MAV
		/// </summary>
		public byte control_request;

		/// <summary>
		/// 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control
		/// </summary>
		public byte ack;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_CHANGE_OPERATOR_CONTROL_ACK(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Emit an encrypted signature / key identifying this system. PLEASE NOTE: This protocol has been kept simple, so transmitting the key requires an encrypted channel for true safety.
	/// </summary>
	public class Msg_auth_key : MavlinkMessage
    {
		public byte[] key; // Array size 32

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_AUTH_KEY(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// THIS INTERFACE IS DEPRECATED. USE COMMAND_LONG with MAV_CMD_DO_SET_MODE INSTEAD. Set the system mode, as defined by enum MAV_MODE. There is no target component id as the mode is by definition for the overall aircraft, not only for one component.
	/// </summary>
	public class Msg_set_mode : MavlinkMessage
    {

		/// <summary>
		/// The system setting the mode
		/// </summary>
		public byte target_system;

		/// <summary>
		/// The new base mode
		/// </summary>
		public byte base_mode;

		/// <summary>
		/// The new autopilot-specific mode. This field can be ignored by an autopilot.
		/// </summary>
		public UInt32 custom_mode;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_MODE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also http://qgroundcontrol.org/parameter_interface for a full documentation of QGroundControl and IMU code.
	/// </summary>
	public class Msg_param_request_read : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
		/// </summary>
		public byte[] param_id; // Array size 16

		/// <summary>
		/// Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
		/// </summary>
		public Int16 param_index;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_REQUEST_READ(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request all parameters of this component. After this request, all parameters are emitted.
	/// </summary>
	public class Msg_param_request_list : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_REQUEST_LIST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout.
	/// </summary>
	public class Msg_param_value : MavlinkMessage
    {

		/// <summary>
		/// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
		/// </summary>
		public byte[] param_id; // Array size 16

		/// <summary>
		/// Onboard parameter value
		/// </summary>
		public float param_value;

		/// <summary>
		/// Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
		/// </summary>
		public byte param_type;

		/// <summary>
		/// Total number of onboard parameters
		/// </summary>
		public UInt16 param_count;

		/// <summary>
		/// Index of this onboard parameter
		/// </summary>
		public UInt16 param_index;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_VALUE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set a parameter value TEMPORARILY to RAM. It will be reset to default on system reboot. Send the ACTION MAV_ACTION_STORAGE_WRITE to PERMANENTLY write the RAM contents to EEPROM. IMPORTANT: The receiving component should acknowledge the new parameter value by sending a param_value message to all communication partners. This will also ensure that multiple GCS all have an up-to-date list of all parameters. If the sending GCS did not receive a PARAM_VALUE message within its timeout time, it should re-send the PARAM_SET message.
	/// </summary>
	public class Msg_param_set : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
		/// </summary>
		public byte[] param_id; // Array size 16

		/// <summary>
		/// Onboard parameter value
		/// </summary>
		public float param_value;

		/// <summary>
		/// Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
		/// </summary>
		public byte param_type;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_SET(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The global position, as returned by the Global Positioning System (GPS). This is
	///                NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate. Coordinate frame is right-handed, Z-axis up (GPS frame).
	/// </summary>
	public class Msg_gps_raw_int : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// See the GPS_FIX_TYPE enum.
		/// </summary>
		public byte fix_type;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude (AMSL, NOT WGS84), in meters * 1000 (positive for up). Note that virtually all GPS modules provide the AMSL altitude in addition to the WGS84 altitude.
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 eph;

		/// <summary>
		/// GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 epv;

		/// <summary>
		/// GPS ground speed (m/s * 100). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 vel;

		/// <summary>
		/// Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 cog;

		/// <summary>
		/// Number of satellites visible. If unknown, set to 255
		/// </summary>
		public byte satellites_visible;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS_RAW_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The positioning status, as reported by GPS. This message is intended to display status information about each satellite visible to the receiver. See message GLOBAL_POSITION for the global position estimate. This message can contain information for up to 20 satellites.
	/// </summary>
	public class Msg_gps_status : MavlinkMessage
    {

		/// <summary>
		/// Number of satellites visible
		/// </summary>
		public byte satellites_visible;

		/// <summary>
		/// Global satellite ID
		/// </summary>
		public byte[] satellite_prn; // Array size 20

		/// <summary>
		/// 0: Satellite not used, 1: used for localization
		/// </summary>
		public byte[] satellite_used; // Array size 20

		/// <summary>
		/// Elevation (0: right on top of receiver, 90: on the horizon) of satellite
		/// </summary>
		public byte[] satellite_elevation; // Array size 20

		/// <summary>
		/// Direction of satellite, 0: 0 deg, 255: 360 deg.
		/// </summary>
		public byte[] satellite_azimuth; // Array size 20

		/// <summary>
		/// Signal to noise ratio of satellite
		/// </summary>
		public byte[] satellite_snr; // Array size 20

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW IMU readings for the usual 9DOF sensor setup. This message should contain the scaled values to the described units
	/// </summary>
	public class Msg_scaled_imu : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// X acceleration (mg)
		/// </summary>
		public Int16 xacc;

		/// <summary>
		/// Y acceleration (mg)
		/// </summary>
		public Int16 yacc;

		/// <summary>
		/// Z acceleration (mg)
		/// </summary>
		public Int16 zacc;

		/// <summary>
		/// Angular speed around X axis (millirad /sec)
		/// </summary>
		public Int16 xgyro;

		/// <summary>
		/// Angular speed around Y axis (millirad /sec)
		/// </summary>
		public Int16 ygyro;

		/// <summary>
		/// Angular speed around Z axis (millirad /sec)
		/// </summary>
		public Int16 zgyro;

		/// <summary>
		/// X Magnetic field (milli tesla)
		/// </summary>
		public Int16 xmag;

		/// <summary>
		/// Y Magnetic field (milli tesla)
		/// </summary>
		public Int16 ymag;

		/// <summary>
		/// Z Magnetic field (milli tesla)
		/// </summary>
		public Int16 zmag;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SCALED_IMU(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW IMU readings for the usual 9DOF sensor setup. This message should always contain the true raw values without any scaling to allow data capture and system debugging.
	/// </summary>
	public class Msg_raw_imu : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// X acceleration (raw)
		/// </summary>
		public Int16 xacc;

		/// <summary>
		/// Y acceleration (raw)
		/// </summary>
		public Int16 yacc;

		/// <summary>
		/// Z acceleration (raw)
		/// </summary>
		public Int16 zacc;

		/// <summary>
		/// Angular speed around X axis (raw)
		/// </summary>
		public Int16 xgyro;

		/// <summary>
		/// Angular speed around Y axis (raw)
		/// </summary>
		public Int16 ygyro;

		/// <summary>
		/// Angular speed around Z axis (raw)
		/// </summary>
		public Int16 zgyro;

		/// <summary>
		/// X Magnetic field (raw)
		/// </summary>
		public Int16 xmag;

		/// <summary>
		/// Y Magnetic field (raw)
		/// </summary>
		public Int16 ymag;

		/// <summary>
		/// Z Magnetic field (raw)
		/// </summary>
		public Int16 zmag;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RAW_IMU(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW pressure readings for the typical setup of one absolute pressure and one differential pressure sensor. The sensor values should be the raw, UNSCALED ADC values.
	/// </summary>
	public class Msg_raw_pressure : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Absolute pressure (raw)
		/// </summary>
		public Int16 press_abs;

		/// <summary>
		/// Differential pressure 1 (raw, 0 if nonexistant)
		/// </summary>
		public Int16 press_diff1;

		/// <summary>
		/// Differential pressure 2 (raw, 0 if nonexistant)
		/// </summary>
		public Int16 press_diff2;

		/// <summary>
		/// Raw Temperature measurement (raw)
		/// </summary>
		public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RAW_PRESSURE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The pressure readings for the typical setup of one absolute and differential pressure sensor. The units are as specified in each field.
	/// </summary>
	public class Msg_scaled_pressure : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Absolute pressure (hectopascal)
		/// </summary>
		public float press_abs;

		/// <summary>
		/// Differential pressure 1 (hectopascal)
		/// </summary>
		public float press_diff;

		/// <summary>
		/// Temperature measurement (0.01 degrees celsius)
		/// </summary>
		public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SCALED_PRESSURE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right).
	/// </summary>
	public class Msg_attitude : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Roll angle (rad, -pi..+pi)
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle (rad, -pi..+pi)
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle (rad, -pi..+pi)
		/// </summary>
		public float yaw;

		/// <summary>
		/// Roll angular speed (rad/s)
		/// </summary>
		public float rollspeed;

		/// <summary>
		/// Pitch angular speed (rad/s)
		/// </summary>
		public float pitchspeed;

		/// <summary>
		/// Yaw angular speed (rad/s)
		/// </summary>
		public float yawspeed;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ATTITUDE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
	/// </summary>
	public class Msg_attitude_quaternion : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Quaternion component 1, w (1 in null-rotation)
		/// </summary>
		public float q1;

		/// <summary>
		/// Quaternion component 2, x (0 in null-rotation)
		/// </summary>
		public float q2;

		/// <summary>
		/// Quaternion component 3, y (0 in null-rotation)
		/// </summary>
		public float q3;

		/// <summary>
		/// Quaternion component 4, z (0 in null-rotation)
		/// </summary>
		public float q4;

		/// <summary>
		/// Roll angular speed (rad/s)
		/// </summary>
		public float rollspeed;

		/// <summary>
		/// Pitch angular speed (rad/s)
		/// </summary>
		public float pitchspeed;

		/// <summary>
		/// Yaw angular speed (rad/s)
		/// </summary>
		public float yawspeed;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ATTITUDE_QUATERNION(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
	/// </summary>
	public class Msg_local_position_ned : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// X Position
		/// </summary>
		public float x;

		/// <summary>
		/// Y Position
		/// </summary>
		public float y;

		/// <summary>
		/// Z Position
		/// </summary>
		public float z;

		/// <summary>
		/// X Speed
		/// </summary>
		public float vx;

		/// <summary>
		/// Y Speed
		/// </summary>
		public float vy;

		/// <summary>
		/// Z Speed
		/// </summary>
		public float vz;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOCAL_POSITION_NED(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It
	///               is designed as scaled integer message since the resolution of float is not sufficient.
	/// </summary>
	public class Msg_global_position_int : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Latitude, expressed as degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude, expressed as degrees * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude in meters, expressed as * 1000 (millimeters), AMSL (not WGS84 - note that virtually all GPS modules provide the AMSL as well)
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// Altitude above ground in meters, expressed as * 1000 (millimeters)
		/// </summary>
		public Int32 relative_alt;

		/// <summary>
		/// Ground X Speed (Latitude, positive north), expressed as m/s * 100
		/// </summary>
		public Int16 vx;

		/// <summary>
		/// Ground Y Speed (Longitude, positive east), expressed as m/s * 100
		/// </summary>
		public Int16 vy;

		/// <summary>
		/// Ground Z Speed (Altitude, positive down), expressed as m/s * 100
		/// </summary>
		public Int16 vz;

		/// <summary>
		/// Vehicle heading (yaw angle) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 hdg;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GLOBAL_POSITION_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The scaled values of the RC channels received. (-100%) -10000, (0%) 0, (100%) 10000. Channels that are inactive should be set to UINT16_MAX.
	/// </summary>
	public class Msg_rc_channels_scaled : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows for more than 8 servos.
		/// </summary>
		public byte port;

		/// <summary>
		/// RC channel 1 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan1_scaled;

		/// <summary>
		/// RC channel 2 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan2_scaled;

		/// <summary>
		/// RC channel 3 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan3_scaled;

		/// <summary>
		/// RC channel 4 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan4_scaled;

		/// <summary>
		/// RC channel 5 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan5_scaled;

		/// <summary>
		/// RC channel 6 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan6_scaled;

		/// <summary>
		/// RC channel 7 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan7_scaled;

		/// <summary>
		/// RC channel 8 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) INT16_MAX.
		/// </summary>
		public Int16 chan8_scaled;

		/// <summary>
		/// Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
		/// </summary>
		public byte rssi;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RC_CHANNELS_SCALED(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
	/// </summary>
	public class Msg_rc_channels_raw : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows for more than 8 servos.
		/// </summary>
		public byte port;

		/// <summary>
		/// RC channel 1 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan1_raw;

		/// <summary>
		/// RC channel 2 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan2_raw;

		/// <summary>
		/// RC channel 3 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan3_raw;

		/// <summary>
		/// RC channel 4 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan4_raw;

		/// <summary>
		/// RC channel 5 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan5_raw;

		/// <summary>
		/// RC channel 6 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan6_raw;

		/// <summary>
		/// RC channel 7 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan7_raw;

		/// <summary>
		/// RC channel 8 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan8_raw;

		/// <summary>
		/// Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
		/// </summary>
		public byte rssi;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RC_CHANNELS_RAW(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW values of the servo outputs (for RC input from the remote, use the RC_CHANNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.
	/// </summary>
	public class Msg_servo_output_raw : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since system boot)
		/// </summary>
		public UInt32 time_usec;

		/// <summary>
		/// Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows to encode more than 8 servos.
		/// </summary>
		public byte port;

		/// <summary>
		/// Servo output 1 value, in microseconds
		/// </summary>
		public UInt16 servo1_raw;

		/// <summary>
		/// Servo output 2 value, in microseconds
		/// </summary>
		public UInt16 servo2_raw;

		/// <summary>
		/// Servo output 3 value, in microseconds
		/// </summary>
		public UInt16 servo3_raw;

		/// <summary>
		/// Servo output 4 value, in microseconds
		/// </summary>
		public UInt16 servo4_raw;

		/// <summary>
		/// Servo output 5 value, in microseconds
		/// </summary>
		public UInt16 servo5_raw;

		/// <summary>
		/// Servo output 6 value, in microseconds
		/// </summary>
		public UInt16 servo6_raw;

		/// <summary>
		/// Servo output 7 value, in microseconds
		/// </summary>
		public UInt16 servo7_raw;

		/// <summary>
		/// Servo output 8 value, in microseconds
		/// </summary>
		public UInt16 servo8_raw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SERVO_OUTPUT_RAW(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request a partial list of mission items from the system/component. http://qgroundcontrol.org/mavlink/waypoint_protocol. If start and end index are the same, just send one waypoint.
	/// </summary>
	public class Msg_mission_request_partial_list : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Start index, 0 by default
		/// </summary>
		public Int16 start_index;

		/// <summary>
		/// End index, -1 by default (-1: send list to end). Else a valid index of the list
		/// </summary>
		public Int16 end_index;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_REQUEST_PARTIAL_LIST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// This message is sent to the MAV to write a partial list. If start index == end index, only one item will be transmitted / updated. If the start index is NOT 0 and above the current list size, this request should be REJECTED!
	/// </summary>
	public class Msg_mission_write_partial_list : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Start index, 0 by default and smaller / equal to the largest index of the current onboard list.
		/// </summary>
		public Int16 start_index;

		/// <summary>
		/// End index, equal or greater than start index.
		/// </summary>
		public Int16 end_index;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_WRITE_PARTIAL_LIST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Message encoding a mission item. This message is emitted to announce
	///                the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). See also http://qgroundcontrol.org/mavlink/waypoint_protocol.
	/// </summary>
	public class Msg_mission_item : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Sequence
		/// </summary>
		public UInt16 seq;

		/// <summary>
		/// The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h
		/// </summary>
		public byte frame;

		/// <summary>
		/// The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs
		/// </summary>
		public UInt16 command;

		/// <summary>
		/// false:0, true:1
		/// </summary>
		public byte current;

		/// <summary>
		/// autocontinue to next wp
		/// </summary>
		public byte autocontinue;

		/// <summary>
		/// PARAM1, see MAV_CMD enum
		/// </summary>
		public float param1;

		/// <summary>
		/// PARAM2, see MAV_CMD enum
		/// </summary>
		public float param2;

		/// <summary>
		/// PARAM3, see MAV_CMD enum
		/// </summary>
		public float param3;

		/// <summary>
		/// PARAM4, see MAV_CMD enum
		/// </summary>
		public float param4;

		/// <summary>
		/// PARAM5 / local: x position, global: latitude
		/// </summary>
		public float x;

		/// <summary>
		/// PARAM6 / y position: global: longitude
		/// </summary>
		public float y;

		/// <summary>
		/// PARAM7 / z position: global: altitude (relative or absolute, depending on frame.
		/// </summary>
		public float z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_ITEM(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM message. http://qgroundcontrol.org/mavlink/waypoint_protocol
	/// </summary>
	public class Msg_mission_request : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Sequence
		/// </summary>
		public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_REQUEST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).
	/// </summary>
	public class Msg_mission_set_current : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Sequence
		/// </summary>
		public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_SET_CURRENT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Message that announces the sequence number of the current active mission item. The MAV will fly towards this mission item.
	/// </summary>
	public class Msg_mission_current : MavlinkMessage
    {

		/// <summary>
		/// Sequence
		/// </summary>
		public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_CURRENT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request the overall list of mission items from the system/component.
	/// </summary>
	public class Msg_mission_request_list : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_REQUEST_LIST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// This message is emitted as response to MISSION_REQUEST_LIST by the MAV and to initiate a write transaction. The GCS can then request the individual mission item based on the knowledge of the total number of MISSIONs.
	/// </summary>
	public class Msg_mission_count : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Number of mission items in the sequence
		/// </summary>
		public UInt16 count;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_COUNT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Delete all mission items at once.
	/// </summary>
	public class Msg_mission_clear_all : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_CLEAR_ALL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// A certain mission item has been reached. The system will either hold this position (or circle on the orbit) or (if the autocontinue on the WP was set) continue to the next MISSION.
	/// </summary>
	public class Msg_mission_item_reached : MavlinkMessage
    {

		/// <summary>
		/// Sequence
		/// </summary>
		public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_ITEM_REACHED(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Ack message during MISSION handling. The type field states if this message is a positive ack (type=0) or if an error happened (type=non-zero).
	/// </summary>
	public class Msg_mission_ack : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// See MAV_MISSION_RESULT enum
		/// </summary>
		public byte type;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_ACK(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// As local waypoints exist, the global MISSION reference allows to transform between the local coordinate frame and the global (GPS) coordinate frame. This can be necessary when e.g. in- and outdoor settings are connected and the MAV should move from in- to outdoor.
	/// </summary>
	public class Msg_set_gps_global_origin : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 latitude;

		/// <summary>
		/// Longitude (WGS84, in degrees * 1E7
		/// </summary>
		public Int32 longitude;

		/// <summary>
		/// Altitude (AMSL), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 altitude;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_GPS_GLOBAL_ORIGIN(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Once the MAV sets a new GPS-Local correspondence, this message announces the origin (0,0,0) position
	/// </summary>
	public class Msg_gps_global_origin : MavlinkMessage
    {

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 latitude;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 longitude;

		/// <summary>
		/// Altitude (AMSL), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 altitude;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS_GLOBAL_ORIGIN(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Bind a RC channel to a parameter. The parameter should change accoding to the RC channel value.
	/// </summary>
	public class Msg_param_map_rc : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
		/// </summary>
		public byte[] param_id; // Array size 16

		/// <summary>
		/// Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index.
		/// </summary>
		public Int16 param_index;

		/// <summary>
		/// Index of parameter RC channel. Not equal to the RC channel id. Typically correpsonds to a potentiometer-knob on the RC.
		/// </summary>
		public byte parameter_rc_channel_index;

		/// <summary>
		/// Initial parameter value
		/// </summary>
		public float param_value0;

		/// <summary>
		/// Scale, maps the RC range [-1, 1] to a parameter value
		/// </summary>
		public float scale;

		/// <summary>
		/// Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation)
		/// </summary>
		public float param_value_min;

		/// <summary>
		/// Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation)
		/// </summary>
		public float param_value_max;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_PARAM_MAP_RC(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM_INT message. http://qgroundcontrol.org/mavlink/waypoint_protocol
	/// </summary>
	public class Msg_mission_request_int : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Sequence
		/// </summary>
		public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_REQUEST_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set a safety zone (volume), which is defined by two corners of a cube. This message can be used to tell the MAV which setpoints/MISSIONs to accept and which to reject. Safety areas are often enforced by national or competition regulations.
	/// </summary>
	public class Msg_safety_set_allowed_area : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
		/// </summary>
		public byte frame;

		/// <summary>
		/// x position 1 / Latitude 1
		/// </summary>
		public float p1x;

		/// <summary>
		/// y position 1 / Longitude 1
		/// </summary>
		public float p1y;

		/// <summary>
		/// z position 1 / Altitude 1
		/// </summary>
		public float p1z;

		/// <summary>
		/// x position 2 / Latitude 2
		/// </summary>
		public float p2x;

		/// <summary>
		/// y position 2 / Longitude 2
		/// </summary>
		public float p2y;

		/// <summary>
		/// z position 2 / Altitude 2
		/// </summary>
		public float p2z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SAFETY_SET_ALLOWED_AREA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Read out the safety zone the MAV currently assumes.
	/// </summary>
	public class Msg_safety_allowed_area : MavlinkMessage
    {

		/// <summary>
		/// Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
		/// </summary>
		public byte frame;

		/// <summary>
		/// x position 1 / Latitude 1
		/// </summary>
		public float p1x;

		/// <summary>
		/// y position 1 / Longitude 1
		/// </summary>
		public float p1y;

		/// <summary>
		/// z position 1 / Altitude 1
		/// </summary>
		public float p1z;

		/// <summary>
		/// x position 2 / Latitude 2
		/// </summary>
		public float p2x;

		/// <summary>
		/// y position 2 / Longitude 2
		/// </summary>
		public float p2y;

		/// <summary>
		/// z position 2 / Altitude 2
		/// </summary>
		public float p2z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SAFETY_ALLOWED_AREA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
	/// </summary>
	public class Msg_attitude_quaternion_cov : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since system boot or since UNIX epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)
		/// </summary>
		public float[] q; // Array size 4

		/// <summary>
		/// Roll angular speed (rad/s)
		/// </summary>
		public float rollspeed;

		/// <summary>
		/// Pitch angular speed (rad/s)
		/// </summary>
		public float pitchspeed;

		/// <summary>
		/// Yaw angular speed (rad/s)
		/// </summary>
		public float yawspeed;

		/// <summary>
		/// Attitude covariance
		/// </summary>
		public float[] covariance; // Array size 9

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ATTITUDE_QUATERNION_COV(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The state of the fixed wing navigation and position controller.
	/// </summary>
	public class Msg_nav_controller_output : MavlinkMessage
    {

		/// <summary>
		/// Current desired roll in degrees
		/// </summary>
		public float nav_roll;

		/// <summary>
		/// Current desired pitch in degrees
		/// </summary>
		public float nav_pitch;

		/// <summary>
		/// Current desired heading in degrees
		/// </summary>
		public Int16 nav_bearing;

		/// <summary>
		/// Bearing to current MISSION/target in degrees
		/// </summary>
		public Int16 target_bearing;

		/// <summary>
		/// Distance to active MISSION in meters
		/// </summary>
		public UInt16 wp_dist;

		/// <summary>
		/// Current altitude error in meters
		/// </summary>
		public float alt_error;

		/// <summary>
		/// Current airspeed error in meters/second
		/// </summary>
		public float aspd_error;

		/// <summary>
		/// Current crosstrack error on x-y plane in meters
		/// </summary>
		public float xtrack_error;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_NAV_CONTROLLER_OUTPUT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It  is designed as scaled integer message since the resolution of float is not sufficient. NOTE: This message is intended for onboard networks / companion computers and higher-bandwidth links and optimized for accuracy and completeness. Please use the GLOBAL_POSITION_INT message for a minimal subset.
	/// </summary>
	public class Msg_global_position_int_cov : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since system boot or since UNIX epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Class id of the estimator this estimate originated from.
		/// </summary>
		public byte estimator_type;

		/// <summary>
		/// Latitude, expressed as degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude, expressed as degrees * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude in meters, expressed as * 1000 (millimeters), above MSL
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// Altitude above ground in meters, expressed as * 1000 (millimeters)
		/// </summary>
		public Int32 relative_alt;

		/// <summary>
		/// Ground X Speed (Latitude), expressed as m/s
		/// </summary>
		public float vx;

		/// <summary>
		/// Ground Y Speed (Longitude), expressed as m/s
		/// </summary>
		public float vy;

		/// <summary>
		/// Ground Z Speed (Altitude), expressed as m/s
		/// </summary>
		public float vz;

		/// <summary>
		/// Covariance matrix (first six entries are the first ROW, next six entries are the second row, etc.)
		/// </summary>
		public float[] covariance; // Array size 36

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GLOBAL_POSITION_INT_COV(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
	/// </summary>
	public class Msg_local_position_ned_cov : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since system boot or since UNIX epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Class id of the estimator this estimate originated from.
		/// </summary>
		public byte estimator_type;

		/// <summary>
		/// X Position
		/// </summary>
		public float x;

		/// <summary>
		/// Y Position
		/// </summary>
		public float y;

		/// <summary>
		/// Z Position
		/// </summary>
		public float z;

		/// <summary>
		/// X Speed (m/s)
		/// </summary>
		public float vx;

		/// <summary>
		/// Y Speed (m/s)
		/// </summary>
		public float vy;

		/// <summary>
		/// Z Speed (m/s)
		/// </summary>
		public float vz;

		/// <summary>
		/// X Acceleration (m/s^2)
		/// </summary>
		public float ax;

		/// <summary>
		/// Y Acceleration (m/s^2)
		/// </summary>
		public float ay;

		/// <summary>
		/// Z Acceleration (m/s^2)
		/// </summary>
		public float az;

		/// <summary>
		/// Covariance matrix upper right triangular (first nine entries are the first ROW, next eight entries are the second row, etc.)
		/// </summary>
		public float[] covariance; // Array size 45

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOCAL_POSITION_NED_COV(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The PPM values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
	/// </summary>
	public class Msg_rc_channels : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available.
		/// </summary>
		public byte chancount;

		/// <summary>
		/// RC channel 1 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan1_raw;

		/// <summary>
		/// RC channel 2 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan2_raw;

		/// <summary>
		/// RC channel 3 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan3_raw;

		/// <summary>
		/// RC channel 4 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan4_raw;

		/// <summary>
		/// RC channel 5 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan5_raw;

		/// <summary>
		/// RC channel 6 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan6_raw;

		/// <summary>
		/// RC channel 7 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan7_raw;

		/// <summary>
		/// RC channel 8 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan8_raw;

		/// <summary>
		/// RC channel 9 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan9_raw;

		/// <summary>
		/// RC channel 10 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan10_raw;

		/// <summary>
		/// RC channel 11 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan11_raw;

		/// <summary>
		/// RC channel 12 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan12_raw;

		/// <summary>
		/// RC channel 13 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan13_raw;

		/// <summary>
		/// RC channel 14 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan14_raw;

		/// <summary>
		/// RC channel 15 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan15_raw;

		/// <summary>
		/// RC channel 16 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan16_raw;

		/// <summary>
		/// RC channel 17 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan17_raw;

		/// <summary>
		/// RC channel 18 value, in microseconds. A value of UINT16_MAX implies the channel is unused.
		/// </summary>
		public UInt16 chan18_raw;

		/// <summary>
		/// Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
		/// </summary>
		public byte rssi;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RC_CHANNELS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// THIS INTERFACE IS DEPRECATED. USE SET_MESSAGE_INTERVAL INSTEAD.
	/// </summary>
	public class Msg_request_data_stream : MavlinkMessage
    {

		/// <summary>
		/// The target requested to send the message stream.
		/// </summary>
		public byte target_system;

		/// <summary>
		/// The target requested to send the message stream.
		/// </summary>
		public byte target_component;

		/// <summary>
		/// The ID of the requested data stream
		/// </summary>
		public byte req_stream_id;

		/// <summary>
		/// The requested message rate
		/// </summary>
		public UInt16 req_message_rate;

		/// <summary>
		/// 1 to start sending, 0 to stop sending.
		/// </summary>
		public byte start_stop;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_REQUEST_DATA_STREAM(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// THIS INTERFACE IS DEPRECATED. USE MESSAGE_INTERVAL INSTEAD.
	/// </summary>
	public class Msg_data_stream : MavlinkMessage
    {

		/// <summary>
		/// The ID of the requested data stream
		/// </summary>
		public byte stream_id;

		/// <summary>
		/// The message rate
		/// </summary>
		public UInt16 message_rate;

		/// <summary>
		/// 1 stream is enabled, 0 stream is stopped.
		/// </summary>
		public byte on_off;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DATA_STREAM(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// This message provides an API for manually controlling the vehicle using standard joystick axes nomenclature, along with a joystick-like input device. Unused axes can be disabled an buttons are also transmit as boolean values of their 
	/// </summary>
	public class Msg_manual_control : MavlinkMessage
    {

		/// <summary>
		/// The system to be controlled.
		/// </summary>
		public byte target;

		/// <summary>
		/// X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle.
		/// </summary>
		public Int16 x;

		/// <summary>
		/// Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle.
		/// </summary>
		public Int16 y;

		/// <summary>
		/// Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust.
		/// </summary>
		public Int16 z;

		/// <summary>
		/// R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle.
		/// </summary>
		public Int16 r;

		/// <summary>
		/// A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1.
		/// </summary>
		public UInt16 buttons;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MANUAL_CONTROL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW values of the RC channels sent to the MAV to override info received from the RC radio. A value of UINT16_MAX means no change to that channel. A value of 0 means control of that channel should be released back to the RC radio. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
	/// </summary>
	public class Msg_rc_channels_override : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// RC channel 1 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan1_raw;

		/// <summary>
		/// RC channel 2 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan2_raw;

		/// <summary>
		/// RC channel 3 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan3_raw;

		/// <summary>
		/// RC channel 4 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan4_raw;

		/// <summary>
		/// RC channel 5 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan5_raw;

		/// <summary>
		/// RC channel 6 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan6_raw;

		/// <summary>
		/// RC channel 7 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan7_raw;

		/// <summary>
		/// RC channel 8 value, in microseconds. A value of UINT16_MAX means to ignore this field.
		/// </summary>
		public UInt16 chan8_raw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RC_CHANNELS_OVERRIDE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Message encoding a mission item. This message is emitted to announce
	///                the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). See alsohttp://qgroundcontrol.org/mavlink/waypoint_protocol.
	/// </summary>
	public class Msg_mission_item_int : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4).
		/// </summary>
		public UInt16 seq;

		/// <summary>
		/// The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h
		/// </summary>
		public byte frame;

		/// <summary>
		/// The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs
		/// </summary>
		public UInt16 command;

		/// <summary>
		/// false:0, true:1
		/// </summary>
		public byte current;

		/// <summary>
		/// autocontinue to next wp
		/// </summary>
		public byte autocontinue;

		/// <summary>
		/// PARAM1, see MAV_CMD enum
		/// </summary>
		public float param1;

		/// <summary>
		/// PARAM2, see MAV_CMD enum
		/// </summary>
		public float param2;

		/// <summary>
		/// PARAM3, see MAV_CMD enum
		/// </summary>
		public float param3;

		/// <summary>
		/// PARAM4, see MAV_CMD enum
		/// </summary>
		public float param4;

		/// <summary>
		/// PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
		/// </summary>
		public Int32 x;

		/// <summary>
		/// PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7
		/// </summary>
		public Int32 y;

		/// <summary>
		/// PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame.
		/// </summary>
		public float z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MISSION_ITEM_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Metrics typically displayed on a HUD for fixed wing aircraft
	/// </summary>
	public class Msg_vfr_hud : MavlinkMessage
    {

		/// <summary>
		/// Current airspeed in m/s
		/// </summary>
		public float airspeed;

		/// <summary>
		/// Current ground speed in m/s
		/// </summary>
		public float groundspeed;

		/// <summary>
		/// Current heading in degrees, in compass units (0..360, 0=north)
		/// </summary>
		public Int16 heading;

		/// <summary>
		/// Current throttle setting in integer percent, 0 to 100
		/// </summary>
		public UInt16 throttle;

		/// <summary>
		/// Current altitude (MSL), in meters
		/// </summary>
		public float alt;

		/// <summary>
		/// Current climb rate in meters/second
		/// </summary>
		public float climb;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_VFR_HUD(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Message encoding a command with parameters as scaled integers. Scaling depends on the actual command value.
	/// </summary>
	public class Msg_command_int : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// The coordinate system of the COMMAND. see MAV_FRAME in mavlink_types.h
		/// </summary>
		public byte frame;

		/// <summary>
		/// The scheduled action for the mission item. see MAV_CMD in common.xml MAVLink specs
		/// </summary>
		public UInt16 command;

		/// <summary>
		/// false:0, true:1
		/// </summary>
		public byte current;

		/// <summary>
		/// autocontinue to next wp
		/// </summary>
		public byte autocontinue;

		/// <summary>
		/// PARAM1, see MAV_CMD enum
		/// </summary>
		public float param1;

		/// <summary>
		/// PARAM2, see MAV_CMD enum
		/// </summary>
		public float param2;

		/// <summary>
		/// PARAM3, see MAV_CMD enum
		/// </summary>
		public float param3;

		/// <summary>
		/// PARAM4, see MAV_CMD enum
		/// </summary>
		public float param4;

		/// <summary>
		/// PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
		/// </summary>
		public Int32 x;

		/// <summary>
		/// PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7
		/// </summary>
		public Int32 y;

		/// <summary>
		/// PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame.
		/// </summary>
		public float z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_COMMAND_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send a command with up to seven parameters to the MAV
	/// </summary>
	public class Msg_command_long : MavlinkMessage
    {

		/// <summary>
		/// System which should execute the command
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component which should execute the command, 0 for all components
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Command ID, as defined by MAV_CMD enum.
		/// </summary>
		public UInt16 command;

		/// <summary>
		/// 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
		/// </summary>
		public byte confirmation;

		/// <summary>
		/// Parameter 1, as defined by MAV_CMD enum.
		/// </summary>
		public float param1;

		/// <summary>
		/// Parameter 2, as defined by MAV_CMD enum.
		/// </summary>
		public float param2;

		/// <summary>
		/// Parameter 3, as defined by MAV_CMD enum.
		/// </summary>
		public float param3;

		/// <summary>
		/// Parameter 4, as defined by MAV_CMD enum.
		/// </summary>
		public float param4;

		/// <summary>
		/// Parameter 5, as defined by MAV_CMD enum.
		/// </summary>
		public float param5;

		/// <summary>
		/// Parameter 6, as defined by MAV_CMD enum.
		/// </summary>
		public float param6;

		/// <summary>
		/// Parameter 7, as defined by MAV_CMD enum.
		/// </summary>
		public float param7;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_COMMAND_LONG(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Report status of a command. Includes feedback wether the command was executed.
	/// </summary>
	public class Msg_command_ack : MavlinkMessage
    {

		/// <summary>
		/// Command ID, as defined by MAV_CMD enum.
		/// </summary>
		public UInt16 command;

		/// <summary>
		/// See MAV_RESULT enum
		/// </summary>
		public byte result;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_COMMAND_ACK(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Setpoint in roll, pitch, yaw and thrust from the operator
	/// </summary>
	public class Msg_manual_setpoint : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Desired roll rate in radians per second
		/// </summary>
		public float roll;

		/// <summary>
		/// Desired pitch rate in radians per second
		/// </summary>
		public float pitch;

		/// <summary>
		/// Desired yaw rate in radians per second
		/// </summary>
		public float yaw;

		/// <summary>
		/// Collective thrust, normalized to 0 .. 1
		/// </summary>
		public float thrust;

		/// <summary>
		/// Flight mode switch position, 0.. 255
		/// </summary>
		public byte mode_switch;

		/// <summary>
		/// Override mode switch position, 0.. 255
		/// </summary>
		public byte manual_override_switch;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MANUAL_SETPOINT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Sets a desired vehicle attitude. Used by an external controller to command the vehicle (manual controller or other system).
	/// </summary>
	public class Msg_set_attitude_target : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 6: reserved, bit 7: throttle, bit 8: attitude
		/// </summary>
		public byte type_mask;

		/// <summary>
		/// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
		/// </summary>
		public float[] q; // Array size 4

		/// <summary>
		/// Body roll rate in radians per second
		/// </summary>
		public float body_roll_rate;

		/// <summary>
		/// Body roll rate in radians per second
		/// </summary>
		public float body_pitch_rate;

		/// <summary>
		/// Body roll rate in radians per second
		/// </summary>
		public float body_yaw_rate;

		/// <summary>
		/// Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
		/// </summary>
		public float thrust;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_ATTITUDE_TARGET(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Reports the current commanded attitude of the vehicle as specified by the autopilot. This should match the commands sent in a SET_ATTITUDE_TARGET message if the vehicle is being controlled this way.
	/// </summary>
	public class Msg_attitude_target : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude
		/// </summary>
		public byte type_mask;

		/// <summary>
		/// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
		/// </summary>
		public float[] q; // Array size 4

		/// <summary>
		/// Body roll rate in radians per second
		/// </summary>
		public float body_roll_rate;

		/// <summary>
		/// Body roll rate in radians per second
		/// </summary>
		public float body_pitch_rate;

		/// <summary>
		/// Body roll rate in radians per second
		/// </summary>
		public float body_yaw_rate;

		/// <summary>
		/// Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
		/// </summary>
		public float thrust;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ATTITUDE_TARGET(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Sets a desired vehicle position in a local north-east-down coordinate frame. Used by an external controller to command the vehicle (manual controller or other system).
	/// </summary>
	public class Msg_set_position_target_local_ned : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9
		/// </summary>
		public byte coordinate_frame;

		/// <summary>
		/// Bitmask to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 10 is set the floats afx afy afz should be interpreted as force instead of acceleration. Mapping: bit 1: x, bit 2: y, bit 3: z, bit 4: vx, bit 5: vy, bit 6: vz, bit 7: ax, bit 8: ay, bit 9: az, bit 10: is force setpoint, bit 11: yaw, bit 12: yaw rate
		/// </summary>
		public UInt16 type_mask;

		/// <summary>
		/// X Position in NED frame in meters
		/// </summary>
		public float x;

		/// <summary>
		/// Y Position in NED frame in meters
		/// </summary>
		public float y;

		/// <summary>
		/// Z Position in NED frame in meters (note, altitude is negative in NED)
		/// </summary>
		public float z;

		/// <summary>
		/// X velocity in NED frame in meter / s
		/// </summary>
		public float vx;

		/// <summary>
		/// Y velocity in NED frame in meter / s
		/// </summary>
		public float vy;

		/// <summary>
		/// Z velocity in NED frame in meter / s
		/// </summary>
		public float vz;

		/// <summary>
		/// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afx;

		/// <summary>
		/// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afy;

		/// <summary>
		/// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afz;

		/// <summary>
		/// yaw setpoint in rad
		/// </summary>
		public float yaw;

		/// <summary>
		/// yaw rate setpoint in rad/s
		/// </summary>
		public float yaw_rate;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_POSITION_TARGET_LOCAL_NED(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_LOCAL_NED if the vehicle is being controlled this way.
	/// </summary>
	public class Msg_position_target_local_ned : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9
		/// </summary>
		public byte coordinate_frame;

		/// <summary>
		/// Bitmask to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 10 is set the floats afx afy afz should be interpreted as force instead of acceleration. Mapping: bit 1: x, bit 2: y, bit 3: z, bit 4: vx, bit 5: vy, bit 6: vz, bit 7: ax, bit 8: ay, bit 9: az, bit 10: is force setpoint, bit 11: yaw, bit 12: yaw rate
		/// </summary>
		public UInt16 type_mask;

		/// <summary>
		/// X Position in NED frame in meters
		/// </summary>
		public float x;

		/// <summary>
		/// Y Position in NED frame in meters
		/// </summary>
		public float y;

		/// <summary>
		/// Z Position in NED frame in meters (note, altitude is negative in NED)
		/// </summary>
		public float z;

		/// <summary>
		/// X velocity in NED frame in meter / s
		/// </summary>
		public float vx;

		/// <summary>
		/// Y velocity in NED frame in meter / s
		/// </summary>
		public float vy;

		/// <summary>
		/// Z velocity in NED frame in meter / s
		/// </summary>
		public float vz;

		/// <summary>
		/// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afx;

		/// <summary>
		/// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afy;

		/// <summary>
		/// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afz;

		/// <summary>
		/// yaw setpoint in rad
		/// </summary>
		public float yaw;

		/// <summary>
		/// yaw rate setpoint in rad/s
		/// </summary>
		public float yaw_rate;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_POSITION_TARGET_LOCAL_NED(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Sets a desired vehicle position, velocity, and/or acceleration in a global coordinate system (WGS84). Used by an external controller to command the vehicle (manual controller or other system).
	/// </summary>
	public class Msg_set_position_target_global_int : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot. The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
		/// </summary>
		public byte coordinate_frame;

		/// <summary>
		/// Bitmask to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 10 is set the floats afx afy afz should be interpreted as force instead of acceleration. Mapping: bit 1: x, bit 2: y, bit 3: z, bit 4: vx, bit 5: vy, bit 6: vz, bit 7: ax, bit 8: ay, bit 9: az, bit 10: is force setpoint, bit 11: yaw, bit 12: yaw rate
		/// </summary>
		public UInt16 type_mask;

		/// <summary>
		/// X Position in WGS84 frame in 1e7 * meters
		/// </summary>
		public Int32 lat_int;

		/// <summary>
		/// Y Position in WGS84 frame in 1e7 * meters
		/// </summary>
		public Int32 lon_int;

		/// <summary>
		/// Altitude in meters in AMSL altitude, not WGS84 if absolute or relative, above terrain if GLOBAL_TERRAIN_ALT_INT
		/// </summary>
		public float alt;

		/// <summary>
		/// X velocity in NED frame in meter / s
		/// </summary>
		public float vx;

		/// <summary>
		/// Y velocity in NED frame in meter / s
		/// </summary>
		public float vy;

		/// <summary>
		/// Z velocity in NED frame in meter / s
		/// </summary>
		public float vz;

		/// <summary>
		/// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afx;

		/// <summary>
		/// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afy;

		/// <summary>
		/// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afz;

		/// <summary>
		/// yaw setpoint in rad
		/// </summary>
		public float yaw;

		/// <summary>
		/// yaw rate setpoint in rad/s
		/// </summary>
		public float yaw_rate;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_POSITION_TARGET_GLOBAL_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being controlled this way.
	/// </summary>
	public class Msg_position_target_global_int : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot. The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
		/// </summary>
		public byte coordinate_frame;

		/// <summary>
		/// Bitmask to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 10 is set the floats afx afy afz should be interpreted as force instead of acceleration. Mapping: bit 1: x, bit 2: y, bit 3: z, bit 4: vx, bit 5: vy, bit 6: vz, bit 7: ax, bit 8: ay, bit 9: az, bit 10: is force setpoint, bit 11: yaw, bit 12: yaw rate
		/// </summary>
		public UInt16 type_mask;

		/// <summary>
		/// X Position in WGS84 frame in 1e7 * meters
		/// </summary>
		public Int32 lat_int;

		/// <summary>
		/// Y Position in WGS84 frame in 1e7 * meters
		/// </summary>
		public Int32 lon_int;

		/// <summary>
		/// Altitude in meters in AMSL altitude, not WGS84 if absolute or relative, above terrain if GLOBAL_TERRAIN_ALT_INT
		/// </summary>
		public float alt;

		/// <summary>
		/// X velocity in NED frame in meter / s
		/// </summary>
		public float vx;

		/// <summary>
		/// Y velocity in NED frame in meter / s
		/// </summary>
		public float vy;

		/// <summary>
		/// Z velocity in NED frame in meter / s
		/// </summary>
		public float vz;

		/// <summary>
		/// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afx;

		/// <summary>
		/// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afy;

		/// <summary>
		/// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
		/// </summary>
		public float afz;

		/// <summary>
		/// yaw setpoint in rad
		/// </summary>
		public float yaw;

		/// <summary>
		/// yaw rate setpoint in rad/s
		/// </summary>
		public float yaw_rate;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_POSITION_TARGET_GLOBAL_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages of MAV X and the global coordinate frame in NED coordinates. Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
	/// </summary>
	public class Msg_local_position_ned_system_global_offset : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// X Position
		/// </summary>
		public float x;

		/// <summary>
		/// Y Position
		/// </summary>
		public float y;

		/// <summary>
		/// Z Position
		/// </summary>
		public float z;
		public float roll;
		public float pitch;
		public float yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// DEPRECATED PACKET! Suffers from missing airspeed fields and singularities due to Euler angles. Please use HIL_STATE_QUATERNION instead. Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.
	/// </summary>
	public class Msg_hil_state : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Roll angle (rad)
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle (rad)
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle (rad)
		/// </summary>
		public float yaw;

		/// <summary>
		/// Body frame roll / phi angular speed (rad/s)
		/// </summary>
		public float rollspeed;

		/// <summary>
		/// Body frame pitch / theta angular speed (rad/s)
		/// </summary>
		public float pitchspeed;

		/// <summary>
		/// Body frame yaw / psi angular speed (rad/s)
		/// </summary>
		public float yawspeed;

		/// <summary>
		/// Latitude, expressed as * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude, expressed as * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude in meters, expressed as * 1000 (millimeters)
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// Ground X Speed (Latitude), expressed as m/s * 100
		/// </summary>
		public Int16 vx;

		/// <summary>
		/// Ground Y Speed (Longitude), expressed as m/s * 100
		/// </summary>
		public Int16 vy;

		/// <summary>
		/// Ground Z Speed (Altitude), expressed as m/s * 100
		/// </summary>
		public Int16 vz;

		/// <summary>
		/// X acceleration (mg)
		/// </summary>
		public Int16 xacc;

		/// <summary>
		/// Y acceleration (mg)
		/// </summary>
		public Int16 yacc;

		/// <summary>
		/// Z acceleration (mg)
		/// </summary>
		public Int16 zacc;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_STATE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Sent from autopilot to simulation. Hardware in the loop control outputs
	/// </summary>
	public class Msg_hil_controls : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Control output -1 .. 1
		/// </summary>
		public float roll_ailerons;

		/// <summary>
		/// Control output -1 .. 1
		/// </summary>
		public float pitch_elevator;

		/// <summary>
		/// Control output -1 .. 1
		/// </summary>
		public float yaw_rudder;

		/// <summary>
		/// Throttle 0 .. 1
		/// </summary>
		public float throttle;

		/// <summary>
		/// Aux 1, -1 .. 1
		/// </summary>
		public float aux1;

		/// <summary>
		/// Aux 2, -1 .. 1
		/// </summary>
		public float aux2;

		/// <summary>
		/// Aux 3, -1 .. 1
		/// </summary>
		public float aux3;

		/// <summary>
		/// Aux 4, -1 .. 1
		/// </summary>
		public float aux4;

		/// <summary>
		/// System mode (MAV_MODE)
		/// </summary>
		public byte mode;

		/// <summary>
		/// Navigation mode (MAV_NAV_MODE)
		/// </summary>
		public byte nav_mode;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_CONTROLS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Sent from simulation to autopilot. The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
	/// </summary>
	public class Msg_hil_rc_inputs_raw : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// RC channel 1 value, in microseconds
		/// </summary>
		public UInt16 chan1_raw;

		/// <summary>
		/// RC channel 2 value, in microseconds
		/// </summary>
		public UInt16 chan2_raw;

		/// <summary>
		/// RC channel 3 value, in microseconds
		/// </summary>
		public UInt16 chan3_raw;

		/// <summary>
		/// RC channel 4 value, in microseconds
		/// </summary>
		public UInt16 chan4_raw;

		/// <summary>
		/// RC channel 5 value, in microseconds
		/// </summary>
		public UInt16 chan5_raw;

		/// <summary>
		/// RC channel 6 value, in microseconds
		/// </summary>
		public UInt16 chan6_raw;

		/// <summary>
		/// RC channel 7 value, in microseconds
		/// </summary>
		public UInt16 chan7_raw;

		/// <summary>
		/// RC channel 8 value, in microseconds
		/// </summary>
		public UInt16 chan8_raw;

		/// <summary>
		/// RC channel 9 value, in microseconds
		/// </summary>
		public UInt16 chan9_raw;

		/// <summary>
		/// RC channel 10 value, in microseconds
		/// </summary>
		public UInt16 chan10_raw;

		/// <summary>
		/// RC channel 11 value, in microseconds
		/// </summary>
		public UInt16 chan11_raw;

		/// <summary>
		/// RC channel 12 value, in microseconds
		/// </summary>
		public UInt16 chan12_raw;

		/// <summary>
		/// Receive signal strength indicator, 0: 0%, 255: 100%
		/// </summary>
		public byte rssi;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_RC_INPUTS_RAW(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Sent from autopilot to simulation. Hardware in the loop control outputs (replacement for HIL_CONTROLS)
	/// </summary>
	public class Msg_hil_actuator_controls : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Control outputs -1 .. 1. Channel assignment depends on the simulated hardware.
		/// </summary>
		public float[] controls; // Array size 16

		/// <summary>
		/// System mode (MAV_MODE), includes arming state.
		/// </summary>
		public byte mode;

		/// <summary>
		/// Flags as bitfield, reserved for future use.
		/// </summary>
		public UInt64 flags;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_ACTUATOR_CONTROLS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Optical flow from a flow sensor (e.g. optical mouse sensor)
	/// </summary>
	public class Msg_optical_flow : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (UNIX)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Sensor ID
		/// </summary>
		public byte sensor_id;

		/// <summary>
		/// Flow in pixels * 10 in x-sensor direction (dezi-pixels)
		/// </summary>
		public Int16 flow_x;

		/// <summary>
		/// Flow in pixels * 10 in y-sensor direction (dezi-pixels)
		/// </summary>
		public Int16 flow_y;

		/// <summary>
		/// Flow in meters in x-sensor direction, angular-speed compensated
		/// </summary>
		public float flow_comp_m_x;

		/// <summary>
		/// Flow in meters in y-sensor direction, angular-speed compensated
		/// </summary>
		public float flow_comp_m_y;

		/// <summary>
		/// Optical flow quality / confidence. 0: bad, 255: maximum quality
		/// </summary>
		public byte quality;

		/// <summary>
		/// Ground distance in meters. Positive value: distance known. Negative value: Unknown distance
		/// </summary>
		public float ground_distance;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_OPTICAL_FLOW(this, bytes, ref offset);
            }        
	}

	public class Msg_global_vision_position_estimate : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 usec;

		/// <summary>
		/// Global X position
		/// </summary>
		public float x;

		/// <summary>
		/// Global Y position
		/// </summary>
		public float y;

		/// <summary>
		/// Global Z position
		/// </summary>
		public float z;

		/// <summary>
		/// Roll angle in rad
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle in rad
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle in rad
		/// </summary>
		public float yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GLOBAL_VISION_POSITION_ESTIMATE(this, bytes, ref offset);
            }        
	}

	public class Msg_vision_position_estimate : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 usec;

		/// <summary>
		/// Global X position
		/// </summary>
		public float x;

		/// <summary>
		/// Global Y position
		/// </summary>
		public float y;

		/// <summary>
		/// Global Z position
		/// </summary>
		public float z;

		/// <summary>
		/// Roll angle in rad
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle in rad
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle in rad
		/// </summary>
		public float yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_VISION_POSITION_ESTIMATE(this, bytes, ref offset);
            }        
	}

	public class Msg_vision_speed_estimate : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 usec;

		/// <summary>
		/// Global X speed
		/// </summary>
		public float x;

		/// <summary>
		/// Global Y speed
		/// </summary>
		public float y;

		/// <summary>
		/// Global Z speed
		/// </summary>
		public float z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_VISION_SPEED_ESTIMATE(this, bytes, ref offset);
            }        
	}

	public class Msg_vicon_position_estimate : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 usec;

		/// <summary>
		/// Global X position
		/// </summary>
		public float x;

		/// <summary>
		/// Global Y position
		/// </summary>
		public float y;

		/// <summary>
		/// Global Z position
		/// </summary>
		public float z;

		/// <summary>
		/// Roll angle in rad
		/// </summary>
		public float roll;

		/// <summary>
		/// Pitch angle in rad
		/// </summary>
		public float pitch;

		/// <summary>
		/// Yaw angle in rad
		/// </summary>
		public float yaw;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_VICON_POSITION_ESTIMATE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The IMU readings in SI units in NED body frame
	/// </summary>
	public class Msg_highres_imu : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// X acceleration (m/s^2)
		/// </summary>
		public float xacc;

		/// <summary>
		/// Y acceleration (m/s^2)
		/// </summary>
		public float yacc;

		/// <summary>
		/// Z acceleration (m/s^2)
		/// </summary>
		public float zacc;

		/// <summary>
		/// Angular speed around X axis (rad / sec)
		/// </summary>
		public float xgyro;

		/// <summary>
		/// Angular speed around Y axis (rad / sec)
		/// </summary>
		public float ygyro;

		/// <summary>
		/// Angular speed around Z axis (rad / sec)
		/// </summary>
		public float zgyro;

		/// <summary>
		/// X Magnetic field (Gauss)
		/// </summary>
		public float xmag;

		/// <summary>
		/// Y Magnetic field (Gauss)
		/// </summary>
		public float ymag;

		/// <summary>
		/// Z Magnetic field (Gauss)
		/// </summary>
		public float zmag;

		/// <summary>
		/// Absolute pressure in millibar
		/// </summary>
		public float abs_pressure;

		/// <summary>
		/// Differential pressure in millibar
		/// </summary>
		public float diff_pressure;

		/// <summary>
		/// Altitude calculated from pressure
		/// </summary>
		public float pressure_alt;

		/// <summary>
		/// Temperature in degrees celsius
		/// </summary>
		public float temperature;

		/// <summary>
		/// Bitmask for fields that have updated since last message, bit 0 = xacc, bit 12: temperature
		/// </summary>
		public UInt16 fields_updated;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIGHRES_IMU(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse sensor)
	/// </summary>
	public class Msg_optical_flow_rad : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Sensor ID
		/// </summary>
		public byte sensor_id;

		/// <summary>
		/// Integration time in microseconds. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.
		/// </summary>
		public UInt32 integration_time_us;

		/// <summary>
		/// Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)
		/// </summary>
		public float integrated_x;

		/// <summary>
		/// Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)
		/// </summary>
		public float integrated_y;

		/// <summary>
		/// RH rotation around X axis (rad)
		/// </summary>
		public float integrated_xgyro;

		/// <summary>
		/// RH rotation around Y axis (rad)
		/// </summary>
		public float integrated_ygyro;

		/// <summary>
		/// RH rotation around Z axis (rad)
		/// </summary>
		public float integrated_zgyro;

		/// <summary>
		/// Temperature * 100 in centi-degrees Celsius
		/// </summary>
		public Int16 temperature;

		/// <summary>
		/// Optical flow quality / confidence. 0: no valid flow, 255: maximum quality
		/// </summary>
		public byte quality;

		/// <summary>
		/// Time in microseconds since the distance was sampled.
		/// </summary>
		public UInt32 time_delta_distance_us;

		/// <summary>
		/// Distance to the center of the flow field in meters. Positive value (including zero): distance known. Negative value: Unknown distance.
		/// </summary>
		public float distance;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_OPTICAL_FLOW_RAD(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The IMU readings in SI units in NED body frame
	/// </summary>
	public class Msg_hil_sensor : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// X acceleration (m/s^2)
		/// </summary>
		public float xacc;

		/// <summary>
		/// Y acceleration (m/s^2)
		/// </summary>
		public float yacc;

		/// <summary>
		/// Z acceleration (m/s^2)
		/// </summary>
		public float zacc;

		/// <summary>
		/// Angular speed around X axis in body frame (rad / sec)
		/// </summary>
		public float xgyro;

		/// <summary>
		/// Angular speed around Y axis in body frame (rad / sec)
		/// </summary>
		public float ygyro;

		/// <summary>
		/// Angular speed around Z axis in body frame (rad / sec)
		/// </summary>
		public float zgyro;

		/// <summary>
		/// X Magnetic field (Gauss)
		/// </summary>
		public float xmag;

		/// <summary>
		/// Y Magnetic field (Gauss)
		/// </summary>
		public float ymag;

		/// <summary>
		/// Z Magnetic field (Gauss)
		/// </summary>
		public float zmag;

		/// <summary>
		/// Absolute pressure in millibar
		/// </summary>
		public float abs_pressure;

		/// <summary>
		/// Differential pressure (airspeed) in millibar
		/// </summary>
		public float diff_pressure;

		/// <summary>
		/// Altitude calculated from pressure
		/// </summary>
		public float pressure_alt;

		/// <summary>
		/// Temperature in degrees celsius
		/// </summary>
		public float temperature;

		/// <summary>
		/// Bitmask for fields that have updated since last message, bit 0 = xacc, bit 12: temperature, bit 31: full reset of attitude/position/velocities/etc was performed in sim.
		/// </summary>
		public UInt32 fields_updated;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_SENSOR(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status of simulation environment, if used
	/// </summary>
	public class Msg_sim_state : MavlinkMessage
    {

		/// <summary>
		/// True attitude quaternion component 1, w (1 in null-rotation)
		/// </summary>
		public float q1;

		/// <summary>
		/// True attitude quaternion component 2, x (0 in null-rotation)
		/// </summary>
		public float q2;

		/// <summary>
		/// True attitude quaternion component 3, y (0 in null-rotation)
		/// </summary>
		public float q3;

		/// <summary>
		/// True attitude quaternion component 4, z (0 in null-rotation)
		/// </summary>
		public float q4;

		/// <summary>
		/// Attitude roll expressed as Euler angles, not recommended except for human-readable outputs
		/// </summary>
		public float roll;

		/// <summary>
		/// Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs
		/// </summary>
		public float pitch;

		/// <summary>
		/// Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs
		/// </summary>
		public float yaw;

		/// <summary>
		/// X acceleration m/s/s
		/// </summary>
		public float xacc;

		/// <summary>
		/// Y acceleration m/s/s
		/// </summary>
		public float yacc;

		/// <summary>
		/// Z acceleration m/s/s
		/// </summary>
		public float zacc;

		/// <summary>
		/// Angular speed around X axis rad/s
		/// </summary>
		public float xgyro;

		/// <summary>
		/// Angular speed around Y axis rad/s
		/// </summary>
		public float ygyro;

		/// <summary>
		/// Angular speed around Z axis rad/s
		/// </summary>
		public float zgyro;

		/// <summary>
		/// Latitude in degrees
		/// </summary>
		public float lat;

		/// <summary>
		/// Longitude in degrees
		/// </summary>
		public float lon;

		/// <summary>
		/// Altitude in meters
		/// </summary>
		public float alt;

		/// <summary>
		/// Horizontal position standard deviation
		/// </summary>
		public float std_dev_horz;

		/// <summary>
		/// Vertical position standard deviation
		/// </summary>
		public float std_dev_vert;

		/// <summary>
		/// True velocity in m/s in NORTH direction in earth-fixed NED frame
		/// </summary>
		public float vn;

		/// <summary>
		/// True velocity in m/s in EAST direction in earth-fixed NED frame
		/// </summary>
		public float ve;

		/// <summary>
		/// True velocity in m/s in DOWN direction in earth-fixed NED frame
		/// </summary>
		public float vd;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SIM_STATE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status generated by radio and injected into MAVLink stream.
	/// </summary>
	public class Msg_radio_status : MavlinkMessage
    {

		/// <summary>
		/// Local signal strength
		/// </summary>
		public byte rssi;

		/// <summary>
		/// Remote signal strength
		/// </summary>
		public byte remrssi;

		/// <summary>
		/// Remaining free buffer space in percent.
		/// </summary>
		public byte txbuf;

		/// <summary>
		/// Background noise level
		/// </summary>
		public byte noise;

		/// <summary>
		/// Remote background noise level
		/// </summary>
		public byte remnoise;

		/// <summary>
		/// Receive errors
		/// </summary>
		public UInt16 rxerrors;

		/// <summary>
		/// Count of error corrected packets
		/// </summary>
		public UInt16 @fixed;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RADIO_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// File transfer message
	/// </summary>
	public class Msg_file_transfer_protocol : MavlinkMessage
    {

		/// <summary>
		/// Network ID (0 for broadcast)
		/// </summary>
		public byte target_network;

		/// <summary>
		/// System ID (0 for broadcast)
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID (0 for broadcast)
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification.
		/// </summary>
		public byte[] payload; // Array size 251

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_FILE_TRANSFER_PROTOCOL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Time synchronization message.
	/// </summary>
	public class Msg_timesync : MavlinkMessage
    {

		/// <summary>
		/// Time sync timestamp 1
		/// </summary>
		public Int64 tc1;

		/// <summary>
		/// Time sync timestamp 2
		/// </summary>
		public Int64 ts1;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_TIMESYNC(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Camera-IMU triggering and synchronisation message.
	/// </summary>
	public class Msg_camera_trigger : MavlinkMessage
    {

		/// <summary>
		/// Timestamp for the image frame in microseconds
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Image frame sequence
		/// </summary>
		public UInt32 seq;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_CAMERA_TRIGGER(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The global position, as returned by the Global Positioning System (GPS). This is
	///                 NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate. Coordinate frame is right-handed, Z-axis up (GPS frame).
	/// </summary>
	public class Msg_hil_gps : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.
		/// </summary>
		public byte fix_type;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude (AMSL, not WGS84), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// GPS HDOP horizontal dilution of position in cm (m*100). If unknown, set to: 65535
		/// </summary>
		public UInt16 eph;

		/// <summary>
		/// GPS VDOP vertical dilution of position in cm (m*100). If unknown, set to: 65535
		/// </summary>
		public UInt16 epv;

		/// <summary>
		/// GPS ground speed (m/s * 100). If unknown, set to: 65535
		/// </summary>
		public UInt16 vel;

		/// <summary>
		/// GPS velocity in cm/s in NORTH direction in earth-fixed NED frame
		/// </summary>
		public Int16 vn;

		/// <summary>
		/// GPS velocity in cm/s in EAST direction in earth-fixed NED frame
		/// </summary>
		public Int16 ve;

		/// <summary>
		/// GPS velocity in cm/s in DOWN direction in earth-fixed NED frame
		/// </summary>
		public Int16 vd;

		/// <summary>
		/// Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: 65535
		/// </summary>
		public UInt16 cog;

		/// <summary>
		/// Number of satellites visible. If unknown, set to 255
		/// </summary>
		public byte satellites_visible;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_GPS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical mouse sensor)
	/// </summary>
	public class Msg_hil_optical_flow : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds, synced to UNIX time or since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Sensor ID
		/// </summary>
		public byte sensor_id;

		/// <summary>
		/// Integration time in microseconds. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.
		/// </summary>
		public UInt32 integration_time_us;

		/// <summary>
		/// Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)
		/// </summary>
		public float integrated_x;

		/// <summary>
		/// Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)
		/// </summary>
		public float integrated_y;

		/// <summary>
		/// RH rotation around X axis (rad)
		/// </summary>
		public float integrated_xgyro;

		/// <summary>
		/// RH rotation around Y axis (rad)
		/// </summary>
		public float integrated_ygyro;

		/// <summary>
		/// RH rotation around Z axis (rad)
		/// </summary>
		public float integrated_zgyro;

		/// <summary>
		/// Temperature * 100 in centi-degrees Celsius
		/// </summary>
		public Int16 temperature;

		/// <summary>
		/// Optical flow quality / confidence. 0: no valid flow, 255: maximum quality
		/// </summary>
		public byte quality;

		/// <summary>
		/// Time in microseconds since the distance was sampled.
		/// </summary>
		public UInt32 time_delta_distance_us;

		/// <summary>
		/// Distance to the center of the flow field in meters. Positive value (including zero): distance known. Negative value: Unknown distance.
		/// </summary>
		public float distance;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_OPTICAL_FLOW(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Sent from simulation to autopilot, avoids in contrast to HIL_STATE singularities. This packet is useful for high throughput applications such as hardware in the loop simulations.
	/// </summary>
	public class Msg_hil_state_quaternion : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation)
		/// </summary>
		public float[] attitude_quaternion; // Array size 4

		/// <summary>
		/// Body frame roll / phi angular speed (rad/s)
		/// </summary>
		public float rollspeed;

		/// <summary>
		/// Body frame pitch / theta angular speed (rad/s)
		/// </summary>
		public float pitchspeed;

		/// <summary>
		/// Body frame yaw / psi angular speed (rad/s)
		/// </summary>
		public float yawspeed;

		/// <summary>
		/// Latitude, expressed as * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude, expressed as * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude in meters, expressed as * 1000 (millimeters)
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// Ground X Speed (Latitude), expressed as m/s * 100
		/// </summary>
		public Int16 vx;

		/// <summary>
		/// Ground Y Speed (Longitude), expressed as m/s * 100
		/// </summary>
		public Int16 vy;

		/// <summary>
		/// Ground Z Speed (Altitude), expressed as m/s * 100
		/// </summary>
		public Int16 vz;

		/// <summary>
		/// Indicated airspeed, expressed as m/s * 100
		/// </summary>
		public UInt16 ind_airspeed;

		/// <summary>
		/// True airspeed, expressed as m/s * 100
		/// </summary>
		public UInt16 true_airspeed;

		/// <summary>
		/// X acceleration (mg)
		/// </summary>
		public Int16 xacc;

		/// <summary>
		/// Y acceleration (mg)
		/// </summary>
		public Int16 yacc;

		/// <summary>
		/// Z acceleration (mg)
		/// </summary>
		public Int16 zacc;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIL_STATE_QUATERNION(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW IMU readings for secondary 9DOF sensor setup. This message should contain the scaled values to the described units
	/// </summary>
	public class Msg_scaled_imu2 : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// X acceleration (mg)
		/// </summary>
		public Int16 xacc;

		/// <summary>
		/// Y acceleration (mg)
		/// </summary>
		public Int16 yacc;

		/// <summary>
		/// Z acceleration (mg)
		/// </summary>
		public Int16 zacc;

		/// <summary>
		/// Angular speed around X axis (millirad /sec)
		/// </summary>
		public Int16 xgyro;

		/// <summary>
		/// Angular speed around Y axis (millirad /sec)
		/// </summary>
		public Int16 ygyro;

		/// <summary>
		/// Angular speed around Z axis (millirad /sec)
		/// </summary>
		public Int16 zgyro;

		/// <summary>
		/// X Magnetic field (milli tesla)
		/// </summary>
		public Int16 xmag;

		/// <summary>
		/// Y Magnetic field (milli tesla)
		/// </summary>
		public Int16 ymag;

		/// <summary>
		/// Z Magnetic field (milli tesla)
		/// </summary>
		public Int16 zmag;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SCALED_IMU2(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request a list of available logs. On some systems calling this may stop on-board logging until LOG_REQUEST_END is called.
	/// </summary>
	public class Msg_log_request_list : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// First log id (0 for first available)
		/// </summary>
		public UInt16 start;

		/// <summary>
		/// Last log id (0xffff for last available)
		/// </summary>
		public UInt16 end;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_REQUEST_LIST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Reply to LOG_REQUEST_LIST
	/// </summary>
	public class Msg_log_entry : MavlinkMessage
    {

		/// <summary>
		/// Log id
		/// </summary>
		public UInt16 id;

		/// <summary>
		/// Total number of logs
		/// </summary>
		public UInt16 num_logs;

		/// <summary>
		/// High log number
		/// </summary>
		public UInt16 last_log_num;

		/// <summary>
		/// UTC timestamp of log in seconds since 1970, or 0 if not available
		/// </summary>
		public UInt32 time_utc;

		/// <summary>
		/// Size of the log (may be approximate) in bytes
		/// </summary>
		public UInt32 size;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_ENTRY(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request a chunk of a log
	/// </summary>
	public class Msg_log_request_data : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Log id (from LOG_ENTRY reply)
		/// </summary>
		public UInt16 id;

		/// <summary>
		/// Offset into the log
		/// </summary>
		public UInt32 ofs;

		/// <summary>
		/// Number of bytes
		/// </summary>
		public UInt32 count;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_REQUEST_DATA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Reply to LOG_REQUEST_DATA
	/// </summary>
	public class Msg_log_data : MavlinkMessage
    {

		/// <summary>
		/// Log id (from LOG_ENTRY reply)
		/// </summary>
		public UInt16 id;

		/// <summary>
		/// Offset into the log
		/// </summary>
		public UInt32 ofs;

		/// <summary>
		/// Number of bytes (zero for end of log)
		/// </summary>
		public byte count;

		/// <summary>
		/// log data
		/// </summary>
		public byte[] data; // Array size 90

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_DATA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Erase all logs
	/// </summary>
	public class Msg_log_erase : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_ERASE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Stop log transfer and resume normal logging
	/// </summary>
	public class Msg_log_request_end : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LOG_REQUEST_END(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// data for injecting into the onboard GPS (used for DGPS)
	/// </summary>
	public class Msg_gps_inject_data : MavlinkMessage
    {

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// data length
		/// </summary>
		public byte len;

		/// <summary>
		/// raw data (110 is enough for 12 satellites of RTCMv2)
		/// </summary>
		public byte[] data; // Array size 110

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS_INJECT_DATA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Second GPS data. Coordinate frame is right-handed, Z-axis up (GPS frame).
	/// </summary>
	public class Msg_gps2_raw : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// See the GPS_FIX_TYPE enum.
		/// </summary>
		public byte fix_type;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude (AMSL, not WGS84), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 alt;

		/// <summary>
		/// GPS HDOP horizontal dilution of position in cm (m*100). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 eph;

		/// <summary>
		/// GPS VDOP vertical dilution of position in cm (m*100). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 epv;

		/// <summary>
		/// GPS ground speed (m/s * 100). If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 vel;

		/// <summary>
		/// Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
		/// </summary>
		public UInt16 cog;

		/// <summary>
		/// Number of satellites visible. If unknown, set to 255
		/// </summary>
		public byte satellites_visible;

		/// <summary>
		/// Number of DGPS satellites
		/// </summary>
		public byte dgps_numch;

		/// <summary>
		/// Age of DGPS info
		/// </summary>
		public UInt32 dgps_age;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS2_RAW(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Power supply status
	/// </summary>
	public class Msg_power_status : MavlinkMessage
    {

		/// <summary>
		/// 5V rail voltage in millivolts
		/// </summary>
		public UInt16 Vcc;

		/// <summary>
		/// servo rail voltage in millivolts
		/// </summary>
		public UInt16 Vservo;

		/// <summary>
		/// power supply status flags (see MAV_POWER_STATUS enum)
		/// </summary>
		public UInt16 flags;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_POWER_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Control a serial port. This can be used for raw access to an onboard serial peripheral such as a GPS or telemetry radio. It is designed to make it possible to update the devices firmware via MAVLink messages or change the devices settings. A message with zero bytes can be used to change just the baudrate.
	/// </summary>
	public class Msg_serial_control : MavlinkMessage
    {

		/// <summary>
		/// See SERIAL_CONTROL_DEV enum
		/// </summary>
		public byte device;

		/// <summary>
		/// See SERIAL_CONTROL_FLAG enum
		/// </summary>
		public byte flags;

		/// <summary>
		/// Timeout for reply data in milliseconds
		/// </summary>
		public UInt16 timeout;

		/// <summary>
		/// Baudrate of transfer. Zero means no change.
		/// </summary>
		public UInt32 baudrate;

		/// <summary>
		/// how many bytes in this transfer
		/// </summary>
		public byte count;

		/// <summary>
		/// serial data
		/// </summary>
		public byte[] data; // Array size 70

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SERIAL_CONTROL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
	/// </summary>
	public class Msg_gps_rtk : MavlinkMessage
    {

		/// <summary>
		/// Time since boot of last baseline message received in ms.
		/// </summary>
		public UInt32 time_last_baseline_ms;

		/// <summary>
		/// Identification of connected RTK receiver.
		/// </summary>
		public byte rtk_receiver_id;

		/// <summary>
		/// GPS Week Number of last baseline
		/// </summary>
		public UInt16 wn;

		/// <summary>
		/// GPS Time of Week of last baseline
		/// </summary>
		public UInt32 tow;

		/// <summary>
		/// GPS-specific health report for RTK data.
		/// </summary>
		public byte rtk_health;

		/// <summary>
		/// Rate of baseline messages being received by GPS, in HZ
		/// </summary>
		public byte rtk_rate;

		/// <summary>
		/// Current number of sats used for RTK calculation.
		/// </summary>
		public byte nsats;

		/// <summary>
		/// Coordinate system of baseline. 0 == ECEF, 1 == NED
		/// </summary>
		public byte baseline_coords_type;

		/// <summary>
		/// Current baseline in ECEF x or NED north component in mm.
		/// </summary>
		public Int32 baseline_a_mm;

		/// <summary>
		/// Current baseline in ECEF y or NED east component in mm.
		/// </summary>
		public Int32 baseline_b_mm;

		/// <summary>
		/// Current baseline in ECEF z or NED down component in mm.
		/// </summary>
		public Int32 baseline_c_mm;

		/// <summary>
		/// Current estimate of baseline accuracy.
		/// </summary>
		public UInt32 accuracy;

		/// <summary>
		/// Current number of integer ambiguity hypotheses.
		/// </summary>
		public Int32 iar_num_hypotheses;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS_RTK(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
	/// </summary>
	public class Msg_gps2_rtk : MavlinkMessage
    {

		/// <summary>
		/// Time since boot of last baseline message received in ms.
		/// </summary>
		public UInt32 time_last_baseline_ms;

		/// <summary>
		/// Identification of connected RTK receiver.
		/// </summary>
		public byte rtk_receiver_id;

		/// <summary>
		/// GPS Week Number of last baseline
		/// </summary>
		public UInt16 wn;

		/// <summary>
		/// GPS Time of Week of last baseline
		/// </summary>
		public UInt32 tow;

		/// <summary>
		/// GPS-specific health report for RTK data.
		/// </summary>
		public byte rtk_health;

		/// <summary>
		/// Rate of baseline messages being received by GPS, in HZ
		/// </summary>
		public byte rtk_rate;

		/// <summary>
		/// Current number of sats used for RTK calculation.
		/// </summary>
		public byte nsats;

		/// <summary>
		/// Coordinate system of baseline. 0 == ECEF, 1 == NED
		/// </summary>
		public byte baseline_coords_type;

		/// <summary>
		/// Current baseline in ECEF x or NED north component in mm.
		/// </summary>
		public Int32 baseline_a_mm;

		/// <summary>
		/// Current baseline in ECEF y or NED east component in mm.
		/// </summary>
		public Int32 baseline_b_mm;

		/// <summary>
		/// Current baseline in ECEF z or NED down component in mm.
		/// </summary>
		public Int32 baseline_c_mm;

		/// <summary>
		/// Current estimate of baseline accuracy.
		/// </summary>
		public UInt32 accuracy;

		/// <summary>
		/// Current number of integer ambiguity hypotheses.
		/// </summary>
		public Int32 iar_num_hypotheses;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS2_RTK(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The RAW IMU readings for 3rd 9DOF sensor setup. This message should contain the scaled values to the described units
	/// </summary>
	public class Msg_scaled_imu3 : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// X acceleration (mg)
		/// </summary>
		public Int16 xacc;

		/// <summary>
		/// Y acceleration (mg)
		/// </summary>
		public Int16 yacc;

		/// <summary>
		/// Z acceleration (mg)
		/// </summary>
		public Int16 zacc;

		/// <summary>
		/// Angular speed around X axis (millirad /sec)
		/// </summary>
		public Int16 xgyro;

		/// <summary>
		/// Angular speed around Y axis (millirad /sec)
		/// </summary>
		public Int16 ygyro;

		/// <summary>
		/// Angular speed around Z axis (millirad /sec)
		/// </summary>
		public Int16 zgyro;

		/// <summary>
		/// X Magnetic field (milli tesla)
		/// </summary>
		public Int16 xmag;

		/// <summary>
		/// Y Magnetic field (milli tesla)
		/// </summary>
		public Int16 ymag;

		/// <summary>
		/// Z Magnetic field (milli tesla)
		/// </summary>
		public Int16 zmag;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SCALED_IMU3(this, bytes, ref offset);
            }        
	}

	public class Msg_data_transmission_handshake : MavlinkMessage
    {

		/// <summary>
		/// type of requested/acknowledged data (as defined in ENUM DATA_TYPES in mavlink/include/mavlink_types.h)
		/// </summary>
		public byte type;

		/// <summary>
		/// total data size in bytes (set on ACK only)
		/// </summary>
		public UInt32 size;

		/// <summary>
		/// Width of a matrix or image
		/// </summary>
		public UInt16 width;

		/// <summary>
		/// Height of a matrix or image
		/// </summary>
		public UInt16 height;

		/// <summary>
		/// number of packets beeing sent (set on ACK only)
		/// </summary>
		public UInt16 packets;

		/// <summary>
		/// payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only)
		/// </summary>
		public byte payload;

		/// <summary>
		/// JPEG quality out of [1,100]
		/// </summary>
		public byte jpg_quality;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DATA_TRANSMISSION_HANDSHAKE(this, bytes, ref offset);
            }        
	}

	public class Msg_encapsulated_data : MavlinkMessage
    {

		/// <summary>
		/// sequence number (starting with 0 on every transmission)
		/// </summary>
		public UInt16 seqnr;

		/// <summary>
		/// image data bytes
		/// </summary>
		public byte[] data; // Array size 253

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ENCAPSULATED_DATA(this, bytes, ref offset);
            }        
	}

	public class Msg_distance_sensor : MavlinkMessage
    {

		/// <summary>
		/// Time since system boot
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Minimum distance the sensor can measure in centimeters
		/// </summary>
		public UInt16 min_distance;

		/// <summary>
		/// Maximum distance the sensor can measure in centimeters
		/// </summary>
		public UInt16 max_distance;

		/// <summary>
		/// Current distance reading
		/// </summary>
		public UInt16 current_distance;

		/// <summary>
		/// Type from MAV_DISTANCE_SENSOR enum.
		/// </summary>
		public byte type;

		/// <summary>
		/// Onboard ID of the sensor
		/// </summary>
		public byte id;

		/// <summary>
		/// Direction the sensor faces from MAV_SENSOR_ORIENTATION enum.
		/// </summary>
		public byte orientation;

		/// <summary>
		/// Measurement covariance in centimeters, 0 for unknown / invalid readings
		/// </summary>
		public byte covariance;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DISTANCE_SENSOR(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request for terrain data and terrain status
	/// </summary>
	public class Msg_terrain_request : MavlinkMessage
    {

		/// <summary>
		/// Latitude of SW corner of first grid (degrees *10^7)
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude of SW corner of first grid (in degrees *10^7)
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Grid spacing in meters
		/// </summary>
		public UInt16 grid_spacing;

		/// <summary>
		/// Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits)
		/// </summary>
		public UInt64 mask;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_TERRAIN_REQUEST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Terrain data sent from GCS. The lat/lon and grid_spacing must be the same as a lat/lon from a TERRAIN_REQUEST
	/// </summary>
	public class Msg_terrain_data : MavlinkMessage
    {

		/// <summary>
		/// Latitude of SW corner of first grid (degrees *10^7)
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude of SW corner of first grid (in degrees *10^7)
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Grid spacing in meters
		/// </summary>
		public UInt16 grid_spacing;

		/// <summary>
		/// bit within the terrain request mask
		/// </summary>
		public byte gridbit;

		/// <summary>
		/// Terrain data in meters AMSL
		/// </summary>
		public Int16[] data; // Array size 16

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_TERRAIN_DATA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Request that the vehicle report terrain height at the given location. Used by GCS to check if vehicle has all terrain data needed for a mission.
	/// </summary>
	public class Msg_terrain_check : MavlinkMessage
    {

		/// <summary>
		/// Latitude (degrees *10^7)
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude (degrees *10^7)
		/// </summary>
		public Int32 lon;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_TERRAIN_CHECK(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Response from a TERRAIN_CHECK request
	/// </summary>
	public class Msg_terrain_report : MavlinkMessage
    {

		/// <summary>
		/// Latitude (degrees *10^7)
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude (degrees *10^7)
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// grid spacing (zero if terrain at this location unavailable)
		/// </summary>
		public UInt16 spacing;

		/// <summary>
		/// Terrain height in meters AMSL
		/// </summary>
		public float terrain_height;

		/// <summary>
		/// Current vehicle height above lat/lon terrain height (meters)
		/// </summary>
		public float current_height;

		/// <summary>
		/// Number of 4x4 terrain blocks waiting to be received or read from disk
		/// </summary>
		public UInt16 pending;

		/// <summary>
		/// Number of 4x4 terrain blocks in memory
		/// </summary>
		public UInt16 loaded;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_TERRAIN_REPORT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Barometer readings for 2nd barometer
	/// </summary>
	public class Msg_scaled_pressure2 : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Absolute pressure (hectopascal)
		/// </summary>
		public float press_abs;

		/// <summary>
		/// Differential pressure 1 (hectopascal)
		/// </summary>
		public float press_diff;

		/// <summary>
		/// Temperature measurement (0.01 degrees celsius)
		/// </summary>
		public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SCALED_PRESSURE2(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Motion capture attitude and position
	/// </summary>
	public class Msg_att_pos_mocap : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (micros since boot or Unix epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
		/// </summary>
		public float[] q; // Array size 4

		/// <summary>
		/// X position in meters (NED)
		/// </summary>
		public float x;

		/// <summary>
		/// Y position in meters (NED)
		/// </summary>
		public float y;

		/// <summary>
		/// Z position in meters (NED)
		/// </summary>
		public float z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ATT_POS_MOCAP(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set the vehicle attitude and body angular rates.
	/// </summary>
	public class Msg_set_actuator_control_target : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (micros since boot or Unix epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
		/// </summary>
		public byte group_mlx;

		/// <summary>
		/// System ID
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID
		/// </summary>
		public byte target_component;

		/// <summary>
		/// Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
		/// </summary>
		public float[] controls; // Array size 8

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_ACTUATOR_CONTROL_TARGET(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Set the vehicle attitude and body angular rates.
	/// </summary>
	public class Msg_actuator_control_target : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (micros since boot or Unix epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
		/// </summary>
		public byte group_mlx;

		/// <summary>
		/// Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
		/// </summary>
		public float[] controls; // Array size 8

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ACTUATOR_CONTROL_TARGET(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The current system altitude.
	/// </summary>
	public class Msg_altitude : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (micros since boot or Unix epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights.
		/// </summary>
		public float altitude_monotonic;

		/// <summary>
		/// This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output AMSL by default and not the WGS84 altitude.
		/// </summary>
		public float altitude_amsl;

		/// <summary>
		/// This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive.
		/// </summary>
		public float altitude_local;

		/// <summary>
		/// This is the altitude above the home position. It resets on each change of the current home position.
		/// </summary>
		public float altitude_relative;

		/// <summary>
		/// This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown.
		/// </summary>
		public float altitude_terrain;

		/// <summary>
		/// This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available.
		/// </summary>
		public float bottom_clearance;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ALTITUDE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The autopilot is requesting a resource (file, binary, other type of data)
	/// </summary>
	public class Msg_resource_request : MavlinkMessage
    {

		/// <summary>
		/// Request ID. This ID should be re-used when sending back URI contents
		/// </summary>
		public byte request_id;

		/// <summary>
		/// The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary
		/// </summary>
		public byte uri_type;

		/// <summary>
		/// The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum)
		/// </summary>
		public byte[] uri; // Array size 120

		/// <summary>
		/// The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream.
		/// </summary>
		public byte transfer_type;

		/// <summary>
		/// The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP).
		/// </summary>
		public byte[] storage; // Array size 120

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_RESOURCE_REQUEST(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Barometer readings for 3rd barometer
	/// </summary>
	public class Msg_scaled_pressure3 : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Absolute pressure (hectopascal)
		/// </summary>
		public float press_abs;

		/// <summary>
		/// Differential pressure 1 (hectopascal)
		/// </summary>
		public float press_diff;

		/// <summary>
		/// Temperature measurement (0.01 degrees celsius)
		/// </summary>
		public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SCALED_PRESSURE3(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// current motion information from a designated system
	/// </summary>
	public class Msg_follow_target : MavlinkMessage
    {

		/// <summary>
		/// Timestamp in milliseconds since system boot
		/// </summary>
		public UInt64 timestamp;

		/// <summary>
		/// bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3)
		/// </summary>
		public byte est_capabilities;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// AMSL, in meters
		/// </summary>
		public float alt;

		/// <summary>
		/// target velocity (0,0,0) for unknown
		/// </summary>
		public float[] vel; // Array size 3

		/// <summary>
		/// linear target acceleration (0,0,0) for unknown
		/// </summary>
		public float[] acc; // Array size 3

		/// <summary>
		/// (1 0 0 0 for unknown)
		/// </summary>
		public float[] attitude_q; // Array size 4

		/// <summary>
		/// (0 0 0 for unknown)
		/// </summary>
		public float[] rates; // Array size 3

		/// <summary>
		/// eph epv
		/// </summary>
		public float[] position_cov; // Array size 3

		/// <summary>
		/// button states or switches of a tracker device
		/// </summary>
		public UInt64 custom_state;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_FOLLOW_TARGET(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The smoothed, monotonic system state used to feed the control loops of the system.
	/// </summary>
	public class Msg_control_system_state : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (micros since boot or Unix epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// X acceleration in body frame
		/// </summary>
		public float x_acc;

		/// <summary>
		/// Y acceleration in body frame
		/// </summary>
		public float y_acc;

		/// <summary>
		/// Z acceleration in body frame
		/// </summary>
		public float z_acc;

		/// <summary>
		/// X velocity in body frame
		/// </summary>
		public float x_vel;

		/// <summary>
		/// Y velocity in body frame
		/// </summary>
		public float y_vel;

		/// <summary>
		/// Z velocity in body frame
		/// </summary>
		public float z_vel;

		/// <summary>
		/// X position in local frame
		/// </summary>
		public float x_pos;

		/// <summary>
		/// Y position in local frame
		/// </summary>
		public float y_pos;

		/// <summary>
		/// Z position in local frame
		/// </summary>
		public float z_pos;

		/// <summary>
		/// Airspeed, set to -1 if unknown
		/// </summary>
		public float airspeed;

		/// <summary>
		/// Variance of body velocity estimate
		/// </summary>
		public float[] vel_variance; // Array size 3

		/// <summary>
		/// Variance in local position
		/// </summary>
		public float[] pos_variance; // Array size 3

		/// <summary>
		/// The attitude, represented as Quaternion
		/// </summary>
		public float[] q; // Array size 4

		/// <summary>
		/// Angular rate in roll axis
		/// </summary>
		public float roll_rate;

		/// <summary>
		/// Angular rate in pitch axis
		/// </summary>
		public float pitch_rate;

		/// <summary>
		/// Angular rate in yaw axis
		/// </summary>
		public float yaw_rate;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_CONTROL_SYSTEM_STATE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Battery information
	/// </summary>
	public class Msg_battery_status : MavlinkMessage
    {

		/// <summary>
		/// Battery ID
		/// </summary>
		public byte id;

		/// <summary>
		/// Function of the battery
		/// </summary>
		public byte battery_function;

		/// <summary>
		/// Type (chemistry) of the battery
		/// </summary>
		public byte type;

		/// <summary>
		/// Temperature of the battery in centi-degrees celsius. INT16_MAX for unknown temperature.
		/// </summary>
		public Int16 temperature;

		/// <summary>
		/// Battery voltage of cells, in millivolts (1 = 1 millivolt). Cells above the valid cell count for this battery should have the UINT16_MAX value.
		/// </summary>
		public UInt16[] voltages; // Array size 10

		/// <summary>
		/// Battery current, in 10*milliamperes (1 = 10 milliampere), -1: autopilot does not measure the current
		/// </summary>
		public Int16 current_battery;

		/// <summary>
		/// Consumed charge, in milliampere hours (1 = 1 mAh), -1: autopilot does not provide mAh consumption estimate
		/// </summary>
		public Int32 current_consumed;

		/// <summary>
		/// Consumed energy, in 100*Joules (intergrated U*I*dt)  (1 = 100 Joule), -1: autopilot does not provide energy consumption estimate
		/// </summary>
		public Int32 energy_consumed;

		/// <summary>
		/// Remaining battery energy: (0%: 0, 100%: 100), -1: autopilot does not estimate the remaining battery
		/// </summary>
		public sbyte battery_remaining;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_BATTERY_STATUS(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Version and capability of autopilot software
	/// </summary>
	public class Msg_autopilot_version : MavlinkMessage
    {

		/// <summary>
		/// bitmask of capabilities (see MAV_PROTOCOL_CAPABILITY enum)
		/// </summary>
		public UInt64 capabilities;

		/// <summary>
		/// Firmware version number
		/// </summary>
		public UInt32 flight_sw_version;

		/// <summary>
		/// Middleware version number
		/// </summary>
		public UInt32 middleware_sw_version;

		/// <summary>
		/// Operating system version number
		/// </summary>
		public UInt32 os_sw_version;

		/// <summary>
		/// HW / board version (last 8 bytes should be silicon ID, if any)
		/// </summary>
		public UInt32 board_version;

		/// <summary>
		/// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
		/// </summary>
		public byte[] flight_custom_version; // Array size 8

		/// <summary>
		/// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
		/// </summary>
		public byte[] middleware_custom_version; // Array size 8

		/// <summary>
		/// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
		/// </summary>
		public byte[] os_custom_version; // Array size 8

		/// <summary>
		/// ID of the board vendor
		/// </summary>
		public UInt16 vendor_id;

		/// <summary>
		/// ID of the product
		/// </summary>
		public UInt16 product_id;

		/// <summary>
		/// UID if provided by hardware
		/// </summary>
		public UInt64 uid;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_AUTOPILOT_VERSION(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The location of a landing area captured from a downward facing camera
	/// </summary>
	public class Msg_landing_target : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (micros since boot or Unix epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// The ID of the target if multiple targets are present
		/// </summary>
		public byte target_num;

		/// <summary>
		/// MAV_FRAME enum specifying the whether the following feilds are earth-frame, body-frame, etc.
		/// </summary>
		public byte frame;

		/// <summary>
		/// X-axis angular offset (in radians) of the target from the center of the image
		/// </summary>
		public float angle_x;

		/// <summary>
		/// Y-axis angular offset (in radians) of the target from the center of the image
		/// </summary>
		public float angle_y;

		/// <summary>
		/// Distance to the target from the vehicle in meters
		/// </summary>
		public float distance;

		/// <summary>
		/// Size in radians of target along x-axis
		/// </summary>
		public float size_x;

		/// <summary>
		/// Size in radians of target along y-axis
		/// </summary>
		public float size_y;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_LANDING_TARGET(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Estimator status message including flags, innovation test ratios and estimated accuracies. The flags message is an integer bitmask containing information on which EKF outputs are valid. See the ESTIMATOR_STATUS_FLAGS enum definition for further information. The innovaton test ratios show the magnitude of the sensor innovation divided by the innovation check threshold. Under normal operation the innovaton test ratios should be below 0.5 with occasional values up to 1.0. Values greater than 1.0 should be rare under normal operation and indicate that a measurement has been rejected by the filter. The user should be notified if an innovation test ratio greater than 1.0 is recorded. Notifications for values in the range between 0.5 and 1.0 should be optional and controllable by the user.
	/// </summary>
	public class Msg_estimator_status : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (micros since boot or Unix epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Integer bitmask indicating which EKF outputs are valid. See definition for ESTIMATOR_STATUS_FLAGS.
		/// </summary>
		public UInt16 flags;

		/// <summary>
		/// Velocity innovation test ratio
		/// </summary>
		public float vel_ratio;

		/// <summary>
		/// Horizontal position innovation test ratio
		/// </summary>
		public float pos_horiz_ratio;

		/// <summary>
		/// Vertical position innovation test ratio
		/// </summary>
		public float pos_vert_ratio;

		/// <summary>
		/// Magnetometer innovation test ratio
		/// </summary>
		public float mag_ratio;

		/// <summary>
		/// Height above terrain innovation test ratio
		/// </summary>
		public float hagl_ratio;

		/// <summary>
		/// True airspeed innovation test ratio
		/// </summary>
		public float tas_ratio;

		/// <summary>
		/// Horizontal position 1-STD accuracy relative to the EKF local origin (m)
		/// </summary>
		public float pos_horiz_accuracy;

		/// <summary>
		/// Vertical position 1-STD accuracy relative to the EKF local origin (m)
		/// </summary>
		public float pos_vert_accuracy;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ESTIMATOR_STATUS(this, bytes, ref offset);
            }        
	}

	public class Msg_wind_cov : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (micros since boot or Unix epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Wind in X (NED) direction in m/s
		/// </summary>
		public float wind_x;

		/// <summary>
		/// Wind in Y (NED) direction in m/s
		/// </summary>
		public float wind_y;

		/// <summary>
		/// Wind in Z (NED) direction in m/s
		/// </summary>
		public float wind_z;

		/// <summary>
		/// Variability of the wind in XY. RMS of a 1 Hz lowpassed wind estimate.
		/// </summary>
		public float var_horiz;

		/// <summary>
		/// Variability of the wind in Z. RMS of a 1 Hz lowpassed wind estimate.
		/// </summary>
		public float var_vert;

		/// <summary>
		/// AMSL altitude (m) this measurement was taken at
		/// </summary>
		public float wind_alt;

		/// <summary>
		/// Horizontal speed 1-STD accuracy
		/// </summary>
		public float horiz_accuracy;

		/// <summary>
		/// Vertical speed 1-STD accuracy
		/// </summary>
		public float vert_accuracy;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_WIND_COV(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// GPS sensor input message.  This is a raw sensor value sent by the GPS. This is NOT the global position estimate of the sytem.
	/// </summary>
	public class Msg_gps_input : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (micros since boot or Unix epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// ID of the GPS for multiple GPS inputs
		/// </summary>
		public byte gps_id;

		/// <summary>
		/// Flags indicating which fields to ignore (see GPS_INPUT_IGNORE_FLAGS enum).  All other fields must be provided.
		/// </summary>
		public UInt16 ignore_flags;

		/// <summary>
		/// GPS time (milliseconds from start of GPS week)
		/// </summary>
		public UInt32 time_week_ms;

		/// <summary>
		/// GPS week number
		/// </summary>
		public UInt16 time_week;

		/// <summary>
		/// 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK
		/// </summary>
		public byte fix_type;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Altitude (AMSL, not WGS84), in m (positive for up)
		/// </summary>
		public float alt;

		/// <summary>
		/// GPS HDOP horizontal dilution of position in m
		/// </summary>
		public float hdop;

		/// <summary>
		/// GPS VDOP vertical dilution of position in m
		/// </summary>
		public float vdop;

		/// <summary>
		/// GPS velocity in m/s in NORTH direction in earth-fixed NED frame
		/// </summary>
		public float vn;

		/// <summary>
		/// GPS velocity in m/s in EAST direction in earth-fixed NED frame
		/// </summary>
		public float ve;

		/// <summary>
		/// GPS velocity in m/s in DOWN direction in earth-fixed NED frame
		/// </summary>
		public float vd;

		/// <summary>
		/// GPS speed accuracy in m/s
		/// </summary>
		public float speed_accuracy;

		/// <summary>
		/// GPS horizontal accuracy in m
		/// </summary>
		public float horiz_accuracy;

		/// <summary>
		/// GPS vertical accuracy in m
		/// </summary>
		public float vert_accuracy;

		/// <summary>
		/// Number of satellites visible.
		/// </summary>
		public byte satellites_visible;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS_INPUT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// WORK IN PROGRESS! RTCM message for injecting into the onboard GPS (used for DGPS)
	/// </summary>
	public class Msg_gps_rtcm_data : MavlinkMessage
    {

		/// <summary>
		/// LSB: 1 means message is fragmented
		/// </summary>
		public byte flags;

		/// <summary>
		/// data length
		/// </summary>
		public byte len;

		/// <summary>
		/// RTCM message (may be fragmented)
		/// </summary>
		public byte[] data; // Array size 180

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_GPS_RTCM_DATA(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Message appropriate for high latency connections like Iridium
	/// </summary>
	public class Msg_high_latency : MavlinkMessage
    {

		/// <summary>
		/// System mode bitfield, see MAV_MODE_FLAG ENUM in mavlink/include/mavlink_types.h
		/// </summary>
		public byte base_mode;

		/// <summary>
		/// A bitfield for use for autopilot-specific flags.
		/// </summary>
		public UInt32 custom_mode;

		/// <summary>
		/// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
		/// </summary>
		public byte landed_state;

		/// <summary>
		/// roll (centidegrees)
		/// </summary>
		public Int16 roll;

		/// <summary>
		/// pitch (centidegrees)
		/// </summary>
		public Int16 pitch;

		/// <summary>
		/// heading (centidegrees)
		/// </summary>
		public UInt16 heading;

		/// <summary>
		/// throttle (percentage)
		/// </summary>
		public sbyte throttle;

		/// <summary>
		/// heading setpoint (centidegrees)
		/// </summary>
		public Int16 heading_sp;

		/// <summary>
		/// Latitude, expressed as degrees * 1E7
		/// </summary>
		public Int32 latitude;

		/// <summary>
		/// Longitude, expressed as degrees * 1E7
		/// </summary>
		public Int32 longitude;

		/// <summary>
		/// Altitude above mean sea level (meters)
		/// </summary>
		public Int16 altitude_amsl;

		/// <summary>
		/// Altitude setpoint relative to the home position (meters)
		/// </summary>
		public Int16 altitude_sp;

		/// <summary>
		/// airspeed (m/s)
		/// </summary>
		public byte airspeed;

		/// <summary>
		/// airspeed setpoint (m/s)
		/// </summary>
		public byte airspeed_sp;

		/// <summary>
		/// groundspeed (m/s)
		/// </summary>
		public byte groundspeed;

		/// <summary>
		/// climb rate (m/s)
		/// </summary>
		public sbyte climb_rate;

		/// <summary>
		/// Number of satellites visible. If unknown, set to 255
		/// </summary>
		public byte gps_nsat;

		/// <summary>
		/// See the GPS_FIX_TYPE enum.
		/// </summary>
		public byte gps_fix_type;

		/// <summary>
		/// Remaining battery (percentage)
		/// </summary>
		public byte battery_remaining;

		/// <summary>
		/// Autopilot temperature (degrees C)
		/// </summary>
		public sbyte temperature;

		/// <summary>
		/// Air temperature (degrees C) from airspeed sensor
		/// </summary>
		public sbyte temperature_air;

		/// <summary>
		/// failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)
		/// </summary>
		public byte failsafe;

		/// <summary>
		/// current waypoint number
		/// </summary>
		public byte wp_num;

		/// <summary>
		/// distance to target (meters)
		/// </summary>
		public UInt16 wp_distance;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HIGH_LATENCY(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Vibration levels and accelerometer clipping
	/// </summary>
	public class Msg_vibration : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (micros since boot or Unix epoch)
		/// </summary>
		public UInt64 time_usec;

		/// <summary>
		/// Vibration levels on X-axis
		/// </summary>
		public float vibration_x;

		/// <summary>
		/// Vibration levels on Y-axis
		/// </summary>
		public float vibration_y;

		/// <summary>
		/// Vibration levels on Z-axis
		/// </summary>
		public float vibration_z;

		/// <summary>
		/// first accelerometer clipping count
		/// </summary>
		public UInt32 clipping_0;

		/// <summary>
		/// second accelerometer clipping count
		/// </summary>
		public UInt32 clipping_1;

		/// <summary>
		/// third accelerometer clipping count
		/// </summary>
		public UInt32 clipping_2;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_VIBRATION(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// This message can be requested by sending the MAV_CMD_GET_HOME_POSITION command. The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitely set by the operator before or after. The position the system will return to and land on. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
	/// </summary>
	public class Msg_home_position : MavlinkMessage
    {

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 latitude;

		/// <summary>
		/// Longitude (WGS84, in degrees * 1E7
		/// </summary>
		public Int32 longitude;

		/// <summary>
		/// Altitude (AMSL), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 altitude;

		/// <summary>
		/// Local X position of this position in the local coordinate frame
		/// </summary>
		public float x;

		/// <summary>
		/// Local Y position of this position in the local coordinate frame
		/// </summary>
		public float y;

		/// <summary>
		/// Local Z position of this position in the local coordinate frame
		/// </summary>
		public float z;

		/// <summary>
		/// World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground
		/// </summary>
		public float[] q; // Array size 4

		/// <summary>
		/// Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
		/// </summary>
		public float approach_x;

		/// <summary>
		/// Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
		/// </summary>
		public float approach_y;

		/// <summary>
		/// Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
		/// </summary>
		public float approach_z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_HOME_POSITION(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitely set by the operator before or after. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
	/// </summary>
	public class Msg_set_home_position : MavlinkMessage
    {

		/// <summary>
		/// System ID.
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Latitude (WGS84), in degrees * 1E7
		/// </summary>
		public Int32 latitude;

		/// <summary>
		/// Longitude (WGS84, in degrees * 1E7
		/// </summary>
		public Int32 longitude;

		/// <summary>
		/// Altitude (AMSL), in meters * 1000 (positive for up)
		/// </summary>
		public Int32 altitude;

		/// <summary>
		/// Local X position of this position in the local coordinate frame
		/// </summary>
		public float x;

		/// <summary>
		/// Local Y position of this position in the local coordinate frame
		/// </summary>
		public float y;

		/// <summary>
		/// Local Z position of this position in the local coordinate frame
		/// </summary>
		public float z;

		/// <summary>
		/// World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground
		/// </summary>
		public float[] q; // Array size 4

		/// <summary>
		/// Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
		/// </summary>
		public float approach_x;

		/// <summary>
		/// Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
		/// </summary>
		public float approach_y;

		/// <summary>
		/// Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
		/// </summary>
		public float approach_z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_SET_HOME_POSITION(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// This interface replaces DATA_STREAM
	/// </summary>
	public class Msg_message_interval : MavlinkMessage
    {

		/// <summary>
		/// The ID of the requested MAVLink message. v1.0 is limited to 254 messages.
		/// </summary>
		public UInt16 message_id;

		/// <summary>
		/// The interval between two messages, in microseconds. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent.
		/// </summary>
		public Int32 interval_us;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MESSAGE_INTERVAL(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Provides state for additional features
	/// </summary>
	public class Msg_extended_sys_state : MavlinkMessage
    {

		/// <summary>
		/// The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration.
		/// </summary>
		public byte vtol_state;

		/// <summary>
		/// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
		/// </summary>
		public byte landed_state;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_EXTENDED_SYS_STATE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// The location and information of an ADSB vehicle
	/// </summary>
	public class Msg_adsb_vehicle : MavlinkMessage
    {

		/// <summary>
		/// ICAO address
		/// </summary>
		public UInt32 ICAO_address;

		/// <summary>
		/// Latitude, expressed as degrees * 1E7
		/// </summary>
		public Int32 lat;

		/// <summary>
		/// Longitude, expressed as degrees * 1E7
		/// </summary>
		public Int32 lon;

		/// <summary>
		/// Type from ADSB_ALTITUDE_TYPE enum
		/// </summary>
		public byte altitude_type;

		/// <summary>
		/// Altitude(ASL) in millimeters
		/// </summary>
		public Int32 altitude;

		/// <summary>
		/// Course over ground in centidegrees
		/// </summary>
		public UInt16 heading;

		/// <summary>
		/// The horizontal velocity in centimeters/second
		/// </summary>
		public UInt16 hor_velocity;

		/// <summary>
		/// The vertical velocity in centimeters/second, positive is up
		/// </summary>
		public Int16 ver_velocity;

		/// <summary>
		/// The callsign, 8+null
		/// </summary>
		public byte[] callsign; // Array size 9

		/// <summary>
		/// Type from ADSB_EMITTER_TYPE enum
		/// </summary>
		public byte emitter_type;

		/// <summary>
		/// Time since last communication in seconds
		/// </summary>
		public byte tslc;

		/// <summary>
		/// Flags to indicate various statuses including valid data fields
		/// </summary>
		public UInt16 flags;

		/// <summary>
		/// Squawk code
		/// </summary>
		public UInt16 squawk;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_ADSB_VEHICLE(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Information about a potential collision
	/// </summary>
	public class Msg_collision : MavlinkMessage
    {

		/// <summary>
		/// Collision data source
		/// </summary>
		public byte src;

		/// <summary>
		/// Unique identifier, domain based on src field
		/// </summary>
		public UInt32 id;

		/// <summary>
		/// Action that is being taken to avoid this collision
		/// </summary>
		public byte action;

		/// <summary>
		/// How concerned the aircraft is about this collision
		/// </summary>
		public byte threat_level;

		/// <summary>
		/// Estimated time until collision occurs (seconds)
		/// </summary>
		public float time_to_minimum_delta;

		/// <summary>
		/// Closest vertical distance in meters between vehicle and object
		/// </summary>
		public float altitude_minimum_delta;

		/// <summary>
		/// Closest horizontal distance in meteres between vehicle and object
		/// </summary>
		public float horizontal_minimum_delta;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_COLLISION(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Message implementing parts of the V2 payload specs in V1 frames for transitional support.
	/// </summary>
	public class Msg_v2_extension : MavlinkMessage
    {

		/// <summary>
		/// Network ID (0 for broadcast)
		/// </summary>
		public byte target_network;

		/// <summary>
		/// System ID (0 for broadcast)
		/// </summary>
		public byte target_system;

		/// <summary>
		/// Component ID (0 for broadcast)
		/// </summary>
		public byte target_component;

		/// <summary>
		/// A code that identifies the software component that understands this message (analogous to usb device classes or mime type strings).  If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/extension-message-ids.xml.  Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.
		/// </summary>
		public UInt16 message_type;

		/// <summary>
		/// Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification.
		/// </summary>
		public byte[] payload; // Array size 249

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_V2_EXTENSION(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send raw controller memory. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
	/// </summary>
	public class Msg_memory_vect : MavlinkMessage
    {

		/// <summary>
		/// Starting address of the debug variables
		/// </summary>
		public UInt16 address;

		/// <summary>
		/// Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below
		/// </summary>
		public byte ver;

		/// <summary>
		/// Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14
		/// </summary>
		public byte type;

		/// <summary>
		/// Memory contents at specified address
		/// </summary>
		public sbyte[] value; // Array size 32

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_MEMORY_VECT(this, bytes, ref offset);
            }        
	}

	public class Msg_debug_vect : MavlinkMessage
    {
		public byte[] name; // Array size 10

		/// <summary>
		/// Timestamp
		/// </summary>
		public UInt64 time_usec;
		public float x;
		public float y;
		public float z;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DEBUG_VECT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send a key-value pair as float. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
	/// </summary>
	public class Msg_named_value_float : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Name of the debug variable
		/// </summary>
		public byte[] name; // Array size 10

		/// <summary>
		/// Floating point value
		/// </summary>
		public float value;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_NAMED_VALUE_FLOAT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send a key-value pair as integer. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
	/// </summary>
	public class Msg_named_value_int : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// Name of the debug variable
		/// </summary>
		public byte[] name; // Array size 10

		/// <summary>
		/// Signed integer value
		/// </summary>
		public Int32 value;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_NAMED_VALUE_INT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).
	/// </summary>
	public class Msg_statustext : MavlinkMessage
    {

		/// <summary>
		/// Severity of status. Relies on the definitions within RFC-5424. See enum MAV_SEVERITY.
		/// </summary>
		public byte severity;

		/// <summary>
		/// Status text message, without null termination character
		/// </summary>
		public byte[] text; // Array size 50

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_STATUSTEXT(this, bytes, ref offset);
            }        
	}


	/// <summary>
	/// Send a debug value. The index is used to discriminate between values. These values show up in the plot of QGroundControl as DEBUG N.
	/// </summary>
	public class Msg_debug : MavlinkMessage
    {

		/// <summary>
		/// Timestamp (milliseconds since system boot)
		/// </summary>
		public UInt32 time_boot_ms;

		/// <summary>
		/// index of debug variable
		/// </summary>
		public byte ind;

		/// <summary>
		/// DEBUG value
		/// </summary>
		public float value;

        public override int Serialize(byte[] bytes, ref int offset)
            {
                return MavLinkSerializer.Serialize_DEBUG(this, bytes, ref offset);
            }        
	}

}

