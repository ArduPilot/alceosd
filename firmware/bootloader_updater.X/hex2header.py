import sys



if __name__ == "__main__":
	if len(sys.argv) < 2:
		print "need input file"
		sys.exit(1)

	fin = open(sys.argv[1], "r")
	lines = fin.readlines()
	fin.close()

	fout = open("bootloader.h", "w")

	fout.write("/* File automatically generated by hex2header.py */\n\n")
	fout.write("const unsigned int bootloader_data[] = {");

	mem = {}

	eAddr = 0
	addr = 0
	for line in lines:
		line = line.strip()
		if line[0] != ":":
			continue

		lType = int(line[7:9], 16)
		lAddr = int(line[3:7], 16)
		dLen = int(line[1:3], 16)

		if lType == 2:
			eAddr = int(line[9:13], 16) << 8;
			continue
		if lType == 4:
			eAddr = int(line[9:13], 16) << 16;
			continue


		if lType == 1:
			break

		if lType == 0:
			idx = 0
			data = line[9:-2]
			dataLen = len(data)
			#print "data = ", data
			for idx in range(dataLen / 4):
				word =  int(data[idx*4:(idx*4)+2], 16)
				word |= int(data[(idx*4)+2:(idx*4)+4], 16) << 8;
				addr = (lAddr + eAddr + idx*2) >> 1
				#print hex(addr), "=", hex(word)
				mem[addr] = word

	output = []
	for addr in range(0x800, 0xfff):
		if mem.has_key(addr):
			output.append(mem[addr])
		else:
			output.append(0xffff)



	output.reverse()
	idx = 0
	for word in output:
		if word != 0xffff:
			break
		output = output[1:]


	output.reverse()

	left = len(output) % 8
	if left != 0:
		output += [0xffff] * (8-left)
	while (idx < len(output)):
		fout.write("\n    ")
		for i in range(8):
			fout.write("0x%04x, " % output[idx])
			idx += 1

	fout.write("\n};\n");
	fout.close()


